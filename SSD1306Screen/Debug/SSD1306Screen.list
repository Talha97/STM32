
SSD1306Screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004094  08004094  0002289c  2**0
                  CONTENTS
  4 .ARM          00000008  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800409c  0800409c  0002289c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000289c  20000000  080040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000289c  08006940  0002289c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ddc  08006940  00022ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002289c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cda5  00000000  00000000  000228cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3f  00000000  00000000  0002f671  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  00031e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ea3  00000000  00000000  00032a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a26c  00000000  00000000  000538d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9ca9  00000000  00000000  0005db3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001277e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  00127864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000289c 	.word	0x2000289c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c00 	.word	0x08003c00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200028a0 	.word	0x200028a0
 80001cc:	08003c00 	.word	0x08003c00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f002 fdba 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20002834 	.word	0x20002834
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	20002cc8 	.word	0x20002cc8

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20002cc8 	.word	0x20002cc8

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	e16b      	b.n	8000bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f040 815a 	bne.w	8000baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00b      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d007      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090a:	2b11      	cmp	r3, #17
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d130      	bne.n	8000978 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	f003 0201 	and.w	r2, r3, #1
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0xfc>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b12      	cmp	r3, #18
 80009b6:	d123      	bne.n	8000a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	08da      	lsrs	r2, r3, #3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3208      	adds	r2, #8
 80009fa:	69b9      	ldr	r1, [r7, #24]
 80009fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0203 	and.w	r2, r3, #3
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80b4 	beq.w	8000baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a5e      	ldr	r2, [pc, #376]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d02b      	beq.n	8000ae2 <HAL_GPIO_Init+0x226>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d025      	beq.n	8000ade <HAL_GPIO_Init+0x222>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d01f      	beq.n	8000ada <HAL_GPIO_Init+0x21e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d019      	beq.n	8000ad6 <HAL_GPIO_Init+0x21a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x320>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x216>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x324>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x212>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x328>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x20e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x32c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x20a>
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	e00e      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000aca:	2306      	movs	r3, #6
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000af4:	4934      	ldr	r1, [pc, #208]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	f67f ae90 	bls.w	80008d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3724      	adds	r7, #36	; 0x24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c0c:	e003      	b.n	8000c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e11f      	b.n	8000e76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d106      	bne.n	8000c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f002 fa8e 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2224      	movs	r2, #36	; 0x24
 8000c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c88:	f001 f982 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8000c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4a7b      	ldr	r2, [pc, #492]	; (8000e80 <HAL_I2C_Init+0x25c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d807      	bhi.n	8000ca8 <HAL_I2C_Init+0x84>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a7a      	ldr	r2, [pc, #488]	; (8000e84 <HAL_I2C_Init+0x260>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	bf94      	ite	ls
 8000ca0:	2301      	movls	r3, #1
 8000ca2:	2300      	movhi	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	e006      	b.n	8000cb6 <HAL_I2C_Init+0x92>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4a77      	ldr	r2, [pc, #476]	; (8000e88 <HAL_I2C_Init+0x264>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	bf94      	ite	ls
 8000cb0:	2301      	movls	r3, #1
 8000cb2:	2300      	movhi	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0db      	b.n	8000e76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4a72      	ldr	r2, [pc, #456]	; (8000e8c <HAL_I2C_Init+0x268>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a64      	ldr	r2, [pc, #400]	; (8000e80 <HAL_I2C_Init+0x25c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d802      	bhi.n	8000cf8 <HAL_I2C_Init+0xd4>
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	e009      	b.n	8000d0c <HAL_I2C_Init+0xe8>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	4a63      	ldr	r2, [pc, #396]	; (8000e90 <HAL_I2C_Init+0x26c>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	099b      	lsrs	r3, r3, #6
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6812      	ldr	r2, [r2, #0]
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4956      	ldr	r1, [pc, #344]	; (8000e80 <HAL_I2C_Init+0x25c>)
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d80d      	bhi.n	8000d48 <HAL_I2C_Init+0x124>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	1e59      	subs	r1, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	bf38      	it	cc
 8000d44:	2304      	movcc	r3, #4
 8000d46:	e04f      	b.n	8000de8 <HAL_I2C_Init+0x1c4>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d111      	bne.n	8000d74 <HAL_I2C_Init+0x150>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1e58      	subs	r0, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	440b      	add	r3, r1
 8000d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2301      	moveq	r3, #1
 8000d6e:	2300      	movne	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	e012      	b.n	8000d9a <HAL_I2C_Init+0x176>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	1e58      	subs	r0, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6859      	ldr	r1, [r3, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	0099      	lsls	r1, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_I2C_Init+0x17e>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e022      	b.n	8000de8 <HAL_I2C_Init+0x1c4>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10e      	bne.n	8000dc8 <HAL_I2C_Init+0x1a4>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1e58      	subs	r0, r3, #1
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6859      	ldr	r1, [r3, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	440b      	add	r3, r1
 8000db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc6:	e00f      	b.n	8000de8 <HAL_I2C_Init+0x1c4>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6859      	ldr	r1, [r3, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	0099      	lsls	r1, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	6809      	ldr	r1, [r1, #0]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69da      	ldr	r2, [r3, #28]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	6911      	ldr	r1, [r2, #16]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68d2      	ldr	r2, [r2, #12]
 8000e22:	4311      	orrs	r1, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2220      	movs	r2, #32
 8000e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	000186a0 	.word	0x000186a0
 8000e84:	001e847f 	.word	0x001e847f
 8000e88:	003d08ff 	.word	0x003d08ff
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	10624dd3 	.word	0x10624dd3

08000e94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	817b      	strh	r3, [r7, #10]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	813b      	strh	r3, [r7, #8]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000eae:	f7ff fbc5 	bl	800063c <HAL_GetTick>
 8000eb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	f040 80d9 	bne.w	8001074 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2319      	movs	r3, #25
 8000ec8:	2201      	movs	r2, #1
 8000eca:	496d      	ldr	r1, [pc, #436]	; (8001080 <HAL_I2C_Mem_Write+0x1ec>)
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f000 fa9d 	bl	800140c <I2C_WaitOnFlagUntilTimeout>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e0cc      	b.n	8001076 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d101      	bne.n	8000eea <HAL_I2C_Mem_Write+0x56>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e0c5      	b.n	8001076 <HAL_I2C_Mem_Write+0x1e2>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d007      	beq.n	8000f10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0201 	orr.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2221      	movs	r2, #33	; 0x21
 8000f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2240      	movs	r2, #64	; 0x40
 8000f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a3a      	ldr	r2, [r7, #32]
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_I2C_Mem_Write+0x1f0>)
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f52:	88f8      	ldrh	r0, [r7, #6]
 8000f54:	893a      	ldrh	r2, [r7, #8]
 8000f56:	8979      	ldrh	r1, [r7, #10]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4603      	mov	r3, r0
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f9be 	bl	80012e4 <I2C_RequestMemoryWrite>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d052      	beq.n	8001014 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e081      	b.n	8001076 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 fb1e 	bl	80015b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00d      	beq.n	8000f9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d107      	bne.n	8000f9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e06b      	b.n	8001076 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d11b      	bne.n	8001014 <HAL_I2C_Mem_Write+0x180>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d017      	beq.n	8001014 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b29a      	uxth	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100a:	b29b      	uxth	r3, r3
 800100c:	3b01      	subs	r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1aa      	bne.n	8000f72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 fb0a 	bl	800163a <I2C_WaitOnBTFFlagUntilTimeout>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00d      	beq.n	8001048 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2b04      	cmp	r3, #4
 8001032:	d107      	bne.n	8001044 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001042:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e016      	b.n	8001076 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2220      	movs	r2, #32
 800105c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	e000      	b.n	8001076 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001074:	2302      	movs	r3, #2
  }
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	00100002 	.word	0x00100002
 8001084:	ffff0000 	.word	0xffff0000

08001088 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af02      	add	r7, sp, #8
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	460b      	mov	r3, r1
 8001096:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff fad0 	bl	800063c <HAL_GetTick>
 800109c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b20      	cmp	r3, #32
 80010ac:	f040 8110 	bne.w	80012d0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2319      	movs	r3, #25
 80010b6:	2201      	movs	r2, #1
 80010b8:	4988      	ldr	r1, [pc, #544]	; (80012dc <HAL_I2C_IsDeviceReady+0x254>)
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f9a6 	bl	800140c <I2C_WaitOnFlagUntilTimeout>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80010c6:	2302      	movs	r3, #2
 80010c8:	e103      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_I2C_IsDeviceReady+0x50>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e0fc      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d007      	beq.n	80010fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2224      	movs	r2, #36	; 0x24
 8001112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a70      	ldr	r2, [pc, #448]	; (80012e0 <HAL_I2C_IsDeviceReady+0x258>)
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001130:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f964 	bl	800140c <I2C_WaitOnFlagUntilTimeout>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e0b6      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001164:	897b      	ldrh	r3, [r7, #10]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001172:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fa62 	bl	800063c <HAL_GetTick>
 8001178:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b02      	cmp	r3, #2
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011a8:	e025      	b.n	80011f6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011aa:	f7ff fa47 	bl	800063c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d302      	bcc.n	80011c0 <HAL_I2C_IsDeviceReady+0x138>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	22a0      	movs	r2, #160	; 0xa0
 80011c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2ba0      	cmp	r3, #160	; 0xa0
 8001200:	d005      	beq.n	800120e <HAL_I2C_IsDeviceReady+0x186>
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <HAL_I2C_IsDeviceReady+0x186>
 8001208:	7dbb      	ldrb	r3, [r7, #22]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0cd      	beq.n	80011aa <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2220      	movs	r2, #32
 8001212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b02      	cmp	r3, #2
 8001222:	d129      	bne.n	8001278 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001232:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2319      	movs	r3, #25
 8001250:	2201      	movs	r2, #1
 8001252:	4922      	ldr	r1, [pc, #136]	; (80012dc <HAL_I2C_IsDeviceReady+0x254>)
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f8d9 	bl	800140c <I2C_WaitOnFlagUntilTimeout>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e036      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2220      	movs	r2, #32
 8001268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	e02c      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001286:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001290:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2319      	movs	r3, #25
 8001298:	2201      	movs	r2, #1
 800129a:	4910      	ldr	r1, [pc, #64]	; (80012dc <HAL_I2C_IsDeviceReady+0x254>)
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f8b5 	bl	800140c <I2C_WaitOnFlagUntilTimeout>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e012      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	f4ff af33 	bcc.w	8001122 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2220      	movs	r2, #32
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80012d0:	2302      	movs	r3, #2
  }
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	00100002 	.word	0x00100002
 80012e0:	ffff0000 	.word	0xffff0000

080012e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	817b      	strh	r3, [r7, #10]
 80012f6:	460b      	mov	r3, r1
 80012f8:	813b      	strh	r3, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800130c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	2200      	movs	r2, #0
 8001316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f876 	bl	800140c <I2C_WaitOnFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00c      	beq.n	8001340 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e05f      	b.n	8001400 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800134e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	492c      	ldr	r1, [pc, #176]	; (8001408 <I2C_RequestMemoryWrite+0x124>)
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f8af 	bl	80014ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e04c      	b.n	8001400 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137e:	6a39      	ldr	r1, [r7, #32]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f919 	bl	80015b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00d      	beq.n	80013a8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2b04      	cmp	r3, #4
 8001392:	d107      	bne.n	80013a4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e02b      	b.n	8001400 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d105      	bne.n	80013ba <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013ae:	893b      	ldrh	r3, [r7, #8]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	e021      	b.n	80013fe <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80013ba:	893b      	ldrh	r3, [r7, #8]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	6a39      	ldr	r1, [r7, #32]
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f8f3 	bl	80015b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00d      	beq.n	80013f4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d107      	bne.n	80013f0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e005      	b.n	8001400 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013f4:	893b      	ldrh	r3, [r7, #8]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	00010002 	.word	0x00010002

0800140c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4613      	mov	r3, r2
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800141c:	e025      	b.n	800146a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d021      	beq.n	800146a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001426:	f7ff f909 	bl	800063c <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d302      	bcc.n	800143c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d116      	bne.n	800146a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f043 0220 	orr.w	r2, r3, #32
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e023      	b.n	80014b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	0c1b      	lsrs	r3, r3, #16
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d10d      	bne.n	8001490 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4013      	ands	r3, r2
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	e00c      	b.n	80014aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4013      	ands	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bf0c      	ite	eq
 80014a2:	2301      	moveq	r3, #1
 80014a4:	2300      	movne	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d0b6      	beq.n	800141e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014c8:	e051      	b.n	800156e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	d123      	bne.n	8001522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f043 0204 	orr.w	r2, r3, #4
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e046      	b.n	80015b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d021      	beq.n	800156e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152a:	f7ff f887 	bl	800063c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d302      	bcc.n	8001540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d116      	bne.n	800156e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2220      	movs	r2, #32
 800154a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f043 0220 	orr.w	r2, r3, #32
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e020      	b.n	80015b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10c      	bne.n	8001592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4013      	ands	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	e00b      	b.n	80015aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	43da      	mvns	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	4013      	ands	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d18d      	bne.n	80014ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c4:	e02d      	b.n	8001622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f878 	bl	80016bc <I2C_IsAcknowledgeFailed>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e02d      	b.n	8001632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d021      	beq.n	8001622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015de:	f7ff f82d 	bl	800063c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d302      	bcc.n	80015f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d116      	bne.n	8001622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f043 0220 	orr.w	r2, r3, #32
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e007      	b.n	8001632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162c:	2b80      	cmp	r3, #128	; 0x80
 800162e:	d1ca      	bne.n	80015c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001646:	e02d      	b.n	80016a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f837 	bl	80016bc <I2C_IsAcknowledgeFailed>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e02d      	b.n	80016b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165e:	d021      	beq.n	80016a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001660:	f7fe ffec 	bl	800063c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	429a      	cmp	r2, r3
 800166e:	d302      	bcc.n	8001676 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f043 0220 	orr.w	r2, r3, #32
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e007      	b.n	80016b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d1ca      	bne.n	8001648 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d11b      	bne.n	800170c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e25b      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d075      	beq.n	8001826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	4ba3      	ldr	r3, [pc, #652]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d00c      	beq.n	8001760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001746:	4ba0      	ldr	r3, [pc, #640]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174e:	2b08      	cmp	r3, #8
 8001750:	d112      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b9d      	ldr	r3, [pc, #628]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b99      	ldr	r3, [pc, #612]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d05b      	beq.n	8001824 <HAL_RCC_OscConfig+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d157      	bne.n	8001824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e236      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x74>
 8001782:	4b91      	ldr	r3, [pc, #580]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a90      	ldr	r2, [pc, #576]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a8a      	ldr	r2, [pc, #552]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a87      	ldr	r2, [pc, #540]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 80017b4:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a83      	ldr	r2, [pc, #524]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a80      	ldr	r2, [pc, #512]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7fe ff32 	bl	800063c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7fe ff2e 	bl	800063c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1fb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7fe ff1e 	bl	800063c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7fe ff1a 	bl	800063c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1e7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b6c      	ldr	r3, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0xe8>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183e:	4b62      	ldr	r3, [pc, #392]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1bb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4952      	ldr	r1, [pc, #328]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <HAL_RCC_OscConfig+0x2b0>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7fe fed3 	bl	800063c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189a:	f7fe fecf 	bl	800063c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e19c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4940      	ldr	r1, [pc, #256]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <HAL_RCC_OscConfig+0x2b0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7fe feb2 	bl	800063c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7fe feae 	bl	800063c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e17b      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d030      	beq.n	8001968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCC_OscConfig+0x2b4>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7fe fe92 	bl	800063c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191c:	f7fe fe8e 	bl	800063c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e15b      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x200>
 800193a:	e015      	b.n	8001968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x2b4>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7fe fe7b 	bl	800063c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194a:	f7fe fe77 	bl	800063c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e144      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800195e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a0 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_OscConfig+0x2b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d121      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_RCC_OscConfig+0x2b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_RCC_OscConfig+0x2b8>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7fe fe3d 	bl	800063c <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	e011      	b.n	80019ea <HAL_RCC_OscConfig+0x2ce>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
 80019d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7fe fe30 	bl	800063c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0fd      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x4d4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
 80019fe:	4b7d      	ldr	r3, [pc, #500]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a7c      	ldr	r2, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	e01c      	b.n	8001a46 <HAL_RCC_OscConfig+0x32a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x312>
 8001a14:	4b77      	ldr	r3, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	4a76      	ldr	r2, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a20:	4b74      	ldr	r3, [pc, #464]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x32a>
 8001a2e:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a70      	ldr	r2, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a6d      	ldr	r2, [pc, #436]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7fe fdf5 	bl	800063c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7fe fdf1 	bl	800063c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0bc      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RCC_OscConfig+0x33a>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fddf 	bl	800063c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7fe fddb 	bl	800063c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0a6      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aaa:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8092 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d05c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d141      	bne.n	8001b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7fe fdaf 	bl	800063c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7fe fdab 	bl	800063c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e078      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	019b      	lsls	r3, r3, #6
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	061b      	lsls	r3, r3, #24
 8001b24:	4933      	ldr	r1, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe fd84 	bl	800063c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe fd80 	bl	800063c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04d      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x41c>
 8001b56:	e045      	b.n	8001be4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x4dc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fd6d 	bl	800063c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fd69 	bl	800063c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e036      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x44a>
 8001b84:	e02e      	b.n	8001be4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e029      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_RCC_OscConfig+0x4d8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d115      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470060 	.word	0x42470060

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fca6 	bl	800063c <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe fca2 	bl	800063c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	fa21 f303 	lsr.w	r3, r1, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fc06 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08004048 	.word	0x08004048
 8001dc0:	20002834 	.word	0x20002834
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d007      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x32>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d008      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x38>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80b4 	bne.w	8001f5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001df6:	60bb      	str	r3, [r7, #8]
       break;
 8001df8:	e0b3      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001dfc:	60bb      	str	r3, [r7, #8]
      break;
 8001dfe:	e0b0      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d04a      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b55      	ldr	r3, [pc, #340]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	f04f 0400 	mov.w	r4, #0
 8001e20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	ea03 0501 	and.w	r5, r3, r1
 8001e2c:	ea04 0602 	and.w	r6, r4, r2
 8001e30:	4629      	mov	r1, r5
 8001e32:	4632      	mov	r2, r6
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	f04f 0400 	mov.w	r4, #0
 8001e3c:	0154      	lsls	r4, r2, #5
 8001e3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e42:	014b      	lsls	r3, r1, #5
 8001e44:	4619      	mov	r1, r3
 8001e46:	4622      	mov	r2, r4
 8001e48:	1b49      	subs	r1, r1, r5
 8001e4a:	eb62 0206 	sbc.w	r2, r2, r6
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	f04f 0400 	mov.w	r4, #0
 8001e56:	0194      	lsls	r4, r2, #6
 8001e58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e5c:	018b      	lsls	r3, r1, #6
 8001e5e:	1a5b      	subs	r3, r3, r1
 8001e60:	eb64 0402 	sbc.w	r4, r4, r2
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	00e2      	lsls	r2, r4, #3
 8001e6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e72:	00d9      	lsls	r1, r3, #3
 8001e74:	460b      	mov	r3, r1
 8001e76:	4614      	mov	r4, r2
 8001e78:	195b      	adds	r3, r3, r5
 8001e7a:	eb44 0406 	adc.w	r4, r4, r6
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	0262      	lsls	r2, r4, #9
 8001e88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e8c:	0259      	lsls	r1, r3, #9
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4614      	mov	r4, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	4621      	mov	r1, r4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f04f 0400 	mov.w	r4, #0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	f7fe f9e6 	bl	8000270 <__aeabi_uldivmod>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e049      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	ea03 0501 	and.w	r5, r3, r1
 8001ec2:	ea04 0602 	and.w	r6, r4, r2
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	4632      	mov	r2, r6
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0154      	lsls	r4, r2, #5
 8001ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed8:	014b      	lsls	r3, r1, #5
 8001eda:	4619      	mov	r1, r3
 8001edc:	4622      	mov	r2, r4
 8001ede:	1b49      	subs	r1, r1, r5
 8001ee0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	f04f 0400 	mov.w	r4, #0
 8001eec:	0194      	lsls	r4, r2, #6
 8001eee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ef2:	018b      	lsls	r3, r1, #6
 8001ef4:	1a5b      	subs	r3, r3, r1
 8001ef6:	eb64 0402 	sbc.w	r4, r4, r2
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	00e2      	lsls	r2, r4, #3
 8001f04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f08:	00d9      	lsls	r1, r3, #3
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	195b      	adds	r3, r3, r5
 8001f10:	eb44 0406 	adc.w	r4, r4, r6
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	02a2      	lsls	r2, r4, #10
 8001f1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f22:	0299      	lsls	r1, r3, #10
 8001f24:	460b      	mov	r3, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f04f 0400 	mov.w	r4, #0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4623      	mov	r3, r4
 8001f36:	f7fe f99b 	bl	8000270 <__aeabi_uldivmod>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f5e:	60bb      	str	r3, [r7, #8]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	68bb      	ldr	r3, [r7, #8]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20002834 	.word	0x20002834

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a9b      	lsrs	r3, r3, #10
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08004058 	.word	0x08004058

08001fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e01d      	b.n	8002006 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f001 f90c 	bl	80031fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	f000 f9fa 	bl	80023f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b02      	cmp	r3, #2
 8002022:	d122      	bne.n	800206a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d11b      	bne.n	800206a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0202 	mvn.w	r2, #2
 800203a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f9af 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 8002056:	e005      	b.n	8002064 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f9a1 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f9b2 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d122      	bne.n	80020be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d11b      	bne.n	80020be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0204 	mvn.w	r2, #4
 800208e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f985 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 80020aa:	e005      	b.n	80020b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f977 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f988 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d122      	bne.n	8002112 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11b      	bne.n	8002112 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f06f 0208 	mvn.w	r2, #8
 80020e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2204      	movs	r2, #4
 80020e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f95b 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 80020fe:	e005      	b.n	800210c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f94d 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f95e 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b10      	cmp	r3, #16
 800211e:	d122      	bne.n	8002166 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b10      	cmp	r3, #16
 800212c:	d11b      	bne.n	8002166 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f06f 0210 	mvn.w	r2, #16
 8002136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2208      	movs	r2, #8
 800213c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f931 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 8002152:	e005      	b.n	8002160 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f923 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f934 	bl	80023c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10e      	bne.n	8002192 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0201 	mvn.w	r2, #1
 800218a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8fd 	bl	800238c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d10e      	bne.n	80021be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b80      	cmp	r3, #128	; 0x80
 80021ac:	d107      	bne.n	80021be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fad9 	bl	8002770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d10e      	bne.n	80021ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d107      	bne.n	80021ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8f9 	bl	80023dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d10e      	bne.n	8002216 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b20      	cmp	r3, #32
 8002204:	d107      	bne.n	8002216 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f06f 0220 	mvn.w	r2, #32
 800220e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 faa3 	bl	800275c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_TIM_ConfigClockSource+0x18>
 8002232:	2302      	movs	r3, #2
 8002234:	e0a6      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x166>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002254:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d067      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x120>
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d80b      	bhi.n	800228a <HAL_TIM_ConfigClockSource+0x6c>
 8002272:	2b10      	cmp	r3, #16
 8002274:	d073      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
 8002276:	2b10      	cmp	r3, #16
 8002278:	d802      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x62>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06f      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800227e:	e078      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002280:	2b20      	cmp	r3, #32
 8002282:	d06c      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
 8002284:	2b30      	cmp	r3, #48	; 0x30
 8002286:	d06a      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002288:	e073      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800228a:	2b70      	cmp	r3, #112	; 0x70
 800228c:	d00d      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x8c>
 800228e:	2b70      	cmp	r3, #112	; 0x70
 8002290:	d804      	bhi.n	800229c <HAL_TIM_ConfigClockSource+0x7e>
 8002292:	2b50      	cmp	r3, #80	; 0x50
 8002294:	d033      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xe0>
 8002296:	2b60      	cmp	r3, #96	; 0x60
 8002298:	d041      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800229a:	e06a      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a0:	d066      	beq.n	8002370 <HAL_TIM_ConfigClockSource+0x152>
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a6:	d017      	beq.n	80022d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80022a8:	e063      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f000 f9b3 	bl	8002624 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
      break;
 80022d6:	e04c      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f000 f99c 	bl	8002624 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022fa:	609a      	str	r2, [r3, #8]
      break;
 80022fc:	e039      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	f000 f910 	bl	8002530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2150      	movs	r1, #80	; 0x50
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f969 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800231c:	e029      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	f000 f92f 	bl	800258e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2160      	movs	r1, #96	; 0x60
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f959 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800233c:	e019      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	461a      	mov	r2, r3
 800234c:	f000 f8f0 	bl	8002530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f949 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800235c:	e009      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f000 f940 	bl	80025ee <TIM_ITRx_SetConfig>
      break;
 800236e:	e000      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002370:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a40      	ldr	r2, [pc, #256]	; (8002504 <TIM_Base_SetConfig+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d00f      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <TIM_Base_SetConfig+0x118>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00b      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3c      	ldr	r2, [pc, #240]	; (800250c <TIM_Base_SetConfig+0x11c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <TIM_Base_SetConfig+0x120>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <TIM_Base_SetConfig+0x124>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d108      	bne.n	8002442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <TIM_Base_SetConfig+0x114>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d027      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <TIM_Base_SetConfig+0x118>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d023      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a2b      	ldr	r2, [pc, #172]	; (800250c <TIM_Base_SetConfig+0x11c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <TIM_Base_SetConfig+0x120>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a29      	ldr	r2, [pc, #164]	; (8002514 <TIM_Base_SetConfig+0x124>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d017      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a28      	ldr	r2, [pc, #160]	; (8002518 <TIM_Base_SetConfig+0x128>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <TIM_Base_SetConfig+0x12c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00f      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <TIM_Base_SetConfig+0x130>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a25      	ldr	r2, [pc, #148]	; (8002524 <TIM_Base_SetConfig+0x134>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a24      	ldr	r2, [pc, #144]	; (8002528 <TIM_Base_SetConfig+0x138>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a23      	ldr	r2, [pc, #140]	; (800252c <TIM_Base_SetConfig+0x13c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d108      	bne.n	80024b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <TIM_Base_SetConfig+0x114>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0xf8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <TIM_Base_SetConfig+0x124>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d103      	bne.n	80024f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	615a      	str	r2, [r3, #20]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800
 8002510:	40000c00 	.word	0x40000c00
 8002514:	40010400 	.word	0x40010400
 8002518:	40014000 	.word	0x40014000
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800
 8002524:	40001800 	.word	0x40001800
 8002528:	40001c00 	.word	0x40001c00
 800252c:	40002000 	.word	0x40002000

08002530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f023 0201 	bic.w	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800255a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f023 030a 	bic.w	r3, r3, #10
 800256c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0210 	bic.w	r2, r3, #16
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	031b      	lsls	r3, r3, #12
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	f043 0307 	orr.w	r3, r3, #7
 8002610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800263e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	021a      	lsls	r2, r3, #8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	431a      	orrs	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e05a      	b.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d01d      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40010000 	.word	0x40010000
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40000c00 	.word	0x40000c00
 8002750:	40010400 	.word	0x40010400
 8002754:	40014000 	.word	0x40014000
 8002758:	40001800 	.word	0x40001800

0800275c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <delay>:


static uint8_t ScreenBuffer[SSD1306_Width * SSD1306_Height / 8];

void delay()
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
    uint16_t counter=0;
 800278a:	2300      	movs	r3, #0
 800278c:	80fb      	strh	r3, [r7, #6]
    while(counter++ < 4000);
 800278e:	bf00      	nop
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	80fa      	strh	r2, [r7, #6]
 8002796:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800279a:	d3f9      	bcc.n	8002790 <delay+0xc>

}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <scrollActivate>:
{
     HAL_I2C_Mem_Write(&hi2c2, SSD1306Address, registerAddress, 1, &sendData, dataLength, 100);
}

void scrollActivate(uint8_t select)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
    if(select == 1)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d104      	bne.n	80027c2 <scrollActivate+0x1a>
    	SSD1306_SendCommand(scrollActive,1);
 80027b8:	2101      	movs	r1, #1
 80027ba:	202f      	movs	r0, #47	; 0x2f
 80027bc:	f000 fad8 	bl	8002d70 <SSD1306_SendCommand>
    else
    	SSD1306_SendCommand(scrollDeactive,1);
}
 80027c0:	e003      	b.n	80027ca <scrollActivate+0x22>
    	SSD1306_SendCommand(scrollDeactive,1);
 80027c2:	2101      	movs	r1, #1
 80027c4:	202e      	movs	r0, #46	; 0x2e
 80027c6:	f000 fad3 	bl	8002d70 <SSD1306_SendCommand>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <scrollActiveVerticalHorizantal>:
	 */

}

void scrollActiveVerticalHorizantal(uint8_t startPage, uint8_t stopPage,uint8_t timeInterval)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
 80027dc:	460b      	mov	r3, r1
 80027de:	71bb      	strb	r3, [r7, #6]
 80027e0:	4613      	mov	r3, r2
 80027e2:	717b      	strb	r3, [r7, #5]
    SSD1306_SendCommand(0x00,1);
 80027e4:	2101      	movs	r1, #1
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 fac2 	bl	8002d70 <SSD1306_SendCommand>
    SSD1306_SendCommand(startPage,1);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fabd 	bl	8002d70 <SSD1306_SendCommand>
    SSD1306_SendCommand(timeInterval,1); //0 – 5 frames    4 – 3 frames   1 – 64 frames    5 – 4 frames
 80027f6:	797b      	ldrb	r3, [r7, #5]
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fab8 	bl	8002d70 <SSD1306_SendCommand>
    								     //2 – 128 frames  6 – 25 frame   3 – 256 frames   7 – 2 frames
    SSD1306_SendCommand(stopPage,1);
 8002800:	79bb      	ldrb	r3, [r7, #6]
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fab3 	bl	8002d70 <SSD1306_SendCommand>
    SSD1306_SendCommand(0x25,1);         //Scrolling Offset Value (0-63)
 800280a:	2101      	movs	r1, #1
 800280c:	2025      	movs	r0, #37	; 0x25
 800280e:	f000 faaf 	bl	8002d70 <SSD1306_SendCommand>

}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <verticalScrollRight>:

uint8_t verticalScrollRight(uint8_t startPage,uint8_t stopPage,uint8_t timeInterval)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	460b      	mov	r3, r1
 8002826:	71bb      	strb	r3, [r7, #6]
 8002828:	4613      	mov	r3, r2
 800282a:	717b      	strb	r3, [r7, #5]
	if(startPage>7 || stopPage>7 || timeInterval>7 )
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2b07      	cmp	r3, #7
 8002830:	d805      	bhi.n	800283e <verticalScrollRight+0x24>
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	2b07      	cmp	r3, #7
 8002836:	d802      	bhi.n	800283e <verticalScrollRight+0x24>
 8002838:	797b      	ldrb	r3, [r7, #5]
 800283a:	2b07      	cmp	r3, #7
 800283c:	d901      	bls.n	8002842 <verticalScrollRight+0x28>
		return 0;
 800283e:	2300      	movs	r3, #0
 8002840:	e00d      	b.n	800285e <verticalScrollRight+0x44>

	SSD1306_SendCommand(verticalRight,1);
 8002842:	2101      	movs	r1, #1
 8002844:	2029      	movs	r0, #41	; 0x29
 8002846:	f000 fa93 	bl	8002d70 <SSD1306_SendCommand>
	scrollActiveVerticalHorizantal(startPage,stopPage,timeInterval);
 800284a:	797a      	ldrb	r2, [r7, #5]
 800284c:	79b9      	ldrb	r1, [r7, #6]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ffbe 	bl	80027d2 <scrollActiveVerticalHorizantal>
	scrollActivate(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff ffa6 	bl	80027a8 <scrollActivate>
	return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <SSD_Init>:
	return 1;
}


uint8_t SSD_Init()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306Address, 1, 20000) != HAL_OK)
 800286c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002870:	2201      	movs	r2, #1
 8002872:	2178      	movs	r1, #120	; 0x78
 8002874:	4850      	ldr	r0, [pc, #320]	; (80029b8 <SSD_Init+0x150>)
 8002876:	f7fe fc07 	bl	8001088 <HAL_I2C_IsDeviceReady>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <SSD_Init+0x1c>
       return 0;
 8002880:	2300      	movs	r3, #0
 8002882:	e097      	b.n	80029b4 <SSD_Init+0x14c>
	delay();
 8002884:	f7ff ff7e 	bl	8002784 <delay>
	HAL_Delay(100);
 8002888:	2064      	movs	r0, #100	; 0x64
 800288a:	f7fd fee3 	bl	8000654 <HAL_Delay>
	SSD1306_SendCommand(displayOff, 1);
 800288e:	2101      	movs	r1, #1
 8002890:	20ae      	movs	r0, #174	; 0xae
 8002892:	f000 fa6d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(setAddresingMode, 1);
 8002896:	2101      	movs	r1, #1
 8002898:	2020      	movs	r0, #32
 800289a:	f000 fa69 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x10, 1);             // A[7:0]  ******A1A2   00:Horizontal 01:Verticilar 10:Page 11:Invalid
 800289e:	2101      	movs	r1, #1
 80028a0:	2010      	movs	r0, #16
 80028a2:	f000 fa65 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(pageStartAddr,1);
 80028a6:	2101      	movs	r1, #1
 80028a8:	20b0      	movs	r0, #176	; 0xb0
 80028aa:	f000 fa61 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xC8,1);
 80028ae:	2101      	movs	r1, #1
 80028b0:	20c8      	movs	r0, #200	; 0xc8
 80028b2:	f000 fa5d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x00,1);              // Start address This value can be 0x00-0x0F
 80028b6:	2101      	movs	r1, #1
 80028b8:	2000      	movs	r0, #0
 80028ba:	f000 fa59 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x10,1);              // This value can be 0x10-0x1F
 80028be:	2101      	movs	r1, #1
 80028c0:	2010      	movs	r0, #16
 80028c2:	f000 fa55 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x40,1);              // Display start line. This value can be 0x40-0x7F
 80028c6:	2101      	movs	r1, #1
 80028c8:	2040      	movs	r0, #64	; 0x40
 80028ca:	f000 fa51 	bl	8002d70 <SSD1306_SendCommand>

	SSD1306_SendCommand(0x81,1);              // Contrast control register
 80028ce:	2101      	movs	r1, #1
 80028d0:	2081      	movs	r0, #129	; 0x81
 80028d2:	f000 fa4d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xFF,1);              // Contrast value
 80028d6:	2101      	movs	r1, #1
 80028d8:	20ff      	movs	r0, #255	; 0xff
 80028da:	f000 fa49 	bl	8002d70 <SSD1306_SendCommand>

	SSD1306_SendCommand(0xA1,1);              //Set Segment Re-map (A0h/A1h)
 80028de:	2101      	movs	r1, #1
 80028e0:	20a1      	movs	r0, #161	; 0xa1
 80028e2:	f000 fa45 	bl	8002d70 <SSD1306_SendCommand>

	SSD1306_SendCommand(0xA6,1);              // Normal Display
 80028e6:	2101      	movs	r1, #1
 80028e8:	20a6      	movs	r0, #166	; 0xa6
 80028ea:	f000 fa41 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xA8,1);              // Set multiplex ratio(1 to 64)
 80028ee:	2101      	movs	r1, #1
 80028f0:	20a8      	movs	r0, #168	; 0xa8
 80028f2:	f000 fa3d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x3F,1);              // Decimal:64
 80028f6:	2101      	movs	r1, #1
 80028f8:	203f      	movs	r0, #63	; 0x3f
 80028fa:	f000 fa39 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(entireDisplayOn_1,1); // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80028fe:	2101      	movs	r1, #1
 8002900:	20a4      	movs	r0, #164	; 0xa4
 8002902:	f000 fa35 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xD3,1);              // Display offset
 8002906:	2101      	movs	r1, #1
 8002908:	20d3      	movs	r0, #211	; 0xd3
 800290a:	f000 fa31 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x00,1);              //-not offset
 800290e:	2101      	movs	r1, #1
 8002910:	2000      	movs	r0, #0
 8002912:	f000 fa2d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xD5,1);              // Display clock divide ratio/oscillator frequency
 8002916:	2101      	movs	r1, #1
 8002918:	20d5      	movs	r0, #213	; 0xd5
 800291a:	f000 fa29 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xF0,1);              // Set divide ratio
 800291e:	2101      	movs	r1, #1
 8002920:	20f0      	movs	r0, #240	; 0xf0
 8002922:	f000 fa25 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xD9,1);              // Set pre-charge period
 8002926:	2101      	movs	r1, #1
 8002928:	20d9      	movs	r0, #217	; 0xd9
 800292a:	f000 fa21 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x22,1);
 800292e:	2101      	movs	r1, #1
 8002930:	2022      	movs	r0, #34	; 0x22
 8002932:	f000 fa1d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xDA,1);              // Com pins hardware configuration
 8002936:	2101      	movs	r1, #1
 8002938:	20da      	movs	r0, #218	; 0xda
 800293a:	f000 fa19 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x12,1);
 800293e:	2101      	movs	r1, #1
 8002940:	2012      	movs	r0, #18
 8002942:	f000 fa15 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0xDB,1);
 8002946:	2101      	movs	r1, #1
 8002948:	20db      	movs	r0, #219	; 0xdb
 800294a:	f000 fa11 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x20,1);
 800294e:	2101      	movs	r1, #1
 8002950:	2020      	movs	r0, #32
 8002952:	f000 fa0d 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x8D,1);
 8002956:	2101      	movs	r1, #1
 8002958:	208d      	movs	r0, #141	; 0x8d
 800295a:	f000 fa09 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(0x14,1);
 800295e:	2101      	movs	r1, #1
 8002960:	2014      	movs	r0, #20
 8002962:	f000 fa05 	bl	8002d70 <SSD1306_SendCommand>
	SSD1306_SendCommand(displayOn,1);
 8002966:	2101      	movs	r1, #1
 8002968:	20af      	movs	r0, #175	; 0xaf
 800296a:	f000 fa01 	bl	8002d70 <SSD1306_SendCommand>

	SSD1306_SendCommand(scrollDeactive,1);
 800296e:	2101      	movs	r1, #1
 8002970:	202e      	movs	r0, #46	; 0x2e
 8002972:	f000 f9fd 	bl	8002d70 <SSD1306_SendCommand>

    screenState.height=SSD1306_Height;
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <SSD_Init+0x154>)
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	801a      	strh	r2, [r3, #0]
    screenState.width =SSD1306_Width;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <SSD_Init+0x154>)
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	805a      	strh	r2, [r3, #2]
    screenState.init  =true;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <SSD_Init+0x154>)
 8002984:	2201      	movs	r2, #1
 8002986:	719a      	strb	r2, [r3, #6]
    screenState.font  =Font_7x10;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <SSD_Init+0x154>)
 800298a:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <SSD_Init+0x158>)
 800298c:	3308      	adds	r3, #8
 800298e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002992:	e883 0003 	stmia.w	r3, {r0, r1}
    screenState.arraySize= SSD1306_Width*SSD1306_Height/8;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <SSD_Init+0x154>)
 8002998:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800299c:	809a      	strh	r2, [r3, #4]

    setWriteColor(BLACK);
 800299e:	2000      	movs	r0, #0
 80029a0:	f000 f812 	bl	80029c8 <setWriteColor>
    screenClear();
 80029a4:	f000 f85e 	bl	8002a64 <screenClear>
    positions.xPosition=0;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <SSD_Init+0x15c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
    positions.yPosition=0;
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <SSD_Init+0x15c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	805a      	strh	r2, [r3, #2]


}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20002ce0 	.word	0x20002ce0
 80029bc:	20002ccc 	.word	0x20002ccc
 80029c0:	2000281c 	.word	0x2000281c
 80029c4:	20002cdc 	.word	0x20002cdc

080029c8 <setWriteColor>:

void setWriteColor(SSD_Color colorType)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	screenColor=colorType;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <setWriteColor+0x1c>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	7013      	strb	r3, [r2, #0]
	screenClear();
 80029d8:	f000 f844 	bl	8002a64 <screenClear>

}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200028b8 	.word	0x200028b8

080029e8 <screenFill>:
void screenFill()
{	uint8_t m;
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af04      	add	r7, sp, #16
    uint8_t regAddr=0xB0;
 80029ee:	23b0      	movs	r3, #176	; 0xb0
 80029f0:	71bb      	strb	r3, [r7, #6]
    uint8_t addr;
	for (m = 0; m < 8; m++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	e027      	b.n	8002a48 <screenFill+0x60>
	{
		addr=regAddr+m;
 80029f8:	79ba      	ldrb	r2, [r7, #6]
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	4413      	add	r3, r2
 80029fe:	717b      	strb	r3, [r7, #5]
		SSD1306_SendCommand(addr ,1);
 8002a00:	797b      	ldrb	r3, [r7, #5]
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f9b3 	bl	8002d70 <SSD1306_SendCommand>
		SSD1306_SendCommand(0x00 ,1);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f000 f9af 	bl	8002d70 <SSD1306_SendCommand>
		SSD1306_SendCommand(0x10 ,1);
 8002a12:	2101      	movs	r1, #1
 8002a14:	2010      	movs	r0, #16
 8002a16:	f000 f9ab 	bl	8002d70 <SSD1306_SendCommand>


		HAL_I2C_Mem_Write(&hi2c2, SSD1306Address, 0x40, 1, &ScreenBuffer[screenState.width*m], screenState.width, 100);
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <screenFill+0x70>)
 8002a1c:	885b      	ldrh	r3, [r3, #2]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	fb03 f302 	mul.w	r3, r3, r2
 8002a26:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <screenFill+0x74>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <screenFill+0x70>)
 8002a2c:	8852      	ldrh	r2, [r2, #2]
 8002a2e:	2164      	movs	r1, #100	; 0x64
 8002a30:	9102      	str	r1, [sp, #8]
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	2178      	movs	r1, #120	; 0x78
 8002a3c:	4808      	ldr	r0, [pc, #32]	; (8002a60 <screenFill+0x78>)
 8002a3e:	f7fe fa29 	bl	8000e94 <HAL_I2C_Mem_Write>
	for (m = 0; m < 8; m++)
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	3301      	adds	r3, #1
 8002a46:	71fb      	strb	r3, [r7, #7]
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d9d4      	bls.n	80029f8 <screenFill+0x10>
    }

}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20002ccc 	.word	0x20002ccc
 8002a5c:	200028bc 	.word	0x200028bc
 8002a60:	20002ce0 	.word	0x20002ce0

08002a64 <screenClear>:
void screenClear()
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
    if(screenColor == BLACK)
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <screenClear+0x34>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <screenClear+0x1c>
    	memset(ScreenBuffer,0xFF,screenState.arraySize);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <screenClear+0x38>)
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	461a      	mov	r2, r3
 8002a76:	21ff      	movs	r1, #255	; 0xff
 8002a78:	4809      	ldr	r0, [pc, #36]	; (8002aa0 <screenClear+0x3c>)
 8002a7a:	f000 fcb3 	bl	80033e4 <memset>
 8002a7e:	e006      	b.n	8002a8e <screenClear+0x2a>
    else
    	memset(ScreenBuffer,0x00,screenState.arraySize);
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <screenClear+0x38>)
 8002a82:	889b      	ldrh	r3, [r3, #4]
 8002a84:	461a      	mov	r2, r3
 8002a86:	2100      	movs	r1, #0
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <screenClear+0x3c>)
 8002a8a:	f000 fcab 	bl	80033e4 <memset>

    screenFill();
 8002a8e:	f7ff ffab 	bl	80029e8 <screenFill>

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200028b8 	.word	0x200028b8
 8002a9c:	20002ccc 	.word	0x20002ccc
 8002aa0:	200028bc 	.word	0x200028bc

08002aa4 <drawPixel>:

void drawPixel(uint16_t xPos,uint16_t yPos,SSD_Color color)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	80bb      	strh	r3, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	70fb      	strb	r3, [r7, #3]

    if (color == WHITE)
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d11a      	bne.n	8002af2 <drawPixel+0x4e>
    {
        ScreenBuffer[xPos + (yPos / 8) * SSD1306_Width] |= 1 << (yPos % 8);
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	88bb      	ldrh	r3, [r7, #4]
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	01db      	lsls	r3, r3, #7
 8002ac8:	4413      	add	r3, r2
 8002aca:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <drawPixel+0x94>)
 8002acc:	5cd3      	ldrb	r3, [r2, r3]
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	88bb      	ldrh	r3, [r7, #4]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	b259      	sxtb	r1, r3
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	01db      	lsls	r3, r3, #7
 8002ae8:	4413      	add	r3, r2
 8002aea:	b2c9      	uxtb	r1, r1
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <drawPixel+0x94>)
 8002aee:	54d1      	strb	r1, [r2, r3]
    {
    	ScreenBuffer[xPos + (yPos / 8) * SSD1306_Width] &= ~(1 << (yPos % 8));
    }


}
 8002af0:	e01b      	b.n	8002b2a <drawPixel+0x86>
    	ScreenBuffer[xPos + (yPos / 8) * SSD1306_Width] &= ~(1 << (yPos % 8));
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	88bb      	ldrh	r3, [r7, #4]
 8002af6:	08db      	lsrs	r3, r3, #3
 8002af8:	b298      	uxth	r0, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	01db      	lsls	r3, r3, #7
 8002afe:	4413      	add	r3, r2
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <drawPixel+0x94>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	b25a      	sxtb	r2, r3
 8002b06:	88bb      	ldrh	r3, [r7, #4]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b259      	sxtb	r1, r3
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	4603      	mov	r3, r0
 8002b20:	01db      	lsls	r3, r3, #7
 8002b22:	4413      	add	r3, r2
 8002b24:	b2c9      	uxtb	r1, r1
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <drawPixel+0x94>)
 8002b28:	54d1      	strb	r1, [r2, r3]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	200028bc 	.word	0x200028bc

08002b3c <charWrite>:

uint8_t charWrite(char ch,SSD_Color screenCol)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	460a      	mov	r2, r1
 8002b46:	71fb      	strb	r3, [r7, #7]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71bb      	strb	r3, [r7, #6]
     if(SSD1306_Width< positions.xPosition || SSD1306_Height < positions.yPosition)  //Edge control
 8002b4c:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <charWrite+0xec>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d803      	bhi.n	8002b5c <charWrite+0x20>
 8002b54:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <charWrite+0xec>)
 8002b56:	885b      	ldrh	r3, [r3, #2]
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d901      	bls.n	8002b60 <charWrite+0x24>
    	 return 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e05f      	b.n	8002c20 <charWrite+0xe4>

     uint16_t character;
     for(int i=0;i<screenState.font.Height;i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e04c      	b.n	8002c00 <charWrite+0xc4>
     {
    	 character=screenState.font.FontS[ ((uint8_t)ch-32)*screenState.font.Height+i ];
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <charWrite+0xf0>)
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	3b20      	subs	r3, #32
 8002b6e:	492f      	ldr	r1, [pc, #188]	; (8002c2c <charWrite+0xf0>)
 8002b70:	7a49      	ldrb	r1, [r1, #9]
 8002b72:	fb01 f103 	mul.w	r1, r1, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	440b      	add	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	81fb      	strh	r3, [r7, #14]
    	 for(int j=0;j<screenState.font.Width;j++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e032      	b.n	8002bee <charWrite+0xb2>
    	 {
               if( (character<<j) & 0x8000 )
 8002b88:	89fa      	ldrh	r2, [r7, #14]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d011      	beq.n	8002bbc <charWrite+0x80>
            	   drawPixel(positions.xPosition+j,positions.yPosition+i,(SSD_Color)screenColor);
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <charWrite+0xec>)
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b298      	uxth	r0, r3
 8002ba4:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <charWrite+0xec>)
 8002ba6:	885a      	ldrh	r2, [r3, #2]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	b299      	uxth	r1, r3
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <charWrite+0xf4>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f7ff ff75 	bl	8002aa4 <drawPixel>
 8002bba:	e015      	b.n	8002be8 <charWrite+0xac>
               else
            	   drawPixel(positions.xPosition+j,positions.yPosition+i,(SSD_Color)!screenColor);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <charWrite+0xec>)
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b298      	uxth	r0, r3
 8002bc8:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <charWrite+0xec>)
 8002bca:	885a      	ldrh	r2, [r3, #2]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <charWrite+0xf4>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff ff5e 	bl	8002aa4 <drawPixel>
    	 for(int j=0;j<screenState.font.Width;j++)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3301      	adds	r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <charWrite+0xf0>)
 8002bf0:	7a1b      	ldrb	r3, [r3, #8]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	dbc6      	blt.n	8002b88 <charWrite+0x4c>
     for(int i=0;i<screenState.font.Height;i++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <charWrite+0xf0>)
 8002c02:	7a5b      	ldrb	r3, [r3, #9]
 8002c04:	461a      	mov	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	dbac      	blt.n	8002b66 <charWrite+0x2a>

    	 }

     }

     positions.xPosition += screenState.font.Width;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <charWrite+0xec>)
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <charWrite+0xf0>)
 8002c12:	7a1b      	ldrb	r3, [r3, #8]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <charWrite+0xec>)
 8002c1c:	801a      	strh	r2, [r3, #0]

     return 1;
 8002c1e:	2301      	movs	r3, #1

}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20002cdc 	.word	0x20002cdc
 8002c2c:	20002ccc 	.word	0x20002ccc
 8002c30:	200028b8 	.word	0x200028b8

08002c34 <writeScreen>:

void writeScreen(char *message,FontSpecification fontType,uint16_t xStart,uint16_t yStart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	1d38      	adds	r0, r7, #4
 8002c3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002c42:	807b      	strh	r3, [r7, #2]
	positions.xPosition=xStart;
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <writeScreen+0x58>)
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	8013      	strh	r3, [r2, #0]
	positions.yPosition=yStart;
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <writeScreen+0x58>)
 8002c4c:	8b3b      	ldrh	r3, [r7, #24]
 8002c4e:	8053      	strh	r3, [r2, #2]
	screenState.font=fontType;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <writeScreen+0x5c>)
 8002c52:	3308      	adds	r3, #8
 8002c54:	1d3a      	adds	r2, r7, #4
 8002c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c5a:	e883 0003 	stmia.w	r3, {r0, r1}
	while(*message)
 8002c5e:	e00a      	b.n	8002c76 <writeScreen+0x42>
	{
		charWrite(*message,screenColor);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <writeScreen+0x60>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7ff ff66 	bl	8002b3c <charWrite>
		*message++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
	while(*message)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <writeScreen+0x2c>

	}

	screenFill();
 8002c7e:	f7ff feb3 	bl	80029e8 <screenFill>


}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20002cdc 	.word	0x20002cdc
 8002c90:	20002ccc 	.word	0x20002ccc
 8002c94:	200028b8 	.word	0x200028b8

08002c98 <DrawBitmap>:




void DrawBitmap(int16_t xStart, int16_t yStart, const unsigned char* bitmap, int16_t w, int16_t h)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60ba      	str	r2, [r7, #8]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	81fb      	strh	r3, [r7, #14]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	81bb      	strh	r3, [r7, #12]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8;
 8002cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb2:	3307      	adds	r3, #7
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	da00      	bge.n	8002cba <DrawBitmap+0x22>
 8002cb8:	3307      	adds	r3, #7
 8002cba:	10db      	asrs	r3, r3, #3
 8002cbc:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, yStart++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	82bb      	strh	r3, [r7, #20]
 8002cc6:	e044      	b.n	8002d52 <DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	827b      	strh	r3, [r7, #18]
 8002ccc:	e02f      	b.n	8002d2e <DrawBitmap+0x96>
        {
            if(i & 7)
 8002cce:	8a7b      	ldrh	r3, [r7, #18]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <DrawBitmap+0x48>
            {
               byte <<= 1;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
 8002cde:	e012      	b.n	8002d06 <DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002ce0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ce4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ce8:	fb02 f203 	mul.w	r2, r2, r3
 8002cec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da00      	bge.n	8002cf6 <DrawBitmap+0x5e>
 8002cf4:	3307      	adds	r3, #7
 8002cf6:	10db      	asrs	r3, r3, #3
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) drawPixel(xStart+i,yStart,screenColor);
 8002d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da09      	bge.n	8002d22 <DrawBitmap+0x8a>
 8002d0e:	89fa      	ldrh	r2, [r7, #14]
 8002d10:	8a7b      	ldrh	r3, [r7, #18]
 8002d12:	4413      	add	r3, r2
 8002d14:	b298      	uxth	r0, r3
 8002d16:	89b9      	ldrh	r1, [r7, #12]
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <DrawBitmap+0xd4>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f7ff fec1 	bl	8002aa4 <drawPixel>
        for(int16_t i=0; i<w; i++)
 8002d22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	827b      	strh	r3, [r7, #18]
 8002d2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	dbc9      	blt.n	8002cce <DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, yStart++)
 8002d3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	82bb      	strh	r3, [r7, #20]
 8002d46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	81bb      	strh	r3, [r7, #12]
 8002d52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dbb4      	blt.n	8002cc8 <DrawBitmap+0x30>
        }
    }
    screenFill();
 8002d5e:	f7ff fe43 	bl	80029e8 <screenFill>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200028b8 	.word	0x200028b8

08002d70 <SSD1306_SendCommand>:




void SSD1306_SendCommand(uint8_t value, uint16_t length)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	4603      	mov	r3, r0
 8002d78:	460a      	mov	r2, r1
 8002d7a:	71fb      	strb	r3, [r7, #7]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, SSD1306Address, 0x00, 1, &value, length, 100);
 8002d80:	2364      	movs	r3, #100	; 0x64
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	88bb      	ldrh	r3, [r7, #4]
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2178      	movs	r1, #120	; 0x78
 8002d92:	4803      	ldr	r0, [pc, #12]	; (8002da0 <SSD1306_SendCommand+0x30>)
 8002d94:	f7fe f87e 	bl	8000e94 <HAL_I2C_Mem_Write>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20002ce0 	.word	0x20002ce0

08002da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002daa:	f7fd fbe1 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dae:	f000 f879 	bl	8002ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002db2:	f000 f959 	bl	8003068 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002db6:	f000 f8dd 	bl	8002f74 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002dba:	f000 f909 	bl	8002fd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SSD_Init();
 8002dbe:	f7ff fd53 	bl	8002868 <SSD_Init>

  writeScreen("SSD1306", Font_7x10,0,0);
 8002dc2:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <main+0xd8>)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	ca06      	ldmia	r2, {r1, r2}
 8002dcc:	482c      	ldr	r0, [pc, #176]	; (8002e80 <main+0xdc>)
 8002dce:	f7ff ff31 	bl	8002c34 <writeScreen>
  HAL_Delay(1000);
 8002dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd6:	f7fd fc3d 	bl	8000654 <HAL_Delay>
  writeScreen("Screen", Font_11x18,0,10);
 8002dda:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <main+0xe0>)
 8002ddc:	230a      	movs	r3, #10
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	ca06      	ldmia	r2, {r1, r2}
 8002de4:	4828      	ldr	r0, [pc, #160]	; (8002e88 <main+0xe4>)
 8002de6:	f7ff ff25 	bl	8002c34 <writeScreen>
  HAL_Delay(1000);
 8002dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dee:	f7fd fc31 	bl	8000654 <HAL_Delay>
  writeScreen("Examp.", Font_16x26,0,28);
 8002df2:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <main+0xe8>)
 8002df4:	231c      	movs	r3, #28
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	ca06      	ldmia	r2, {r1, r2}
 8002dfc:	4824      	ldr	r0, [pc, #144]	; (8002e90 <main+0xec>)
 8002dfe:	f7ff ff19 	bl	8002c34 <writeScreen>
  HAL_Delay(1000);
 8002e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e06:	f7fd fc25 	bl	8000654 <HAL_Delay>
  screenClear();
 8002e0a:	f7ff fe2b 	bl	8002a64 <screenClear>
  DrawBitmap(0, 0, (unsigned char*)portre, 128, 64);
 8002e0e:	2340      	movs	r3, #64	; 0x40
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <main+0xf0>)
 8002e16:	2100      	movs	r1, #0
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff ff3d 	bl	8002c98 <DrawBitmap>
  verticalScrollRight(0,7,1);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2107      	movs	r1, #7
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff fcf9 	bl	800281a <verticalScrollRight>
  HAL_Delay(5000);
 8002e28:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e2c:	f7fd fc12 	bl	8000654 <HAL_Delay>
  scrollActivate(0);  //Close scroll
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff fcb9 	bl	80027a8 <scrollActivate>
  screenClear();
 8002e36:	f7ff fe15 	bl	8002a64 <screenClear>
  sprintf((char *)screenWrite , "STM32 Screen");
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <main+0xf4>)
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <main+0xf8>)
 8002e3e:	4614      	mov	r4, r2
 8002e40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e42:	6020      	str	r0, [r4, #0]
 8002e44:	6061      	str	r1, [r4, #4]
 8002e46:	60a2      	str	r2, [r4, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	7323      	strb	r3, [r4, #12]
  writeScreen(screenWrite, Font_7x10,0,0);
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <main+0xd8>)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	ca06      	ldmia	r2, {r1, r2}
 8002e56:	4810      	ldr	r0, [pc, #64]	; (8002e98 <main+0xf4>)
 8002e58:	f7ff feec 	bl	8002c34 <writeScreen>
  sprintf(screenWrite , "SSD%d",1306);
 8002e5c:	f240 521a 	movw	r2, #1306	; 0x51a
 8002e60:	490f      	ldr	r1, [pc, #60]	; (8002ea0 <main+0xfc>)
 8002e62:	480d      	ldr	r0, [pc, #52]	; (8002e98 <main+0xf4>)
 8002e64:	f000 fac6 	bl	80033f4 <siprintf>
  writeScreen(screenWrite, Font_7x10,0,10);
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <main+0xd8>)
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	ca06      	ldmia	r2, {r1, r2}
 8002e72:	4809      	ldr	r0, [pc, #36]	; (8002e98 <main+0xf4>)
 8002e74:	f7ff fede 	bl	8002c34 <writeScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <main+0xd4>
 8002e7a:	bf00      	nop
 8002e7c:	2000281c 	.word	0x2000281c
 8002e80:	08003c18 	.word	0x08003c18
 8002e84:	20002824 	.word	0x20002824
 8002e88:	08003c20 	.word	0x08003c20
 8002e8c:	2000282c 	.word	0x2000282c
 8002e90:	08003c28 	.word	0x08003c28
 8002e94:	08003c48 	.word	0x08003c48
 8002e98:	20002d34 	.word	0x20002d34
 8002e9c:	08003c30 	.word	0x08003c30
 8002ea0:	08003c40 	.word	0x08003c40

08002ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b094      	sub	sp, #80	; 0x50
 8002ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eaa:	f107 0320 	add.w	r3, r7, #32
 8002eae:	2230      	movs	r2, #48	; 0x30
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fa96 	bl	80033e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <SystemClock_Config+0xc8>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <SystemClock_Config+0xc8>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <SystemClock_Config+0xc8>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <SystemClock_Config+0xcc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <SystemClock_Config+0xcc>)
 8002eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <SystemClock_Config+0xcc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f14:	2304      	movs	r3, #4
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002f18:	2354      	movs	r3, #84	; 0x54
 8002f1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f20:	2304      	movs	r3, #4
 8002f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f24:	f107 0320 	add.w	r3, r7, #32
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fbf7 	bl	800171c <HAL_RCC_OscConfig>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f34:	f000 f8ea 	bl	800310c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f38:	230f      	movs	r3, #15
 8002f3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	2102      	movs	r1, #2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fe51 	bl	8001bfc <HAL_RCC_ClockConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002f60:	f000 f8d4 	bl	800310c <Error_Handler>
  }
}
 8002f64:	bf00      	nop
 8002f66:	3750      	adds	r7, #80	; 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40007000 	.word	0x40007000

08002f74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <MX_I2C2_Init+0x54>)
 8002f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <MX_I2C2_Init+0x58>)
 8002f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002fb0:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <MX_I2C2_Init+0x50>)
 8002fb2:	f7fd fe37 	bl	8000c24 <HAL_I2C_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002fbc:	f000 f8a6 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20002ce0 	.word	0x20002ce0
 8002fc8:	40005800 	.word	0x40005800
 8002fcc:	000186a0 	.word	0x000186a0

08002fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <MX_TIM2_Init+0x94>)
 8002fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <MX_TIM2_Init+0x94>)
 8002ff6:	2253      	movs	r2, #83	; 0x53
 8002ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <MX_TIM2_Init+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <MX_TIM2_Init+0x94>)
 8003002:	f242 720f 	movw	r2, #9999	; 0x270f
 8003006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <MX_TIM2_Init+0x94>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_TIM2_Init+0x94>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003014:	4813      	ldr	r0, [pc, #76]	; (8003064 <MX_TIM2_Init+0x94>)
 8003016:	f7fe ffcf 	bl	8001fb8 <HAL_TIM_Base_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003020:	f000 f874 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	4619      	mov	r1, r3
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <MX_TIM2_Init+0x94>)
 8003032:	f7ff f8f4 	bl	800221e <HAL_TIM_ConfigClockSource>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800303c:	f000 f866 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003048:	463b      	mov	r3, r7
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <MX_TIM2_Init+0x94>)
 800304e:	f7ff fb09 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003058:	f000 f858 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800305c:	bf00      	nop
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20002d98 	.word	0x20002d98

08003068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	60da      	str	r2, [r3, #12]
 800307c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <MX_GPIO_Init+0x9c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <MX_GPIO_Init+0x9c>)
 8003088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <MX_GPIO_Init+0x9c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <MX_GPIO_Init+0x9c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <MX_GPIO_Init+0x9c>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <MX_GPIO_Init+0x9c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <MX_GPIO_Init+0x9c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a11      	ldr	r2, [pc, #68]	; (8003104 <MX_GPIO_Init+0x9c>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_GPIO_Init+0x9c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Db1_Pin|Db2_Pin|Db3_Pin|Db4_Pin, GPIO_PIN_RESET);
 80030d2:	2200      	movs	r2, #0
 80030d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80030d8:	480b      	ldr	r0, [pc, #44]	; (8003108 <MX_GPIO_Init+0xa0>)
 80030da:	f7fd fd89 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Db1_Pin Db2_Pin Db3_Pin Db4_Pin */
  GPIO_InitStruct.Pin = Db1_Pin|Db2_Pin|Db3_Pin|Db4_Pin;
 80030de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80030e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	4804      	ldr	r0, [pc, #16]	; (8003108 <MX_GPIO_Init+0xa0>)
 80030f8:	f7fd fbe0 	bl	80008bc <HAL_GPIO_Init>

}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	40020c00 	.word	0x40020c00

0800310c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_MspInit+0x4c>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_MspInit+0x4c>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_MspInit+0x4c>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_MspInit+0x4c>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a08      	ldr	r2, [pc, #32]	; (8003168 <HAL_MspInit+0x4c>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_MspInit+0x4c>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_I2C_MspInit+0x84>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12c      	bne.n	80031e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b0:	2312      	movs	r3, #18
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b4:	2301      	movs	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b8:	2303      	movs	r3, #3
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031bc:	2304      	movs	r3, #4
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	480c      	ldr	r0, [pc, #48]	; (80031f8 <HAL_I2C_MspInit+0x8c>)
 80031c8:	f7fd fb78 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031da:	6413      	str	r3, [r2, #64]	; 0x40
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80031e8:	bf00      	nop
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40005800 	.word	0x40005800
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020400 	.word	0x40020400

080031fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320c:	d115      	bne.n	800323a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_TIM_Base_MspInit+0x48>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <HAL_TIM_Base_MspInit+0x48>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_TIM_Base_MspInit+0x48>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	201c      	movs	r0, #28
 8003230:	f7fd fb0d 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003234:	201c      	movs	r0, #28
 8003236:	f7fd fb26 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <HardFault_Handler+0x4>

0800325c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <MemManage_Handler+0x4>

08003262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <BusFault_Handler+0x4>

08003268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <UsageFault_Handler+0x4>

0800326e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800329c:	f7fd f9ba 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <TIM2_IRQHandler+0x10>)
 80032aa:	f7fe feb0 	bl	800200e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20002d98 	.word	0x20002d98

080032b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <_sbrk+0x50>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <_sbrk+0x16>
		heap_end = &end;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <_sbrk+0x50>)
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <_sbrk+0x54>)
 80032cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <_sbrk+0x50>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <_sbrk+0x50>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	466a      	mov	r2, sp
 80032de:	4293      	cmp	r3, r2
 80032e0:	d907      	bls.n	80032f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80032e2:	f000 f855 	bl	8003390 <__errno>
 80032e6:	4602      	mov	r2, r0
 80032e8:	230c      	movs	r3, #12
 80032ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	e006      	b.n	8003300 <_sbrk+0x48>
	}

	heap_end += incr;
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <_sbrk+0x50>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	4a03      	ldr	r2, [pc, #12]	; (8003308 <_sbrk+0x50>)
 80032fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20002cbc 	.word	0x20002cbc
 800330c:	20002de0 	.word	0x20002de0

08003310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <SystemInit+0x28>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <SystemInit+0x28>)
 800331c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SystemInit+0x28>)
 8003326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800332a:	609a      	str	r2, [r3, #8]
#endif
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800333c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003374 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003340:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003342:	e003      	b.n	800334c <LoopCopyDataInit>

08003344 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003346:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003348:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800334a:	3104      	adds	r1, #4

0800334c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800334c:	480b      	ldr	r0, [pc, #44]	; (800337c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003350:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003352:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003354:	d3f6      	bcc.n	8003344 <CopyDataInit>
  ldr  r2, =_sbss
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003358:	e002      	b.n	8003360 <LoopFillZerobss>

0800335a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800335a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800335c:	f842 3b04 	str.w	r3, [r2], #4

08003360 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003362:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003364:	d3f9      	bcc.n	800335a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003366:	f7ff ffd3 	bl	8003310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336a:	f000 f817 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800336e:	f7ff fd19 	bl	8002da4 <main>
  bx  lr    
 8003372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003374:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003378:	080040a4 	.word	0x080040a4
  ldr  r0, =_sdata
 800337c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003380:	2000289c 	.word	0x2000289c
  ldr  r2, =_sbss
 8003384:	2000289c 	.word	0x2000289c
  ldr  r3, = _ebss
 8003388:	20002ddc 	.word	0x20002ddc

0800338c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800338c:	e7fe      	b.n	800338c <ADC_IRQHandler>
	...

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	; (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20002838 	.word	0x20002838

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4e0d      	ldr	r6, [pc, #52]	; (80033d4 <__libc_init_array+0x38>)
 80033a0:	4c0d      	ldr	r4, [pc, #52]	; (80033d8 <__libc_init_array+0x3c>)
 80033a2:	1ba4      	subs	r4, r4, r6
 80033a4:	10a4      	asrs	r4, r4, #2
 80033a6:	2500      	movs	r5, #0
 80033a8:	42a5      	cmp	r5, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	4e0b      	ldr	r6, [pc, #44]	; (80033dc <__libc_init_array+0x40>)
 80033ae:	4c0c      	ldr	r4, [pc, #48]	; (80033e0 <__libc_init_array+0x44>)
 80033b0:	f000 fc26 	bl	8003c00 <_init>
 80033b4:	1ba4      	subs	r4, r4, r6
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	2500      	movs	r5, #0
 80033ba:	42a5      	cmp	r5, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033c4:	4798      	blx	r3
 80033c6:	3501      	adds	r5, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ce:	4798      	blx	r3
 80033d0:	3501      	adds	r5, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	0800409c 	.word	0x0800409c
 80033d8:	0800409c 	.word	0x0800409c
 80033dc:	0800409c 	.word	0x0800409c
 80033e0:	080040a0 	.word	0x080040a0

080033e4 <memset>:
 80033e4:	4402      	add	r2, r0
 80033e6:	4603      	mov	r3, r0
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d100      	bne.n	80033ee <memset+0xa>
 80033ec:	4770      	bx	lr
 80033ee:	f803 1b01 	strb.w	r1, [r3], #1
 80033f2:	e7f9      	b.n	80033e8 <memset+0x4>

080033f4 <siprintf>:
 80033f4:	b40e      	push	{r1, r2, r3}
 80033f6:	b500      	push	{lr}
 80033f8:	b09c      	sub	sp, #112	; 0x70
 80033fa:	ab1d      	add	r3, sp, #116	; 0x74
 80033fc:	9002      	str	r0, [sp, #8]
 80033fe:	9006      	str	r0, [sp, #24]
 8003400:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003404:	4809      	ldr	r0, [pc, #36]	; (800342c <siprintf+0x38>)
 8003406:	9107      	str	r1, [sp, #28]
 8003408:	9104      	str	r1, [sp, #16]
 800340a:	4909      	ldr	r1, [pc, #36]	; (8003430 <siprintf+0x3c>)
 800340c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003410:	9105      	str	r1, [sp, #20]
 8003412:	6800      	ldr	r0, [r0, #0]
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	a902      	add	r1, sp, #8
 8003418:	f000 f866 	bl	80034e8 <_svfiprintf_r>
 800341c:	9b02      	ldr	r3, [sp, #8]
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	b01c      	add	sp, #112	; 0x70
 8003424:	f85d eb04 	ldr.w	lr, [sp], #4
 8003428:	b003      	add	sp, #12
 800342a:	4770      	bx	lr
 800342c:	20002838 	.word	0x20002838
 8003430:	ffff0208 	.word	0xffff0208

08003434 <__ssputs_r>:
 8003434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003438:	688e      	ldr	r6, [r1, #8]
 800343a:	429e      	cmp	r6, r3
 800343c:	4682      	mov	sl, r0
 800343e:	460c      	mov	r4, r1
 8003440:	4690      	mov	r8, r2
 8003442:	4699      	mov	r9, r3
 8003444:	d837      	bhi.n	80034b6 <__ssputs_r+0x82>
 8003446:	898a      	ldrh	r2, [r1, #12]
 8003448:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800344c:	d031      	beq.n	80034b2 <__ssputs_r+0x7e>
 800344e:	6825      	ldr	r5, [r4, #0]
 8003450:	6909      	ldr	r1, [r1, #16]
 8003452:	1a6f      	subs	r7, r5, r1
 8003454:	6965      	ldr	r5, [r4, #20]
 8003456:	2302      	movs	r3, #2
 8003458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800345c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003460:	f109 0301 	add.w	r3, r9, #1
 8003464:	443b      	add	r3, r7
 8003466:	429d      	cmp	r5, r3
 8003468:	bf38      	it	cc
 800346a:	461d      	movcc	r5, r3
 800346c:	0553      	lsls	r3, r2, #21
 800346e:	d530      	bpl.n	80034d2 <__ssputs_r+0x9e>
 8003470:	4629      	mov	r1, r5
 8003472:	f000 fb2b 	bl	8003acc <_malloc_r>
 8003476:	4606      	mov	r6, r0
 8003478:	b950      	cbnz	r0, 8003490 <__ssputs_r+0x5c>
 800347a:	230c      	movs	r3, #12
 800347c:	f8ca 3000 	str.w	r3, [sl]
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003490:	463a      	mov	r2, r7
 8003492:	6921      	ldr	r1, [r4, #16]
 8003494:	f000 faa8 	bl	80039e8 <memcpy>
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800349e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a2:	81a3      	strh	r3, [r4, #12]
 80034a4:	6126      	str	r6, [r4, #16]
 80034a6:	6165      	str	r5, [r4, #20]
 80034a8:	443e      	add	r6, r7
 80034aa:	1bed      	subs	r5, r5, r7
 80034ac:	6026      	str	r6, [r4, #0]
 80034ae:	60a5      	str	r5, [r4, #8]
 80034b0:	464e      	mov	r6, r9
 80034b2:	454e      	cmp	r6, r9
 80034b4:	d900      	bls.n	80034b8 <__ssputs_r+0x84>
 80034b6:	464e      	mov	r6, r9
 80034b8:	4632      	mov	r2, r6
 80034ba:	4641      	mov	r1, r8
 80034bc:	6820      	ldr	r0, [r4, #0]
 80034be:	f000 fa9e 	bl	80039fe <memmove>
 80034c2:	68a3      	ldr	r3, [r4, #8]
 80034c4:	1b9b      	subs	r3, r3, r6
 80034c6:	60a3      	str	r3, [r4, #8]
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	441e      	add	r6, r3
 80034cc:	6026      	str	r6, [r4, #0]
 80034ce:	2000      	movs	r0, #0
 80034d0:	e7dc      	b.n	800348c <__ssputs_r+0x58>
 80034d2:	462a      	mov	r2, r5
 80034d4:	f000 fb54 	bl	8003b80 <_realloc_r>
 80034d8:	4606      	mov	r6, r0
 80034da:	2800      	cmp	r0, #0
 80034dc:	d1e2      	bne.n	80034a4 <__ssputs_r+0x70>
 80034de:	6921      	ldr	r1, [r4, #16]
 80034e0:	4650      	mov	r0, sl
 80034e2:	f000 faa5 	bl	8003a30 <_free_r>
 80034e6:	e7c8      	b.n	800347a <__ssputs_r+0x46>

080034e8 <_svfiprintf_r>:
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	461d      	mov	r5, r3
 80034ee:	898b      	ldrh	r3, [r1, #12]
 80034f0:	061f      	lsls	r7, r3, #24
 80034f2:	b09d      	sub	sp, #116	; 0x74
 80034f4:	4680      	mov	r8, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	4616      	mov	r6, r2
 80034fa:	d50f      	bpl.n	800351c <_svfiprintf_r+0x34>
 80034fc:	690b      	ldr	r3, [r1, #16]
 80034fe:	b96b      	cbnz	r3, 800351c <_svfiprintf_r+0x34>
 8003500:	2140      	movs	r1, #64	; 0x40
 8003502:	f000 fae3 	bl	8003acc <_malloc_r>
 8003506:	6020      	str	r0, [r4, #0]
 8003508:	6120      	str	r0, [r4, #16]
 800350a:	b928      	cbnz	r0, 8003518 <_svfiprintf_r+0x30>
 800350c:	230c      	movs	r3, #12
 800350e:	f8c8 3000 	str.w	r3, [r8]
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	e0c8      	b.n	80036aa <_svfiprintf_r+0x1c2>
 8003518:	2340      	movs	r3, #64	; 0x40
 800351a:	6163      	str	r3, [r4, #20]
 800351c:	2300      	movs	r3, #0
 800351e:	9309      	str	r3, [sp, #36]	; 0x24
 8003520:	2320      	movs	r3, #32
 8003522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003526:	2330      	movs	r3, #48	; 0x30
 8003528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800352c:	9503      	str	r5, [sp, #12]
 800352e:	f04f 0b01 	mov.w	fp, #1
 8003532:	4637      	mov	r7, r6
 8003534:	463d      	mov	r5, r7
 8003536:	f815 3b01 	ldrb.w	r3, [r5], #1
 800353a:	b10b      	cbz	r3, 8003540 <_svfiprintf_r+0x58>
 800353c:	2b25      	cmp	r3, #37	; 0x25
 800353e:	d13e      	bne.n	80035be <_svfiprintf_r+0xd6>
 8003540:	ebb7 0a06 	subs.w	sl, r7, r6
 8003544:	d00b      	beq.n	800355e <_svfiprintf_r+0x76>
 8003546:	4653      	mov	r3, sl
 8003548:	4632      	mov	r2, r6
 800354a:	4621      	mov	r1, r4
 800354c:	4640      	mov	r0, r8
 800354e:	f7ff ff71 	bl	8003434 <__ssputs_r>
 8003552:	3001      	adds	r0, #1
 8003554:	f000 80a4 	beq.w	80036a0 <_svfiprintf_r+0x1b8>
 8003558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800355a:	4453      	add	r3, sl
 800355c:	9309      	str	r3, [sp, #36]	; 0x24
 800355e:	783b      	ldrb	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 809d 	beq.w	80036a0 <_svfiprintf_r+0x1b8>
 8003566:	2300      	movs	r3, #0
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003570:	9304      	str	r3, [sp, #16]
 8003572:	9307      	str	r3, [sp, #28]
 8003574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003578:	931a      	str	r3, [sp, #104]	; 0x68
 800357a:	462f      	mov	r7, r5
 800357c:	2205      	movs	r2, #5
 800357e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003582:	4850      	ldr	r0, [pc, #320]	; (80036c4 <_svfiprintf_r+0x1dc>)
 8003584:	f7fc fe24 	bl	80001d0 <memchr>
 8003588:	9b04      	ldr	r3, [sp, #16]
 800358a:	b9d0      	cbnz	r0, 80035c2 <_svfiprintf_r+0xda>
 800358c:	06d9      	lsls	r1, r3, #27
 800358e:	bf44      	itt	mi
 8003590:	2220      	movmi	r2, #32
 8003592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003596:	071a      	lsls	r2, r3, #28
 8003598:	bf44      	itt	mi
 800359a:	222b      	movmi	r2, #43	; 0x2b
 800359c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035a0:	782a      	ldrb	r2, [r5, #0]
 80035a2:	2a2a      	cmp	r2, #42	; 0x2a
 80035a4:	d015      	beq.n	80035d2 <_svfiprintf_r+0xea>
 80035a6:	9a07      	ldr	r2, [sp, #28]
 80035a8:	462f      	mov	r7, r5
 80035aa:	2000      	movs	r0, #0
 80035ac:	250a      	movs	r5, #10
 80035ae:	4639      	mov	r1, r7
 80035b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035b4:	3b30      	subs	r3, #48	; 0x30
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	d94d      	bls.n	8003656 <_svfiprintf_r+0x16e>
 80035ba:	b1b8      	cbz	r0, 80035ec <_svfiprintf_r+0x104>
 80035bc:	e00f      	b.n	80035de <_svfiprintf_r+0xf6>
 80035be:	462f      	mov	r7, r5
 80035c0:	e7b8      	b.n	8003534 <_svfiprintf_r+0x4c>
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <_svfiprintf_r+0x1dc>)
 80035c4:	1a80      	subs	r0, r0, r2
 80035c6:	fa0b f000 	lsl.w	r0, fp, r0
 80035ca:	4318      	orrs	r0, r3
 80035cc:	9004      	str	r0, [sp, #16]
 80035ce:	463d      	mov	r5, r7
 80035d0:	e7d3      	b.n	800357a <_svfiprintf_r+0x92>
 80035d2:	9a03      	ldr	r2, [sp, #12]
 80035d4:	1d11      	adds	r1, r2, #4
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	9103      	str	r1, [sp, #12]
 80035da:	2a00      	cmp	r2, #0
 80035dc:	db01      	blt.n	80035e2 <_svfiprintf_r+0xfa>
 80035de:	9207      	str	r2, [sp, #28]
 80035e0:	e004      	b.n	80035ec <_svfiprintf_r+0x104>
 80035e2:	4252      	negs	r2, r2
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	9207      	str	r2, [sp, #28]
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	783b      	ldrb	r3, [r7, #0]
 80035ee:	2b2e      	cmp	r3, #46	; 0x2e
 80035f0:	d10c      	bne.n	800360c <_svfiprintf_r+0x124>
 80035f2:	787b      	ldrb	r3, [r7, #1]
 80035f4:	2b2a      	cmp	r3, #42	; 0x2a
 80035f6:	d133      	bne.n	8003660 <_svfiprintf_r+0x178>
 80035f8:	9b03      	ldr	r3, [sp, #12]
 80035fa:	1d1a      	adds	r2, r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	9203      	str	r2, [sp, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	bfb8      	it	lt
 8003604:	f04f 33ff 	movlt.w	r3, #4294967295
 8003608:	3702      	adds	r7, #2
 800360a:	9305      	str	r3, [sp, #20]
 800360c:	4d2e      	ldr	r5, [pc, #184]	; (80036c8 <_svfiprintf_r+0x1e0>)
 800360e:	7839      	ldrb	r1, [r7, #0]
 8003610:	2203      	movs	r2, #3
 8003612:	4628      	mov	r0, r5
 8003614:	f7fc fddc 	bl	80001d0 <memchr>
 8003618:	b138      	cbz	r0, 800362a <_svfiprintf_r+0x142>
 800361a:	2340      	movs	r3, #64	; 0x40
 800361c:	1b40      	subs	r0, r0, r5
 800361e:	fa03 f000 	lsl.w	r0, r3, r0
 8003622:	9b04      	ldr	r3, [sp, #16]
 8003624:	4303      	orrs	r3, r0
 8003626:	3701      	adds	r7, #1
 8003628:	9304      	str	r3, [sp, #16]
 800362a:	7839      	ldrb	r1, [r7, #0]
 800362c:	4827      	ldr	r0, [pc, #156]	; (80036cc <_svfiprintf_r+0x1e4>)
 800362e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003632:	2206      	movs	r2, #6
 8003634:	1c7e      	adds	r6, r7, #1
 8003636:	f7fc fdcb 	bl	80001d0 <memchr>
 800363a:	2800      	cmp	r0, #0
 800363c:	d038      	beq.n	80036b0 <_svfiprintf_r+0x1c8>
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <_svfiprintf_r+0x1e8>)
 8003640:	bb13      	cbnz	r3, 8003688 <_svfiprintf_r+0x1a0>
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	3307      	adds	r3, #7
 8003646:	f023 0307 	bic.w	r3, r3, #7
 800364a:	3308      	adds	r3, #8
 800364c:	9303      	str	r3, [sp, #12]
 800364e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003650:	444b      	add	r3, r9
 8003652:	9309      	str	r3, [sp, #36]	; 0x24
 8003654:	e76d      	b.n	8003532 <_svfiprintf_r+0x4a>
 8003656:	fb05 3202 	mla	r2, r5, r2, r3
 800365a:	2001      	movs	r0, #1
 800365c:	460f      	mov	r7, r1
 800365e:	e7a6      	b.n	80035ae <_svfiprintf_r+0xc6>
 8003660:	2300      	movs	r3, #0
 8003662:	3701      	adds	r7, #1
 8003664:	9305      	str	r3, [sp, #20]
 8003666:	4619      	mov	r1, r3
 8003668:	250a      	movs	r5, #10
 800366a:	4638      	mov	r0, r7
 800366c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003670:	3a30      	subs	r2, #48	; 0x30
 8003672:	2a09      	cmp	r2, #9
 8003674:	d903      	bls.n	800367e <_svfiprintf_r+0x196>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0c8      	beq.n	800360c <_svfiprintf_r+0x124>
 800367a:	9105      	str	r1, [sp, #20]
 800367c:	e7c6      	b.n	800360c <_svfiprintf_r+0x124>
 800367e:	fb05 2101 	mla	r1, r5, r1, r2
 8003682:	2301      	movs	r3, #1
 8003684:	4607      	mov	r7, r0
 8003686:	e7f0      	b.n	800366a <_svfiprintf_r+0x182>
 8003688:	ab03      	add	r3, sp, #12
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4622      	mov	r2, r4
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <_svfiprintf_r+0x1ec>)
 8003690:	a904      	add	r1, sp, #16
 8003692:	4640      	mov	r0, r8
 8003694:	f3af 8000 	nop.w
 8003698:	f1b0 3fff 	cmp.w	r0, #4294967295
 800369c:	4681      	mov	r9, r0
 800369e:	d1d6      	bne.n	800364e <_svfiprintf_r+0x166>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	065b      	lsls	r3, r3, #25
 80036a4:	f53f af35 	bmi.w	8003512 <_svfiprintf_r+0x2a>
 80036a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036aa:	b01d      	add	sp, #116	; 0x74
 80036ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b0:	ab03      	add	r3, sp, #12
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4622      	mov	r2, r4
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <_svfiprintf_r+0x1ec>)
 80036b8:	a904      	add	r1, sp, #16
 80036ba:	4640      	mov	r0, r8
 80036bc:	f000 f882 	bl	80037c4 <_printf_i>
 80036c0:	e7ea      	b.n	8003698 <_svfiprintf_r+0x1b0>
 80036c2:	bf00      	nop
 80036c4:	08004060 	.word	0x08004060
 80036c8:	08004066 	.word	0x08004066
 80036cc:	0800406a 	.word	0x0800406a
 80036d0:	00000000 	.word	0x00000000
 80036d4:	08003435 	.word	0x08003435

080036d8 <_printf_common>:
 80036d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	4691      	mov	r9, r2
 80036de:	461f      	mov	r7, r3
 80036e0:	688a      	ldr	r2, [r1, #8]
 80036e2:	690b      	ldr	r3, [r1, #16]
 80036e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bfb8      	it	lt
 80036ec:	4613      	movlt	r3, r2
 80036ee:	f8c9 3000 	str.w	r3, [r9]
 80036f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036f6:	4606      	mov	r6, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	b112      	cbz	r2, 8003702 <_printf_common+0x2a>
 80036fc:	3301      	adds	r3, #1
 80036fe:	f8c9 3000 	str.w	r3, [r9]
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	0699      	lsls	r1, r3, #26
 8003706:	bf42      	ittt	mi
 8003708:	f8d9 3000 	ldrmi.w	r3, [r9]
 800370c:	3302      	addmi	r3, #2
 800370e:	f8c9 3000 	strmi.w	r3, [r9]
 8003712:	6825      	ldr	r5, [r4, #0]
 8003714:	f015 0506 	ands.w	r5, r5, #6
 8003718:	d107      	bne.n	800372a <_printf_common+0x52>
 800371a:	f104 0a19 	add.w	sl, r4, #25
 800371e:	68e3      	ldr	r3, [r4, #12]
 8003720:	f8d9 2000 	ldr.w	r2, [r9]
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	42ab      	cmp	r3, r5
 8003728:	dc28      	bgt.n	800377c <_printf_common+0xa4>
 800372a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	3300      	adds	r3, #0
 8003732:	bf18      	it	ne
 8003734:	2301      	movne	r3, #1
 8003736:	0692      	lsls	r2, r2, #26
 8003738:	d42d      	bmi.n	8003796 <_printf_common+0xbe>
 800373a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800373e:	4639      	mov	r1, r7
 8003740:	4630      	mov	r0, r6
 8003742:	47c0      	blx	r8
 8003744:	3001      	adds	r0, #1
 8003746:	d020      	beq.n	800378a <_printf_common+0xb2>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	68e5      	ldr	r5, [r4, #12]
 800374c:	f8d9 2000 	ldr.w	r2, [r9]
 8003750:	f003 0306 	and.w	r3, r3, #6
 8003754:	2b04      	cmp	r3, #4
 8003756:	bf08      	it	eq
 8003758:	1aad      	subeq	r5, r5, r2
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	6922      	ldr	r2, [r4, #16]
 800375e:	bf0c      	ite	eq
 8003760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003764:	2500      	movne	r5, #0
 8003766:	4293      	cmp	r3, r2
 8003768:	bfc4      	itt	gt
 800376a:	1a9b      	subgt	r3, r3, r2
 800376c:	18ed      	addgt	r5, r5, r3
 800376e:	f04f 0900 	mov.w	r9, #0
 8003772:	341a      	adds	r4, #26
 8003774:	454d      	cmp	r5, r9
 8003776:	d11a      	bne.n	80037ae <_printf_common+0xd6>
 8003778:	2000      	movs	r0, #0
 800377a:	e008      	b.n	800378e <_printf_common+0xb6>
 800377c:	2301      	movs	r3, #1
 800377e:	4652      	mov	r2, sl
 8003780:	4639      	mov	r1, r7
 8003782:	4630      	mov	r0, r6
 8003784:	47c0      	blx	r8
 8003786:	3001      	adds	r0, #1
 8003788:	d103      	bne.n	8003792 <_printf_common+0xba>
 800378a:	f04f 30ff 	mov.w	r0, #4294967295
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003792:	3501      	adds	r5, #1
 8003794:	e7c3      	b.n	800371e <_printf_common+0x46>
 8003796:	18e1      	adds	r1, r4, r3
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	2030      	movs	r0, #48	; 0x30
 800379c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037a0:	4422      	add	r2, r4
 80037a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037aa:	3302      	adds	r3, #2
 80037ac:	e7c5      	b.n	800373a <_printf_common+0x62>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4622      	mov	r2, r4
 80037b2:	4639      	mov	r1, r7
 80037b4:	4630      	mov	r0, r6
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d0e6      	beq.n	800378a <_printf_common+0xb2>
 80037bc:	f109 0901 	add.w	r9, r9, #1
 80037c0:	e7d8      	b.n	8003774 <_printf_common+0x9c>
	...

080037c4 <_printf_i>:
 80037c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037cc:	460c      	mov	r4, r1
 80037ce:	7e09      	ldrb	r1, [r1, #24]
 80037d0:	b085      	sub	sp, #20
 80037d2:	296e      	cmp	r1, #110	; 0x6e
 80037d4:	4617      	mov	r7, r2
 80037d6:	4606      	mov	r6, r0
 80037d8:	4698      	mov	r8, r3
 80037da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037dc:	f000 80b3 	beq.w	8003946 <_printf_i+0x182>
 80037e0:	d822      	bhi.n	8003828 <_printf_i+0x64>
 80037e2:	2963      	cmp	r1, #99	; 0x63
 80037e4:	d036      	beq.n	8003854 <_printf_i+0x90>
 80037e6:	d80a      	bhi.n	80037fe <_printf_i+0x3a>
 80037e8:	2900      	cmp	r1, #0
 80037ea:	f000 80b9 	beq.w	8003960 <_printf_i+0x19c>
 80037ee:	2958      	cmp	r1, #88	; 0x58
 80037f0:	f000 8083 	beq.w	80038fa <_printf_i+0x136>
 80037f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037fc:	e032      	b.n	8003864 <_printf_i+0xa0>
 80037fe:	2964      	cmp	r1, #100	; 0x64
 8003800:	d001      	beq.n	8003806 <_printf_i+0x42>
 8003802:	2969      	cmp	r1, #105	; 0x69
 8003804:	d1f6      	bne.n	80037f4 <_printf_i+0x30>
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	0605      	lsls	r5, r0, #24
 800380c:	f103 0104 	add.w	r1, r3, #4
 8003810:	d52a      	bpl.n	8003868 <_printf_i+0xa4>
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6011      	str	r1, [r2, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	da03      	bge.n	8003822 <_printf_i+0x5e>
 800381a:	222d      	movs	r2, #45	; 0x2d
 800381c:	425b      	negs	r3, r3
 800381e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003822:	486f      	ldr	r0, [pc, #444]	; (80039e0 <_printf_i+0x21c>)
 8003824:	220a      	movs	r2, #10
 8003826:	e039      	b.n	800389c <_printf_i+0xd8>
 8003828:	2973      	cmp	r1, #115	; 0x73
 800382a:	f000 809d 	beq.w	8003968 <_printf_i+0x1a4>
 800382e:	d808      	bhi.n	8003842 <_printf_i+0x7e>
 8003830:	296f      	cmp	r1, #111	; 0x6f
 8003832:	d020      	beq.n	8003876 <_printf_i+0xb2>
 8003834:	2970      	cmp	r1, #112	; 0x70
 8003836:	d1dd      	bne.n	80037f4 <_printf_i+0x30>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	f043 0320 	orr.w	r3, r3, #32
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	e003      	b.n	800384a <_printf_i+0x86>
 8003842:	2975      	cmp	r1, #117	; 0x75
 8003844:	d017      	beq.n	8003876 <_printf_i+0xb2>
 8003846:	2978      	cmp	r1, #120	; 0x78
 8003848:	d1d4      	bne.n	80037f4 <_printf_i+0x30>
 800384a:	2378      	movs	r3, #120	; 0x78
 800384c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003850:	4864      	ldr	r0, [pc, #400]	; (80039e4 <_printf_i+0x220>)
 8003852:	e055      	b.n	8003900 <_printf_i+0x13c>
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	1d19      	adds	r1, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6011      	str	r1, [r2, #0]
 800385c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003864:	2301      	movs	r3, #1
 8003866:	e08c      	b.n	8003982 <_printf_i+0x1be>
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6011      	str	r1, [r2, #0]
 800386c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003870:	bf18      	it	ne
 8003872:	b21b      	sxthne	r3, r3
 8003874:	e7cf      	b.n	8003816 <_printf_i+0x52>
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	6825      	ldr	r5, [r4, #0]
 800387a:	1d18      	adds	r0, r3, #4
 800387c:	6010      	str	r0, [r2, #0]
 800387e:	0628      	lsls	r0, r5, #24
 8003880:	d501      	bpl.n	8003886 <_printf_i+0xc2>
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e002      	b.n	800388c <_printf_i+0xc8>
 8003886:	0668      	lsls	r0, r5, #25
 8003888:	d5fb      	bpl.n	8003882 <_printf_i+0xbe>
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	4854      	ldr	r0, [pc, #336]	; (80039e0 <_printf_i+0x21c>)
 800388e:	296f      	cmp	r1, #111	; 0x6f
 8003890:	bf14      	ite	ne
 8003892:	220a      	movne	r2, #10
 8003894:	2208      	moveq	r2, #8
 8003896:	2100      	movs	r1, #0
 8003898:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800389c:	6865      	ldr	r5, [r4, #4]
 800389e:	60a5      	str	r5, [r4, #8]
 80038a0:	2d00      	cmp	r5, #0
 80038a2:	f2c0 8095 	blt.w	80039d0 <_printf_i+0x20c>
 80038a6:	6821      	ldr	r1, [r4, #0]
 80038a8:	f021 0104 	bic.w	r1, r1, #4
 80038ac:	6021      	str	r1, [r4, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d13d      	bne.n	800392e <_printf_i+0x16a>
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	f040 808e 	bne.w	80039d4 <_printf_i+0x210>
 80038b8:	4665      	mov	r5, ip
 80038ba:	2a08      	cmp	r2, #8
 80038bc:	d10b      	bne.n	80038d6 <_printf_i+0x112>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	07db      	lsls	r3, r3, #31
 80038c2:	d508      	bpl.n	80038d6 <_printf_i+0x112>
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	bfde      	ittt	le
 80038cc:	2330      	movle	r3, #48	; 0x30
 80038ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038d6:	ebac 0305 	sub.w	r3, ip, r5
 80038da:	6123      	str	r3, [r4, #16]
 80038dc:	f8cd 8000 	str.w	r8, [sp]
 80038e0:	463b      	mov	r3, r7
 80038e2:	aa03      	add	r2, sp, #12
 80038e4:	4621      	mov	r1, r4
 80038e6:	4630      	mov	r0, r6
 80038e8:	f7ff fef6 	bl	80036d8 <_printf_common>
 80038ec:	3001      	adds	r0, #1
 80038ee:	d14d      	bne.n	800398c <_printf_i+0x1c8>
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	b005      	add	sp, #20
 80038f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038fa:	4839      	ldr	r0, [pc, #228]	; (80039e0 <_printf_i+0x21c>)
 80038fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	6821      	ldr	r1, [r4, #0]
 8003904:	1d1d      	adds	r5, r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6015      	str	r5, [r2, #0]
 800390a:	060a      	lsls	r2, r1, #24
 800390c:	d50b      	bpl.n	8003926 <_printf_i+0x162>
 800390e:	07ca      	lsls	r2, r1, #31
 8003910:	bf44      	itt	mi
 8003912:	f041 0120 	orrmi.w	r1, r1, #32
 8003916:	6021      	strmi	r1, [r4, #0]
 8003918:	b91b      	cbnz	r3, 8003922 <_printf_i+0x15e>
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	f022 0220 	bic.w	r2, r2, #32
 8003920:	6022      	str	r2, [r4, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	e7b7      	b.n	8003896 <_printf_i+0xd2>
 8003926:	064d      	lsls	r5, r1, #25
 8003928:	bf48      	it	mi
 800392a:	b29b      	uxthmi	r3, r3
 800392c:	e7ef      	b.n	800390e <_printf_i+0x14a>
 800392e:	4665      	mov	r5, ip
 8003930:	fbb3 f1f2 	udiv	r1, r3, r2
 8003934:	fb02 3311 	mls	r3, r2, r1, r3
 8003938:	5cc3      	ldrb	r3, [r0, r3]
 800393a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800393e:	460b      	mov	r3, r1
 8003940:	2900      	cmp	r1, #0
 8003942:	d1f5      	bne.n	8003930 <_printf_i+0x16c>
 8003944:	e7b9      	b.n	80038ba <_printf_i+0xf6>
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	6825      	ldr	r5, [r4, #0]
 800394a:	6961      	ldr	r1, [r4, #20]
 800394c:	1d18      	adds	r0, r3, #4
 800394e:	6010      	str	r0, [r2, #0]
 8003950:	0628      	lsls	r0, r5, #24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	d501      	bpl.n	800395a <_printf_i+0x196>
 8003956:	6019      	str	r1, [r3, #0]
 8003958:	e002      	b.n	8003960 <_printf_i+0x19c>
 800395a:	066a      	lsls	r2, r5, #25
 800395c:	d5fb      	bpl.n	8003956 <_printf_i+0x192>
 800395e:	8019      	strh	r1, [r3, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	4665      	mov	r5, ip
 8003966:	e7b9      	b.n	80038dc <_printf_i+0x118>
 8003968:	6813      	ldr	r3, [r2, #0]
 800396a:	1d19      	adds	r1, r3, #4
 800396c:	6011      	str	r1, [r2, #0]
 800396e:	681d      	ldr	r5, [r3, #0]
 8003970:	6862      	ldr	r2, [r4, #4]
 8003972:	2100      	movs	r1, #0
 8003974:	4628      	mov	r0, r5
 8003976:	f7fc fc2b 	bl	80001d0 <memchr>
 800397a:	b108      	cbz	r0, 8003980 <_printf_i+0x1bc>
 800397c:	1b40      	subs	r0, r0, r5
 800397e:	6060      	str	r0, [r4, #4]
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	2300      	movs	r3, #0
 8003986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800398a:	e7a7      	b.n	80038dc <_printf_i+0x118>
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	462a      	mov	r2, r5
 8003990:	4639      	mov	r1, r7
 8003992:	4630      	mov	r0, r6
 8003994:	47c0      	blx	r8
 8003996:	3001      	adds	r0, #1
 8003998:	d0aa      	beq.n	80038f0 <_printf_i+0x12c>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	079b      	lsls	r3, r3, #30
 800399e:	d413      	bmi.n	80039c8 <_printf_i+0x204>
 80039a0:	68e0      	ldr	r0, [r4, #12]
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	4298      	cmp	r0, r3
 80039a6:	bfb8      	it	lt
 80039a8:	4618      	movlt	r0, r3
 80039aa:	e7a3      	b.n	80038f4 <_printf_i+0x130>
 80039ac:	2301      	movs	r3, #1
 80039ae:	464a      	mov	r2, r9
 80039b0:	4639      	mov	r1, r7
 80039b2:	4630      	mov	r0, r6
 80039b4:	47c0      	blx	r8
 80039b6:	3001      	adds	r0, #1
 80039b8:	d09a      	beq.n	80038f0 <_printf_i+0x12c>
 80039ba:	3501      	adds	r5, #1
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	9a03      	ldr	r2, [sp, #12]
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	42ab      	cmp	r3, r5
 80039c4:	dcf2      	bgt.n	80039ac <_printf_i+0x1e8>
 80039c6:	e7eb      	b.n	80039a0 <_printf_i+0x1dc>
 80039c8:	2500      	movs	r5, #0
 80039ca:	f104 0919 	add.w	r9, r4, #25
 80039ce:	e7f5      	b.n	80039bc <_printf_i+0x1f8>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ac      	bne.n	800392e <_printf_i+0x16a>
 80039d4:	7803      	ldrb	r3, [r0, #0]
 80039d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039de:	e76c      	b.n	80038ba <_printf_i+0xf6>
 80039e0:	08004071 	.word	0x08004071
 80039e4:	08004082 	.word	0x08004082

080039e8 <memcpy>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	1e43      	subs	r3, r0, #1
 80039ec:	440a      	add	r2, r1
 80039ee:	4291      	cmp	r1, r2
 80039f0:	d100      	bne.n	80039f4 <memcpy+0xc>
 80039f2:	bd10      	pop	{r4, pc}
 80039f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039fc:	e7f7      	b.n	80039ee <memcpy+0x6>

080039fe <memmove>:
 80039fe:	4288      	cmp	r0, r1
 8003a00:	b510      	push	{r4, lr}
 8003a02:	eb01 0302 	add.w	r3, r1, r2
 8003a06:	d807      	bhi.n	8003a18 <memmove+0x1a>
 8003a08:	1e42      	subs	r2, r0, #1
 8003a0a:	4299      	cmp	r1, r3
 8003a0c:	d00a      	beq.n	8003a24 <memmove+0x26>
 8003a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a16:	e7f8      	b.n	8003a0a <memmove+0xc>
 8003a18:	4283      	cmp	r3, r0
 8003a1a:	d9f5      	bls.n	8003a08 <memmove+0xa>
 8003a1c:	1881      	adds	r1, r0, r2
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	42d3      	cmn	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memmove+0x28>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a2e:	e7f7      	b.n	8003a20 <memmove+0x22>

08003a30 <_free_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4605      	mov	r5, r0
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d045      	beq.n	8003ac4 <_free_r+0x94>
 8003a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3c:	1f0c      	subs	r4, r1, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfb8      	it	lt
 8003a42:	18e4      	addlt	r4, r4, r3
 8003a44:	f000 f8d2 	bl	8003bec <__malloc_lock>
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <_free_r+0x98>)
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	b933      	cbnz	r3, 8003a5e <_free_r+0x2e>
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	6014      	str	r4, [r2, #0]
 8003a54:	4628      	mov	r0, r5
 8003a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5a:	f000 b8c8 	b.w	8003bee <__malloc_unlock>
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	d90c      	bls.n	8003a7c <_free_r+0x4c>
 8003a62:	6821      	ldr	r1, [r4, #0]
 8003a64:	1862      	adds	r2, r4, r1
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bf04      	itt	eq
 8003a6a:	681a      	ldreq	r2, [r3, #0]
 8003a6c:	685b      	ldreq	r3, [r3, #4]
 8003a6e:	6063      	str	r3, [r4, #4]
 8003a70:	bf04      	itt	eq
 8003a72:	1852      	addeq	r2, r2, r1
 8003a74:	6022      	streq	r2, [r4, #0]
 8003a76:	6004      	str	r4, [r0, #0]
 8003a78:	e7ec      	b.n	8003a54 <_free_r+0x24>
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	b10a      	cbz	r2, 8003a84 <_free_r+0x54>
 8003a80:	42a2      	cmp	r2, r4
 8003a82:	d9fa      	bls.n	8003a7a <_free_r+0x4a>
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	1858      	adds	r0, r3, r1
 8003a88:	42a0      	cmp	r0, r4
 8003a8a:	d10b      	bne.n	8003aa4 <_free_r+0x74>
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	4401      	add	r1, r0
 8003a90:	1858      	adds	r0, r3, r1
 8003a92:	4282      	cmp	r2, r0
 8003a94:	6019      	str	r1, [r3, #0]
 8003a96:	d1dd      	bne.n	8003a54 <_free_r+0x24>
 8003a98:	6810      	ldr	r0, [r2, #0]
 8003a9a:	6852      	ldr	r2, [r2, #4]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	6019      	str	r1, [r3, #0]
 8003aa2:	e7d7      	b.n	8003a54 <_free_r+0x24>
 8003aa4:	d902      	bls.n	8003aac <_free_r+0x7c>
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	e7d3      	b.n	8003a54 <_free_r+0x24>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	1821      	adds	r1, r4, r0
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	bf04      	itt	eq
 8003ab4:	6811      	ldreq	r1, [r2, #0]
 8003ab6:	6852      	ldreq	r2, [r2, #4]
 8003ab8:	6062      	str	r2, [r4, #4]
 8003aba:	bf04      	itt	eq
 8003abc:	1809      	addeq	r1, r1, r0
 8003abe:	6021      	streq	r1, [r4, #0]
 8003ac0:	605c      	str	r4, [r3, #4]
 8003ac2:	e7c7      	b.n	8003a54 <_free_r+0x24>
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20002cc0 	.word	0x20002cc0

08003acc <_malloc_r>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	1ccd      	adds	r5, r1, #3
 8003ad0:	f025 0503 	bic.w	r5, r5, #3
 8003ad4:	3508      	adds	r5, #8
 8003ad6:	2d0c      	cmp	r5, #12
 8003ad8:	bf38      	it	cc
 8003ada:	250c      	movcc	r5, #12
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	4606      	mov	r6, r0
 8003ae0:	db01      	blt.n	8003ae6 <_malloc_r+0x1a>
 8003ae2:	42a9      	cmp	r1, r5
 8003ae4:	d903      	bls.n	8003aee <_malloc_r+0x22>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	2000      	movs	r0, #0
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
 8003aee:	f000 f87d 	bl	8003bec <__malloc_lock>
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <_malloc_r+0xac>)
 8003af4:	6814      	ldr	r4, [r2, #0]
 8003af6:	4621      	mov	r1, r4
 8003af8:	b991      	cbnz	r1, 8003b20 <_malloc_r+0x54>
 8003afa:	4c20      	ldr	r4, [pc, #128]	; (8003b7c <_malloc_r+0xb0>)
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	b91b      	cbnz	r3, 8003b08 <_malloc_r+0x3c>
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f863 	bl	8003bcc <_sbrk_r>
 8003b06:	6020      	str	r0, [r4, #0]
 8003b08:	4629      	mov	r1, r5
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f000 f85e 	bl	8003bcc <_sbrk_r>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d124      	bne.n	8003b5e <_malloc_r+0x92>
 8003b14:	230c      	movs	r3, #12
 8003b16:	6033      	str	r3, [r6, #0]
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 f868 	bl	8003bee <__malloc_unlock>
 8003b1e:	e7e4      	b.n	8003aea <_malloc_r+0x1e>
 8003b20:	680b      	ldr	r3, [r1, #0]
 8003b22:	1b5b      	subs	r3, r3, r5
 8003b24:	d418      	bmi.n	8003b58 <_malloc_r+0x8c>
 8003b26:	2b0b      	cmp	r3, #11
 8003b28:	d90f      	bls.n	8003b4a <_malloc_r+0x7e>
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	50cd      	str	r5, [r1, r3]
 8003b2e:	18cc      	adds	r4, r1, r3
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f85c 	bl	8003bee <__malloc_unlock>
 8003b36:	f104 000b 	add.w	r0, r4, #11
 8003b3a:	1d23      	adds	r3, r4, #4
 8003b3c:	f020 0007 	bic.w	r0, r0, #7
 8003b40:	1ac3      	subs	r3, r0, r3
 8003b42:	d0d3      	beq.n	8003aec <_malloc_r+0x20>
 8003b44:	425a      	negs	r2, r3
 8003b46:	50e2      	str	r2, [r4, r3]
 8003b48:	e7d0      	b.n	8003aec <_malloc_r+0x20>
 8003b4a:	428c      	cmp	r4, r1
 8003b4c:	684b      	ldr	r3, [r1, #4]
 8003b4e:	bf16      	itet	ne
 8003b50:	6063      	strne	r3, [r4, #4]
 8003b52:	6013      	streq	r3, [r2, #0]
 8003b54:	460c      	movne	r4, r1
 8003b56:	e7eb      	b.n	8003b30 <_malloc_r+0x64>
 8003b58:	460c      	mov	r4, r1
 8003b5a:	6849      	ldr	r1, [r1, #4]
 8003b5c:	e7cc      	b.n	8003af8 <_malloc_r+0x2c>
 8003b5e:	1cc4      	adds	r4, r0, #3
 8003b60:	f024 0403 	bic.w	r4, r4, #3
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d005      	beq.n	8003b74 <_malloc_r+0xa8>
 8003b68:	1a21      	subs	r1, r4, r0
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f82e 	bl	8003bcc <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d0cf      	beq.n	8003b14 <_malloc_r+0x48>
 8003b74:	6025      	str	r5, [r4, #0]
 8003b76:	e7db      	b.n	8003b30 <_malloc_r+0x64>
 8003b78:	20002cc0 	.word	0x20002cc0
 8003b7c:	20002cc4 	.word	0x20002cc4

08003b80 <_realloc_r>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	4607      	mov	r7, r0
 8003b84:	4614      	mov	r4, r2
 8003b86:	460e      	mov	r6, r1
 8003b88:	b921      	cbnz	r1, 8003b94 <_realloc_r+0x14>
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b90:	f7ff bf9c 	b.w	8003acc <_malloc_r>
 8003b94:	b922      	cbnz	r2, 8003ba0 <_realloc_r+0x20>
 8003b96:	f7ff ff4b 	bl	8003a30 <_free_r>
 8003b9a:	4625      	mov	r5, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba0:	f000 f826 	bl	8003bf0 <_malloc_usable_size_r>
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d20f      	bcs.n	8003bc8 <_realloc_r+0x48>
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4638      	mov	r0, r7
 8003bac:	f7ff ff8e 	bl	8003acc <_malloc_r>
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0f2      	beq.n	8003b9c <_realloc_r+0x1c>
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4622      	mov	r2, r4
 8003bba:	f7ff ff15 	bl	80039e8 <memcpy>
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f7ff ff35 	bl	8003a30 <_free_r>
 8003bc6:	e7e9      	b.n	8003b9c <_realloc_r+0x1c>
 8003bc8:	4635      	mov	r5, r6
 8003bca:	e7e7      	b.n	8003b9c <_realloc_r+0x1c>

08003bcc <_sbrk_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4c06      	ldr	r4, [pc, #24]	; (8003be8 <_sbrk_r+0x1c>)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	6023      	str	r3, [r4, #0]
 8003bd8:	f7ff fb6e 	bl	80032b8 <_sbrk>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_sbrk_r+0x1a>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_sbrk_r+0x1a>
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	20002dd8 	.word	0x20002dd8

08003bec <__malloc_lock>:
 8003bec:	4770      	bx	lr

08003bee <__malloc_unlock>:
 8003bee:	4770      	bx	lr

08003bf0 <_malloc_usable_size_r>:
 8003bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf4:	1f18      	subs	r0, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfbc      	itt	lt
 8003bfa:	580b      	ldrlt	r3, [r1, r0]
 8003bfc:	18c0      	addlt	r0, r0, r3
 8003bfe:	4770      	bx	lr

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
