
SoftI2C_With_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f48  08001f48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f48  08001f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f50  08001f50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f50  08001f50  00011f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000008c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000047f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001182  00000000  00000000  00024832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000488  00000000  00000000  000259b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003f0  00000000  00000000  00025e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef45  00000000  00000000  00026230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000557e  00000000  00000000  00045175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbf7e  00000000  00000000  0004a6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00106671  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000104c  00000000  00000000  001066c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f20 	.word	0x08001f20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f20 	.word	0x08001f20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <I2C_Init>:
GPIO_InitTypeDef SCLPinInit = {0};
GPIO_InitTypeDef SDAPinInput = {0};
HAL_StatusTypeDef result;

void I2C_Init(GPIO_TypeDef *SDAPort,uint32_t SDAPin,GPIO_TypeDef *SCLPort,uint32_t SCLPin)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
 80004cc:	603b      	str	r3, [r7, #0]

	  SDA=SDAPort;
 80004ce:	4a66      	ldr	r2, [pc, #408]	; (8000668 <I2C_Init+0x1a8>)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	6013      	str	r3, [r2, #0]
	  SCL=SCLPort;
 80004d4:	4a65      	ldr	r2, [pc, #404]	; (800066c <I2C_Init+0x1ac>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]
	  SDAP=SDAPin;
 80004da:	4a65      	ldr	r2, [pc, #404]	; (8000670 <I2C_Init+0x1b0>)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	6013      	str	r3, [r2, #0]
	  SCLP=SCLPin;
 80004e0:	4a64      	ldr	r2, [pc, #400]	; (8000674 <I2C_Init+0x1b4>)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	6013      	str	r3, [r2, #0]


	  if(SDAPort==GPIOA || SCLPort==GPIOA  )
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4a63      	ldr	r2, [pc, #396]	; (8000678 <I2C_Init+0x1b8>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d003      	beq.n	80004f6 <I2C_Init+0x36>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a61      	ldr	r2, [pc, #388]	; (8000678 <I2C_Init+0x1b8>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d10e      	bne.n	8000514 <I2C_Init+0x54>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
 80004fa:	4b60      	ldr	r3, [pc, #384]	; (800067c <I2C_Init+0x1bc>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a5f      	ldr	r2, [pc, #380]	; (800067c <I2C_Init+0x1bc>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b5d      	ldr	r3, [pc, #372]	; (800067c <I2C_Init+0x1bc>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
 8000510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000512:	e05a      	b.n	80005ca <I2C_Init+0x10a>
	  else if(SDAPort==GPIOB || SCLPort==GPIOB  )
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a5a      	ldr	r2, [pc, #360]	; (8000680 <I2C_Init+0x1c0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d003      	beq.n	8000524 <I2C_Init+0x64>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a58      	ldr	r2, [pc, #352]	; (8000680 <I2C_Init+0x1c0>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d10e      	bne.n	8000542 <I2C_Init+0x82>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
 8000528:	4b54      	ldr	r3, [pc, #336]	; (800067c <I2C_Init+0x1bc>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	4a53      	ldr	r2, [pc, #332]	; (800067c <I2C_Init+0x1bc>)
 800052e:	f043 0302 	orr.w	r3, r3, #2
 8000532:	6313      	str	r3, [r2, #48]	; 0x30
 8000534:	4b51      	ldr	r3, [pc, #324]	; (800067c <I2C_Init+0x1bc>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	623b      	str	r3, [r7, #32]
 800053e:	6a3b      	ldr	r3, [r7, #32]
 8000540:	e043      	b.n	80005ca <I2C_Init+0x10a>
	  else if(SDAPort==GPIOC || SCLPort==GPIOC  )
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	4a4f      	ldr	r2, [pc, #316]	; (8000684 <I2C_Init+0x1c4>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d003      	beq.n	8000552 <I2C_Init+0x92>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a4d      	ldr	r2, [pc, #308]	; (8000684 <I2C_Init+0x1c4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10e      	bne.n	8000570 <I2C_Init+0xb0>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	4b49      	ldr	r3, [pc, #292]	; (800067c <I2C_Init+0x1bc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a48      	ldr	r2, [pc, #288]	; (800067c <I2C_Init+0x1bc>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b46      	ldr	r3, [pc, #280]	; (800067c <I2C_Init+0x1bc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	e02c      	b.n	80005ca <I2C_Init+0x10a>
	  else if(SDAPort==GPIOD || SCLPort==GPIOD  )
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4a45      	ldr	r2, [pc, #276]	; (8000688 <I2C_Init+0x1c8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d003      	beq.n	8000580 <I2C_Init+0xc0>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a43      	ldr	r2, [pc, #268]	; (8000688 <I2C_Init+0x1c8>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d10e      	bne.n	800059e <I2C_Init+0xde>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <I2C_Init+0x1bc>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a3c      	ldr	r2, [pc, #240]	; (800067c <I2C_Init+0x1bc>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <I2C_Init+0x1bc>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	61bb      	str	r3, [r7, #24]
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	e015      	b.n	80005ca <I2C_Init+0x10a>
	  else if(SDAPort==GPIOE || SCLPort==GPIOE  )
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4a3a      	ldr	r2, [pc, #232]	; (800068c <I2C_Init+0x1cc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d003      	beq.n	80005ae <I2C_Init+0xee>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a38      	ldr	r2, [pc, #224]	; (800068c <I2C_Init+0x1cc>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d10d      	bne.n	80005ca <I2C_Init+0x10a>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <I2C_Init+0x1bc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a31      	ldr	r2, [pc, #196]	; (800067c <I2C_Init+0x1bc>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <I2C_Init+0x1bc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0310 	and.w	r3, r3, #16
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]



	  HAL_GPIO_WritePin(SDA, SDAPin|SCLPin, GPIO_PIN_RESET);
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <I2C_Init+0x1a8>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b29b      	uxth	r3, r3
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f819 	bl	8001614 <HAL_GPIO_WritePin>

	  SDAPinInit.Pin = SDAPin;
 80005e2:	4a2b      	ldr	r2, [pc, #172]	; (8000690 <I2C_Init+0x1d0>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	6013      	str	r3, [r2, #0]
	  SDAPinInit.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <I2C_Init+0x1d0>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
	  SDAPinInit.Pull = GPIO_NOPULL;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <I2C_Init+0x1d0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	  SDAPinInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <I2C_Init+0x1d0>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(SDA, &SDAPinInit);
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <I2C_Init+0x1a8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4924      	ldr	r1, [pc, #144]	; (8000690 <I2C_Init+0x1d0>)
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe53 	bl	80012ac <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(SDA, SDAP, GPIO_PIN_SET);
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <I2C_Init+0x1a8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <I2C_Init+0x1b0>)
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	b291      	uxth	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fffe 	bl	8001614 <HAL_GPIO_WritePin>

	  SDAPinInput.Pin  = SDAPin;
 8000618:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <I2C_Init+0x1d4>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	6013      	str	r3, [r2, #0]
	  SDAPinInput.Mode = GPIO_MODE_INPUT;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <I2C_Init+0x1d4>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
	  SDAPinInput.Pull = GPIO_NOPULL;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <I2C_Init+0x1d4>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]

	  SCLPinInit.Pin =SCLPin;
 800062a:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <I2C_Init+0x1d8>)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	6013      	str	r3, [r2, #0]
	  SCLPinInit.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <I2C_Init+0x1d8>)
 8000632:	2201      	movs	r2, #1
 8000634:	605a      	str	r2, [r3, #4]
	  SCLPinInit.Pull = GPIO_NOPULL;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <I2C_Init+0x1d8>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
	  SCLPinInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <I2C_Init+0x1d8>)
 800063e:	2203      	movs	r2, #3
 8000640:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(SCL, &SCLPinInit);
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <I2C_Init+0x1ac>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4914      	ldr	r1, [pc, #80]	; (8000698 <I2C_Init+0x1d8>)
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fe2f 	bl	80012ac <HAL_GPIO_Init>

	  HAL_GPIO_WritePin(SCL, SCLPin, GPIO_PIN_SET);
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <I2C_Init+0x1ac>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	b291      	uxth	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ffdb 	bl	8001614 <HAL_GPIO_WritePin>

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000068 	.word	0x20000068
 800066c:	20000074 	.word	0x20000074
 8000670:	2000006c 	.word	0x2000006c
 8000674:	20000064 	.word	0x20000064
 8000678:	40020000 	.word	0x40020000
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40021000 	.word	0x40021000
 8000690:	20000028 	.word	0x20000028
 8000694:	20000050 	.word	0x20000050
 8000698:	2000003c 	.word	0x2000003c

0800069c <resetIO>:
	SCL->BSRR = (uint32_t)SCLP << 16U ;

}

void resetIO()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    changeSDAState(1) ;
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f885 	bl	80007b0 <changeSDAState>
    SCL->BSRR = SCLP  ;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <resetIO+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <resetIO+0x28>)
 80006ac:	6812      	ldr	r2, [r2, #0]
 80006ae:	619a      	str	r2, [r3, #24]
	SDA->BSRR = SDAP  ;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <resetIO+0x2c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a05      	ldr	r2, [pc, #20]	; (80006cc <resetIO+0x30>)
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	619a      	str	r2, [r3, #24]

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000074 	.word	0x20000074
 80006c4:	20000064 	.word	0x20000064
 80006c8:	20000068 	.word	0x20000068
 80006cc:	2000006c 	.word	0x2000006c

080006d0 <delay>:

void delay()
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
   for(int i=0;i<delayCount;i++);
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e002      	b.n	80006e2 <delay+0x12>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b08      	cmp	r3, #8
 80006e6:	ddf9      	ble.n	80006dc <delay+0xc>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <startCondition>:


void startCondition()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0


	SDA->BSRR = (uint32_t)SDAP << 16U ;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <startCondition+0x24>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <startCondition+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	0412      	lsls	r2, r2, #16
 8000706:	619a      	str	r2, [r3, #24]
	delay();
 8000708:	f7ff ffe2 	bl	80006d0 <delay>
	SCL->BSRR = (uint32_t)SCLP << 16U ;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <startCondition+0x2c>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <startCondition+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	619a      	str	r2, [r3, #24]


}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000006c 	.word	0x2000006c
 8000720:	20000068 	.word	0x20000068
 8000724:	20000064 	.word	0x20000064
 8000728:	20000074 	.word	0x20000074

0800072c <stopCondition>:

void stopCondition()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	changeSDAState(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 f83d 	bl	80007b0 <changeSDAState>
	SCL->BSRR = SCLP;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <stopCondition+0x2c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <stopCondition+0x30>)
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	619a      	str	r2, [r3, #24]
	delay();
 8000740:	f7ff ffc6 	bl	80006d0 <delay>
	SDA->BSRR = SDAP;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <stopCondition+0x34>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <stopCondition+0x38>)
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	619a      	str	r2, [r3, #24]
	delay();
 800074e:	f7ff ffbf 	bl	80006d0 <delay>

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000074 	.word	0x20000074
 800075c:	20000064 	.word	0x20000064
 8000760:	20000068 	.word	0x20000068
 8000764:	2000006c 	.word	0x2000006c

08000768 <repeatedStartCondition>:


void repeatedStartCondition()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	changeSDAState(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 f81f 	bl	80007b0 <changeSDAState>
	SDA->BSRR = SDAP;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <repeatedStartCondition+0x38>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <repeatedStartCondition+0x3c>)
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	619a      	str	r2, [r3, #24]
	delay();
 800077c:	f7ff ffa8 	bl	80006d0 <delay>
	SCL->BSRR = SCLP;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <repeatedStartCondition+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <repeatedStartCondition+0x44>)
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	619a      	str	r2, [r3, #24]
	delay();
 800078a:	f7ff ffa1 	bl	80006d0 <delay>
	SDA->BSRR = (uint32_t)SDAP << 16U ;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <repeatedStartCondition+0x3c>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <repeatedStartCondition+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	0412      	lsls	r2, r2, #16
 8000798:	619a      	str	r2, [r3, #24]

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000068 	.word	0x20000068
 80007a4:	2000006c 	.word	0x2000006c
 80007a8:	20000074 	.word	0x20000074
 80007ac:	20000064 	.word	0x20000064

080007b0 <changeSDAState>:


void changeSDAState(int selection)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]


	if(selection==0)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d109      	bne.n	80007d2 <changeSDAState+0x22>
	{
		SDAPinInit.Mode = GPIO_MODE_INPUT;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <changeSDAState+0x80>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
		HAL_GPIO_Init(SDA, &SDAPinInit);
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <changeSDAState+0x84>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4919      	ldr	r1, [pc, #100]	; (8000830 <changeSDAState+0x80>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fd6e 	bl	80012ac <HAL_GPIO_Init>
 80007d0:	e01d      	b.n	800080e <changeSDAState+0x5e>
	}
	else if(selection==1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d11a      	bne.n	800080e <changeSDAState+0x5e>
	{
		SCL->BSRR = (uint32_t)SCLP << 16U ;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <changeSDAState+0x88>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <changeSDAState+0x8c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0412      	lsls	r2, r2, #16
 80007e2:	619a      	str	r2, [r3, #24]
		SDAPinInit.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <changeSDAState+0x80>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
		HAL_GPIO_Init(SDA, &SDAPinInit);
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <changeSDAState+0x84>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4910      	ldr	r1, [pc, #64]	; (8000830 <changeSDAState+0x80>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fd5b 	bl	80012ac <HAL_GPIO_Init>
		SDA->BSRR = (uint32_t)SDAP << 16U ;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <changeSDAState+0x90>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <changeSDAState+0x84>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	0412      	lsls	r2, r2, #16
 8000800:	619a      	str	r2, [r3, #24]
		SCL->BSRR = (uint32_t)SCLP << 16U ;
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <changeSDAState+0x88>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <changeSDAState+0x8c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	0412      	lsls	r2, r2, #16
 800080c:	619a      	str	r2, [r3, #24]


	}

	for(int i=0;i<5;i++)
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e004      	b.n	800081e <changeSDAState+0x6e>
		delay();
 8000814:	f7ff ff5c 	bl	80006d0 <delay>
	for(int i=0;i<5;i++)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b04      	cmp	r3, #4
 8000822:	ddf7      	ble.n	8000814 <changeSDAState+0x64>

}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028
 8000834:	20000068 	.word	0x20000068
 8000838:	20000064 	.word	0x20000064
 800083c:	20000074 	.word	0x20000074
 8000840:	2000006c 	.word	0x2000006c

08000844 <waitACK>:



bool waitACK(uint32_t timeOut)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
   changeSDAState(0);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ffaf 	bl	80007b0 <changeSDAState>

   int time=HAL_GetTick();
 8000852:	f000 fc39 	bl	80010c8 <HAL_GetTick>
 8000856:	4603      	mov	r3, r0
 8000858:	60bb      	str	r3, [r7, #8]
   bool ACK=0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]

	   SCL->BSRR = SCLP;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <waitACK+0x64>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <waitACK+0x68>)
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	619a      	str	r2, [r3, #24]
	   delay();
 8000868:	f7ff ff32 	bl	80006d0 <delay>
	   if(!(HAL_GPIO_ReadPin(SDA, SDAP)))
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <waitACK+0x6c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <waitACK+0x70>)
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	b292      	uxth	r2, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f000 feb3 	bl	80015e4 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <waitACK+0x4a>
	   {
		   ACK=1;
 8000884:	2301      	movs	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
		   changeSDAState(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff ff91 	bl	80007b0 <changeSDAState>

	   }

	   SCL->BSRR = (uint32_t)SCLP << 16U ;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <waitACK+0x68>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <waitACK+0x64>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	619a      	str	r2, [r3, #24]
	   delay();
 800089a:	f7ff ff19 	bl	80006d0 <delay>

   return ACK;
 800089e:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000074 	.word	0x20000074
 80008ac:	20000064 	.word	0x20000064
 80008b0:	20000068 	.word	0x20000068
 80008b4:	2000006c 	.word	0x2000006c

080008b8 <writeReadBitSet>:

bool writeReadBitSet(uint8_t address,bool selection,int32_t timeOut)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	603a      	str	r2, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	460b      	mov	r3, r1
 80008c6:	71bb      	strb	r3, [r7, #6]
	bool successfullACK=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	75fb      	strb	r3, [r7, #23]
	int writeAddress=0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
	if(selection)
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <writeReadBitSet+0x28>
	    writeAddress=(address<<1) & 0xFE;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	e004      	b.n	80008ea <writeReadBitSet+0x32>
	else
		writeAddress=(address<<1) | 0x01;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	613b      	str	r3, [r7, #16]

	startCondition();
 80008ea:	f7ff ff05 	bl	80006f8 <startCondition>

	for(int i=7;i>=0;i--)
 80008ee:	2307      	movs	r3, #7
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e025      	b.n	8000940 <writeReadBitSet+0x88>
	{
		if( (writeAddress>>i)&0x01)
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	fa42 f303 	asr.w	r3, r2, r3
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <writeReadBitSet+0x58>
			SDA->BSRR = SDAP;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <writeReadBitSet+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <writeReadBitSet+0xbc>)
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	619a      	str	r2, [r3, #24]
 800090e:	e005      	b.n	800091c <writeReadBitSet+0x64>
		else
			SDA->BSRR = (uint32_t)SDAP << 16U ;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <writeReadBitSet+0xbc>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <writeReadBitSet+0xb8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	0412      	lsls	r2, r2, #16
 800091a:	619a      	str	r2, [r3, #24]


		delay();
 800091c:	f7ff fed8 	bl	80006d0 <delay>
		SCL->BSRR = SCLP;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <writeReadBitSet+0xc0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a15      	ldr	r2, [pc, #84]	; (800097c <writeReadBitSet+0xc4>)
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	619a      	str	r2, [r3, #24]
		delay();
 800092a:	f7ff fed1 	bl	80006d0 <delay>
		SCL->BSRR = (uint32_t)SCLP << 16U ;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <writeReadBitSet+0xc4>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <writeReadBitSet+0xc0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	0412      	lsls	r2, r2, #16
 8000938:	619a      	str	r2, [r3, #24]
	for(int i=7;i>=0;i--)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3b01      	subs	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	dad6      	bge.n	80008f4 <writeReadBitSet+0x3c>


	}

	if(waitACK(timeOut))
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff7b 	bl	8000844 <waitACK>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <writeReadBitSet+0xa0>
		successfullACK=1;
 8000954:	2301      	movs	r3, #1
 8000956:	75fb      	strb	r3, [r7, #23]
    if(selection == 1)
 8000958:	79bb      	ldrb	r3, [r7, #6]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <writeReadBitSet+0xac>
    	changeSDAState(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ff26 	bl	80007b0 <changeSDAState>
	return successfullACK;
 8000964:	7dfb      	ldrb	r3, [r7, #23]

}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000068 	.word	0x20000068
 8000974:	2000006c 	.word	0x2000006c
 8000978:	20000074 	.word	0x20000074
 800097c:	20000064 	.word	0x20000064

08000980 <writeBytes>:

bool writeBytes(uint8_t value,int32_t timeOut)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
	bool successfullACK=0;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

	SCL->BSRR = (uint32_t)SCLP << 16U ;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <writeBytes+0x90>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <writeBytes+0x94>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	0412      	lsls	r2, r2, #16
 800099a:	619a      	str	r2, [r3, #24]

	for(int i=7;i>=0;i--)
 800099c:	2307      	movs	r3, #7
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	e025      	b.n	80009ee <writeBytes+0x6e>
	{
		if( (value>>i)&0x01)
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	fa42 f303 	asr.w	r3, r2, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <writeBytes+0x3e>
			SDA->BSRR = SDAP;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <writeBytes+0x98>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <writeBytes+0x9c>)
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	619a      	str	r2, [r3, #24]
 80009bc:	e005      	b.n	80009ca <writeBytes+0x4a>
		else
			SDA->BSRR = (uint32_t)SDAP << 16U ;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <writeBytes+0x9c>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <writeBytes+0x98>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	0412      	lsls	r2, r2, #16
 80009c8:	619a      	str	r2, [r3, #24]

		delay();
 80009ca:	f7ff fe81 	bl	80006d0 <delay>

		SCL->BSRR = SCLP;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <writeBytes+0x94>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <writeBytes+0x90>)
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	619a      	str	r2, [r3, #24]
		delay();
 80009d8:	f7ff fe7a 	bl	80006d0 <delay>
		SCL->BSRR = (uint32_t)SCLP << 16U ;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <writeBytes+0x90>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <writeBytes+0x94>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0412      	lsls	r2, r2, #16
 80009e6:	619a      	str	r2, [r3, #24]
	for(int i=7;i>=0;i--)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dad6      	bge.n	80009a2 <writeBytes+0x22>

	}

	if(waitACK(timeOut))
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff24 	bl	8000844 <waitACK>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <writeBytes+0x86>
		successfullACK=1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]

	return successfullACK;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000064 	.word	0x20000064
 8000a14:	20000074 	.word	0x20000074
 8000a18:	20000068 	.word	0x20000068
 8000a1c:	2000006c 	.word	0x2000006c

08000a20 <readLine>:

uint8_t readLine()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	 changeSDAState(0);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fec2 	bl	80007b0 <changeSDAState>
	 uint8_t data=0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	71fb      	strb	r3, [r7, #7]
	 uint8_t counter=0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	71bb      	strb	r3, [r7, #6]
	 bool ACK=0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	717b      	strb	r3, [r7, #5]
	 while(1)
	 {

		 SCL->BSRR = SCLP;
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <readLine+0x74>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <readLine+0x78>)
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	619a      	str	r2, [r3, #24]
         delay();
 8000a42:	f7ff fe45 	bl	80006d0 <delay>
		 data |= HAL_GPIO_ReadPin(SDA, SDAP);
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <readLine+0x7c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <readLine+0x80>)
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fdc6 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	71fb      	strb	r3, [r7, #7]
		 counter++;
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	3301      	adds	r3, #1
 8000a66:	71bb      	strb	r3, [r7, #6]

		 SCL->BSRR = (uint32_t)SCLP << 16U ;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <readLine+0x78>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <readLine+0x74>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	0412      	lsls	r2, r2, #16
 8000a72:	619a      	str	r2, [r3, #24]
		 delay();
 8000a74:	f7ff fe2c 	bl	80006d0 <delay>


		 if(counter==8)
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d101      	bne.n	8000a82 <readLine+0x62>
			 return data;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	e003      	b.n	8000a8a <readLine+0x6a>

         data=data<<1;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
		 SCL->BSRR = SCLP;
 8000a88:	e7d6      	b.n	8000a38 <readLine+0x18>

	 }



}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000074 	.word	0x20000074
 8000a98:	20000064 	.word	0x20000064
 8000a9c:	20000068 	.word	0x20000068
 8000aa0:	2000006c 	.word	0x2000006c

08000aa4 <sendACK>:

void sendACK(int select)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	 changeSDAState(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe7f 	bl	80007b0 <changeSDAState>

	 if(select == 1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <sendACK+0x22>
		 SDA->BSRR = (uint32_t)SDAP << 16U ;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <sendACK+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <sendACK+0x58>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	0412      	lsls	r2, r2, #16
 8000ac2:	619a      	str	r2, [r3, #24]
 8000ac4:	e004      	b.n	8000ad0 <sendACK+0x2c>
	 else
		 SDA->BSRR = SDAP  ;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <sendACK+0x58>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <sendACK+0x54>)
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	619a      	str	r2, [r3, #24]

     delay();
 8000ad0:	f7ff fdfe 	bl	80006d0 <delay>

     SCL->BSRR = SCLP;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <sendACK+0x5c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <sendACK+0x60>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	619a      	str	r2, [r3, #24]

	 delay();
 8000ade:	f7ff fdf7 	bl	80006d0 <delay>

	 SCL->BSRR = (uint32_t)SCLP << 16U ;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <sendACK+0x60>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <sendACK+0x5c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0412      	lsls	r2, r2, #16
 8000aec:	619a      	str	r2, [r3, #24]


}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000006c 	.word	0x2000006c
 8000afc:	20000068 	.word	0x20000068
 8000b00:	20000074 	.word	0x20000074
 8000b04:	20000064 	.word	0x20000064

08000b08 <I2C_DeviceReady>:

HAL_StatusTypeDef I2C_DeviceReady(uint8_t deviceAddress)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if(!writeReadBitSet(deviceAddress,1,500))
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fecc 	bl	80008b8 <writeReadBitSet>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f083 0301 	eor.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <I2C_DeviceReady+0x2c>
	{
		resetIO();
 8000b2c:	f7ff fdb6 	bl	800069c <resetIO>
		return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <I2C_DeviceReady+0x32>
	}

	resetIO();
 8000b34:	f7ff fdb2 	bl	800069c <resetIO>
	return HAL_OK;
 8000b38:	2300      	movs	r3, #0

}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <I2C_Write>:
bool I2C_Write(uint8_t deviceAddress,uint16_t registerAddress,uint8_t regLength,uint8_t *sendData,uint8_t dataNumber,uint32_t timeOut)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	80bb      	strh	r3, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	71bb      	strb	r3, [r7, #6]

	if(!writeReadBitSet(deviceAddress,1,500))
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff feaa 	bl	80008b8 <writeReadBitSet>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f083 0301 	eor.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <I2C_Write+0x36>
	{
		resetIO();
 8000b70:	f7ff fd94 	bl	800069c <resetIO>
		return false;
 8000b74:	2300      	movs	r3, #0
 8000b76:	e057      	b.n	8000c28 <I2C_Write+0xe6>
	}

    if(registerAddress>1)
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d923      	bls.n	8000bc6 <I2C_Write+0x84>
    {
		if(!writeBytes( (registerAddress>>8),timeOut))
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fef8 	bl	8000980 <writeBytes>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f083 0301 	eor.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <I2C_Write+0x62>
		{
			resetIO();
 8000b9c:	f7ff fd7e 	bl	800069c <resetIO>
			return false;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e041      	b.n	8000c28 <I2C_Write+0xe6>
		}

		if(!writeBytes( (registerAddress),timeOut))
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fee7 	bl	8000980 <writeBytes>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f083 0301 	eor.w	r3, r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d014      	beq.n	8000be8 <I2C_Write+0xa6>
		{
			resetIO();
 8000bbe:	f7ff fd6d 	bl	800069c <resetIO>
			return false;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e030      	b.n	8000c28 <I2C_Write+0xe6>
		}
    }

    else
    {
		if(!writeBytes( (registerAddress),timeOut))
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fed6 	bl	8000980 <writeBytes>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f083 0301 	eor.w	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <I2C_Write+0xa6>
		{
			resetIO();
 8000be0:	f7ff fd5c 	bl	800069c <resetIO>
			return false;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e01f      	b.n	8000c28 <I2C_Write+0xe6>
		}

    }

	for(int i=0;i<dataNumber;i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e015      	b.n	8000c1a <I2C_Write+0xd8>
	{
		if(!writeBytes(sendData[i],timeOut))
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fec0 	bl	8000980 <writeBytes>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <I2C_Write+0xd2>
		{
			resetIO();
 8000c0c:	f7ff fd46 	bl	800069c <resetIO>
			return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e009      	b.n	8000c28 <I2C_Write+0xe6>
	for(int i=0;i<dataNumber;i++)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	7e3b      	ldrb	r3, [r7, #24]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbe5      	blt.n	8000bee <I2C_Write+0xac>
		}

	}

	stopCondition();
 8000c22:	f7ff fd83 	bl	800072c <stopCondition>
	return true;
 8000c26:	2301      	movs	r3, #1

}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <I2C_Read>:

bool I2C_Read (uint8_t deviceAddress,uint16_t registerAddress,uint8_t regLength,uint8_t *receiveBuffer,uint8_t dataNumber,uint32_t timeOut)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	80bb      	strh	r3, [r7, #4]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]

	if(!writeReadBitSet(deviceAddress,1,500))
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe33 	bl	80008b8 <writeReadBitSet>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f083 0301 	eor.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <I2C_Read+0x36>
	{
		resetIO();
 8000c5e:	f7ff fd1d 	bl	800069c <resetIO>
		return false;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e071      	b.n	8000d4a <I2C_Read+0x11a>
	}

	if(regLength>1)
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d923      	bls.n	8000cb4 <I2C_Read+0x84>
	{
		if(!writeBytes(registerAddress>>8,timeOut))
 8000c6c:	88bb      	ldrh	r3, [r7, #4]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fe81 	bl	8000980 <writeBytes>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f083 0301 	eor.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <I2C_Read+0x62>
		{
			resetIO();
 8000c8a:	f7ff fd07 	bl	800069c <resetIO>
			return false;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e05b      	b.n	8000d4a <I2C_Read+0x11a>
		}
		if(!writeBytes(registerAddress,timeOut))
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe70 	bl	8000980 <writeBytes>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d016      	beq.n	8000cda <I2C_Read+0xaa>
		{
			resetIO();
 8000cac:	f7ff fcf6 	bl	800069c <resetIO>
			return false;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e04a      	b.n	8000d4a <I2C_Read+0x11a>
		}
	}
	else
	{
		if(!writeBytes(registerAddress>>8,timeOut))
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	0a1b      	lsrs	r3, r3, #8
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fe5d 	bl	8000980 <writeBytes>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <I2C_Read+0xaa>
		{
			resetIO();
 8000cd2:	f7ff fce3 	bl	800069c <resetIO>
			return false;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e037      	b.n	8000d4a <I2C_Read+0x11a>
		}

	}


	repeatedStartCondition();
 8000cda:	f7ff fd45 	bl	8000768 <repeatedStartCondition>

	if(!writeReadBitSet(deviceAddress,0,500))
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fde6 	bl	80008b8 <writeReadBitSet>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <I2C_Read+0xd0>
	{
			resetIO();
 8000cf8:	f7ff fcd0 	bl	800069c <resetIO>
			return false;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e024      	b.n	8000d4a <I2C_Read+0x11a>
	}

    for(int i=0;i<dataNumber;i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e015      	b.n	8000d32 <I2C_Read+0x102>
    {
    	receiveBuffer[i]=readLine();
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	18d4      	adds	r4, r2, r3
 8000d0c:	f7ff fe88 	bl	8000a20 <readLine>
 8000d10:	4603      	mov	r3, r0
 8000d12:	7023      	strb	r3, [r4, #0]
    	if(i != dataNumber-1)
 8000d14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d005      	beq.n	8000d2c <I2C_Read+0xfc>
    	{
    		sendACK(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff febf 	bl	8000aa4 <sendACK>
    		changeSDAState(0);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fd42 	bl	80007b0 <changeSDAState>
    for(int i=0;i<dataNumber;i++)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbe4      	blt.n	8000d06 <I2C_Read+0xd6>
    	}

    }

    sendACK(0);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff feb1 	bl	8000aa4 <sendACK>
	stopCondition();
 8000d42:	f7ff fcf3 	bl	800072c <stopCondition>
	int debug=0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]



}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
	...

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 f94f 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f837 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f89d 	bl	8000ea0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  	  	  	  	  	  /*   USAGE EXAMPLE*/

  I2C_Init( GPIOB,GPIO_PIN_10,GPIOB,GPIO_PIN_11);   // I2C Pin Init GPIOB10 ==>SDA, B11 ==> SCL
 8000d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <main+0x6c>)
 8000d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <main+0x6c>)
 8000d72:	f7ff fba5 	bl	80004c0 <I2C_Init>

  deviceFound =I2C_DeviceReady(deviceAddr);
 8000d76:	20a1      	movs	r0, #161	; 0xa1
 8000d78:	f7ff fec6 	bl	8000b08 <I2C_DeviceReady>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <main+0x70>)
 8000d82:	701a      	strb	r2, [r3, #0]
  if(deviceFound != HAL_OK)
  {
     //ERROR. Device not found
  }

  registerSet[0] = 0x01;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <main+0x74>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
  registerSet[1] = 0x02;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <main+0x74>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	705a      	strb	r2, [r3, #1]
  I2C_Write(deviceAddr,0x31,1,registerSet,2,500);  // write two value of registerSet arrays to 0x31 register in device.
 8000d90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2302      	movs	r3, #2
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <main+0x74>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2131      	movs	r1, #49	; 0x31
 8000da0:	20a1      	movs	r0, #161	; 0xa1
 8000da2:	f7ff fece 	bl	8000b42 <I2C_Write>
  I2C_Read(deviceAddr,0x31,1,registerRead,2,500);  // Read 0x31 register in device and write this values to registerRead array
 8000da6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2302      	movs	r3, #2
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <main+0x78>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	2131      	movs	r1, #49	; 0x31
 8000db6:	20a1      	movs	r0, #161	; 0xa1
 8000db8:	f7ff ff3a 	bl	8000c30 <I2C_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <main+0x68>
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	20000086 	.word	0x20000086
 8000dc8:	20000088 	.word	0x20000088
 8000dcc:	2000007c 	.word	0x2000007c

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b094      	sub	sp, #80	; 0x50
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	2230      	movs	r2, #48	; 0x30
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f896 	bl	8001f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <SystemClock_Config+0xc8>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <SystemClock_Config+0xc8>)
 8000dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <SystemClock_Config+0xc8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <SystemClock_Config+0xcc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <SystemClock_Config+0xcc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <SystemClock_Config+0xcc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e36:	2302      	movs	r3, #2
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e40:	2304      	movs	r3, #4
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e44:	2354      	movs	r3, #84	; 0x54
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fbf7 	bl	8001648 <HAL_RCC_OscConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e60:	f000 f838 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fe59 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e8c:	f000 f822 	bl	8000ed4 <Error_Handler>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3750      	adds	r7, #80	; 0x50
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_GPIO_Init+0x30>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0x30>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_GPIO_Init+0x30>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f000 f890 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ffd7 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f000 ff77 	bl	8001ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff febb 	bl	8000d54 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fec:	08001f58 	.word	0x08001f58
  ldr r2, =_sbss
 8000ff0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff4:	20000098 	.word	0x20000098

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f90d 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	200f      	movs	r0, #15
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff ff56 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f917 	bl	8001292 <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 f8ed 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000094 	.word	0x20000094

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000094 	.word	0x20000094

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff47 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff5c 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffb0 	bl	8001200 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e16b      	b.n	80015a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 815a 	bne.w	800159a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b4 	beq.w	800159a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x310>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x314>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x318>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x31c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x320>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x21a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x324>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x216>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x328>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x212>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x32c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x20e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x330>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x20a>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014b6:	2308      	movs	r3, #8
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x310>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x334>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae90 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e264      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d075      	beq.n	8001752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001666:	4ba3      	ldr	r3, [pc, #652]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b04      	cmp	r3, #4
 8001670:	d00c      	beq.n	800168c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001672:	4ba0      	ldr	r3, [pc, #640]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167a:	2b08      	cmp	r3, #8
 800167c:	d112      	bne.n	80016a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167e:	4b9d      	ldr	r3, [pc, #628]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800168a:	d10b      	bne.n	80016a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	4b99      	ldr	r3, [pc, #612]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d05b      	beq.n	8001750 <HAL_RCC_OscConfig+0x108>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d157      	bne.n	8001750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e23f      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ac:	d106      	bne.n	80016bc <HAL_RCC_OscConfig+0x74>
 80016ae:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a90      	ldr	r2, [pc, #576]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e01d      	b.n	80016f8 <HAL_RCC_OscConfig+0xb0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x98>
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a87      	ldr	r2, [pc, #540]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0xb0>
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a80      	ldr	r2, [pc, #512]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fce2 	bl	80010c8 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fcde 	bl	80010c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e204      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xc0>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fcce 	bl	80010c8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fcca 	bl	80010c8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1f0      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0xe8>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d063      	beq.n	8001826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176a:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001772:	2b08      	cmp	r3, #8
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x152>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e1c4      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4952      	ldr	r1, [pc, #328]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_RCC_OscConfig+0x2b0>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff fc83 	bl	80010c8 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fc7f 	bl	80010c8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1a5      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4940      	ldr	r1, [pc, #256]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x2b0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fc62 	bl	80010c8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fc5e 	bl	80010c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e184      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d030      	beq.n	8001894 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d016      	beq.n	8001868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_RCC_OscConfig+0x2b4>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff fc42 	bl	80010c8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001848:	f7ff fc3e 	bl	80010c8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e164      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x200>
 8001866:	e015      	b.n	8001894 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_RCC_OscConfig+0x2b4>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff fc2b 	bl	80010c8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fc27 	bl	80010c8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e14d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a0 	beq.w	80019e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x2b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d121      	bne.n	8001922 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_RCC_OscConfig+0x2b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_RCC_OscConfig+0x2b8>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fbed 	bl	80010c8 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	e011      	b.n	8001916 <HAL_RCC_OscConfig+0x2ce>
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	42470000 	.word	0x42470000
 80018fc:	42470e80 	.word	0x42470e80
 8001900:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001904:	f7ff fbe0 	bl	80010c8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e106      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_RCC_OscConfig+0x4e4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d106      	bne.n	8001938 <HAL_RCC_OscConfig+0x2f0>
 800192a:	4b81      	ldr	r3, [pc, #516]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a80      	ldr	r2, [pc, #512]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	e01c      	b.n	8001972 <HAL_RCC_OscConfig+0x32a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b05      	cmp	r3, #5
 800193e:	d10c      	bne.n	800195a <HAL_RCC_OscConfig+0x312>
 8001940:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	4b78      	ldr	r3, [pc, #480]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	e00b      	b.n	8001972 <HAL_RCC_OscConfig+0x32a>
 800195a:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a74      	ldr	r2, [pc, #464]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a71      	ldr	r2, [pc, #452]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	f023 0304 	bic.w	r3, r3, #4
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d015      	beq.n	80019a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff fba5 	bl	80010c8 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff fba1 	bl	80010c8 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0c5      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ee      	beq.n	8001982 <HAL_RCC_OscConfig+0x33a>
 80019a4:	e014      	b.n	80019d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fb8f 	bl	80010c8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff fb8b 	bl	80010c8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0af      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ee      	bne.n	80019ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d105      	bne.n	80019e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a55      	ldr	r2, [pc, #340]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 809b 	beq.w	8001b22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d05c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d141      	bne.n	8001a84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x4ec>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fb5f 	bl	80010c8 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fb5b 	bl	80010c8 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e081      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	019b      	lsls	r3, r3, #6
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	061b      	lsls	r3, r3, #24
 8001a50:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x4ec>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb34 	bl	80010c8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff fb30 	bl	80010c8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e056      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x41c>
 8001a82:	e04e      	b.n	8001b22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_OscConfig+0x4ec>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fb1d 	bl	80010c8 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff fb19 	bl	80010c8 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e03f      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x44a>
 8001ab0:	e037      	b.n	8001b22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e032      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d028      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d121      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d11a      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aee:	4013      	ands	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d111      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	3b01      	subs	r3, #1
 8001b08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	42470060 	.word	0x42470060

08001b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0cc      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d90c      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b65      	ldr	r3, [pc, #404]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0b8      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	494d      	ldr	r1, [pc, #308]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d044      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d119      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e067      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4934      	ldr	r1, [pc, #208]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c28:	f7ff fa4e 	bl	80010c8 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff fa4a 	bl	80010c8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e04f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1eb      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d20c      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e032      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4916      	ldr	r1, [pc, #88]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cbe:	f000 f821 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	490a      	ldr	r1, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f9ae 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08001f38 	.word	0x08001f38
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	2300      	movs	r3, #0
 8001d16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1c:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d00d      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x40>
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	f200 80bd 	bhi.w	8001ea8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x34>
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d36:	e0b7      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b61      	ldr	r3, [pc, #388]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d3a:	60bb      	str	r3, [r7, #8]
       break;
 8001d3c:	e0b7      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d3e:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d40:	60bb      	str	r3, [r7, #8]
      break;
 8001d42:	e0b4      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d44:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d04d      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5a:	4b58      	ldr	r3, [pc, #352]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	461a      	mov	r2, r3
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	ea02 0800 	and.w	r8, r2, r0
 8001d72:	ea03 0901 	and.w	r9, r3, r1
 8001d76:	4640      	mov	r0, r8
 8001d78:	4649      	mov	r1, r9
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	014b      	lsls	r3, r1, #5
 8001d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d88:	0142      	lsls	r2, r0, #5
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	ebb0 0008 	subs.w	r0, r0, r8
 8001d92:	eb61 0109 	sbc.w	r1, r1, r9
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	018b      	lsls	r3, r1, #6
 8001da0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001da4:	0182      	lsls	r2, r0, #6
 8001da6:	1a12      	subs	r2, r2, r0
 8001da8:	eb63 0301 	sbc.w	r3, r3, r1
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	00d9      	lsls	r1, r3, #3
 8001db6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dba:	00d0      	lsls	r0, r2, #3
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	eb12 0208 	adds.w	r2, r2, r8
 8001dc4:	eb43 0309 	adc.w	r3, r3, r9
 8001dc8:	f04f 0000 	mov.w	r0, #0
 8001dcc:	f04f 0100 	mov.w	r1, #0
 8001dd0:	0259      	lsls	r1, r3, #9
 8001dd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dd6:	0250      	lsls	r0, r2, #9
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	f7fe f9ee 	bl	80001c8 <__aeabi_uldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4613      	mov	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e04a      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	099b      	lsrs	r3, r3, #6
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	ea02 0400 	and.w	r4, r2, r0
 8001e0e:	ea03 0501 	and.w	r5, r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	014b      	lsls	r3, r1, #5
 8001e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e24:	0142      	lsls	r2, r0, #5
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	1b00      	subs	r0, r0, r4
 8001e2c:	eb61 0105 	sbc.w	r1, r1, r5
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	018b      	lsls	r3, r1, #6
 8001e3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e3e:	0182      	lsls	r2, r0, #6
 8001e40:	1a12      	subs	r2, r2, r0
 8001e42:	eb63 0301 	sbc.w	r3, r3, r1
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	00d9      	lsls	r1, r3, #3
 8001e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e54:	00d0      	lsls	r0, r2, #3
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	1912      	adds	r2, r2, r4
 8001e5c:	eb45 0303 	adc.w	r3, r5, r3
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	0299      	lsls	r1, r3, #10
 8001e6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e6e:	0290      	lsls	r0, r2, #10
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f7fe f9a2 	bl	80001c8 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
      break;
 8001ea6:	e002      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001eaa:	60bb      	str	r3, [r7, #8]
      break;
 8001eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eae:	68bb      	ldr	r3, [r7, #8]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <__libc_init_array>:
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	4d0d      	ldr	r5, [pc, #52]	; (8001f00 <__libc_init_array+0x38>)
 8001ecc:	4c0d      	ldr	r4, [pc, #52]	; (8001f04 <__libc_init_array+0x3c>)
 8001ece:	1b64      	subs	r4, r4, r5
 8001ed0:	10a4      	asrs	r4, r4, #2
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	42a6      	cmp	r6, r4
 8001ed6:	d109      	bne.n	8001eec <__libc_init_array+0x24>
 8001ed8:	4d0b      	ldr	r5, [pc, #44]	; (8001f08 <__libc_init_array+0x40>)
 8001eda:	4c0c      	ldr	r4, [pc, #48]	; (8001f0c <__libc_init_array+0x44>)
 8001edc:	f000 f820 	bl	8001f20 <_init>
 8001ee0:	1b64      	subs	r4, r4, r5
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	2600      	movs	r6, #0
 8001ee6:	42a6      	cmp	r6, r4
 8001ee8:	d105      	bne.n	8001ef6 <__libc_init_array+0x2e>
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
 8001eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef0:	4798      	blx	r3
 8001ef2:	3601      	adds	r6, #1
 8001ef4:	e7ee      	b.n	8001ed4 <__libc_init_array+0xc>
 8001ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001efa:	4798      	blx	r3
 8001efc:	3601      	adds	r6, #1
 8001efe:	e7f2      	b.n	8001ee6 <__libc_init_array+0x1e>
 8001f00:	08001f50 	.word	0x08001f50
 8001f04:	08001f50 	.word	0x08001f50
 8001f08:	08001f50 	.word	0x08001f50
 8001f0c:	08001f54 	.word	0x08001f54

08001f10 <memset>:
 8001f10:	4402      	add	r2, r0
 8001f12:	4603      	mov	r3, r0
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d100      	bne.n	8001f1a <memset+0xa>
 8001f18:	4770      	bx	lr
 8001f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f1e:	e7f9      	b.n	8001f14 <memset+0x4>

08001f20 <_init>:
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f22:	bf00      	nop
 8001f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f26:	bc08      	pop	{r3}
 8001f28:	469e      	mov	lr, r3
 8001f2a:	4770      	bx	lr

08001f2c <_fini>:
 8001f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2e:	bf00      	nop
 8001f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f32:	bc08      	pop	{r3}
 8001f34:	469e      	mov	lr, r3
 8001f36:	4770      	bx	lr
