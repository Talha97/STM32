
HAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008140  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080082d0  080082d0  000182d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d8  080085d8  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e0  080085e0  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080085e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000118  08008700  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08008700  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001054c  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002366  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00033a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021da3  00000000  00000000  00034a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c75d  00000000  00000000  000567cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd0d8  00000000  00000000  00062f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  0013007c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082b8 	.word	0x080082b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	080082b8 	.word	0x080082b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f94d 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f005 ff3c 	bl	8006de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f965 	bl	800126a <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f92d 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000ac 	.word	0x200000ac
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	200001a8 	.word	0x200001a8

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200001a8 	.word	0x200001a8

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff3e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff8e 	bl	8001154 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5d 	bl	8001100 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff31 	bl	80010c4 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa2 	bl	80011bc <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_FLASH_Program+0xa0>)
 8001298:	7e1b      	ldrb	r3, [r3, #24]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_FLASH_Program+0x1e>
 800129e:	2302      	movs	r3, #2
 80012a0:	e03b      	b.n	800131a <HAL_FLASH_Program+0x96>
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_FLASH_Program+0xa0>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ac:	f000 f870 	bl	8001390 <FLASH_WaitForLastOperation>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d12b      	bne.n	8001312 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012c0:	783b      	ldrb	r3, [r7, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f000 f919 	bl	80014fc <FLASH_Program_Byte>
 80012ca:	e016      	b.n	80012fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d105      	bne.n	80012de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012d2:	883b      	ldrh	r3, [r7, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	68b8      	ldr	r0, [r7, #8]
 80012d8:	f000 f8ec 	bl	80014b4 <FLASH_Program_HalfWord>
 80012dc:	e00d      	b.n	80012fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d105      	bne.n	80012f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f000 f8c1 	bl	8001470 <FLASH_Program_Word>
 80012ee:	e004      	b.n	80012fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80012f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f000 f88b 	bl	8001410 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012fe:	f000 f847 	bl	8001390 <FLASH_WaitForLastOperation>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_FLASH_Program+0xa4>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_FLASH_Program+0xa4>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <HAL_FLASH_Program+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001318:	7dfb      	ldrb	r3, [r7, #23]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001ac 	.word	0x200001ac
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_FLASH_Unlock+0x38>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da0b      	bge.n	8001356 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_FLASH_Unlock+0x38>)
 8001340:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_FLASH_Unlock+0x3c>)
 8001342:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_FLASH_Unlock+0x38>)
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_FLASH_Unlock+0x40>)
 8001348:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_FLASH_Unlock+0x38>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da01      	bge.n	8001356 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001356:	79fb      	ldrb	r3, [r7, #7]
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40023c00 	.word	0x40023c00
 8001368:	45670123 	.word	0x45670123
 800136c:	cdef89ab 	.word	0xcdef89ab

08001370 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_FLASH_Lock+0x1c>)
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_FLASH_Lock+0x1c>)
 800137a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800137e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40023c00 	.word	0x40023c00

08001390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <FLASH_WaitForLastOperation+0x78>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013a2:	f7ff fe2f 	bl	8001004 <HAL_GetTick>
 80013a6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013a8:	e010      	b.n	80013cc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d00c      	beq.n	80013cc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <FLASH_WaitForLastOperation+0x38>
 80013b8:	f7ff fe24 	bl	8001004 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d201      	bcs.n	80013cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e019      	b.n	8001400 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1e8      	bne.n	80013aa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013f6:	f000 f8a3 	bl	8001540 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
  
}  
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200001ac 	.word	0x200001ac
 800140c:	40023c00 	.word	0x40023c00

08001410 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001410:	b490      	push	{r4, r7}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <FLASH_Program_DoubleWord+0x5c>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <FLASH_Program_DoubleWord+0x5c>)
 8001422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <FLASH_Program_DoubleWord+0x5c>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	4a0f      	ldr	r2, [pc, #60]	; (800146c <FLASH_Program_DoubleWord+0x5c>)
 800142e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001432:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <FLASH_Program_DoubleWord+0x5c>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <FLASH_Program_DoubleWord+0x5c>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001446:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800144a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	f04f 0400 	mov.w	r4, #0
 8001456:	0013      	movs	r3, r2
 8001458:	2400      	movs	r4, #0
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	3204      	adds	r2, #4
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bc90      	pop	{r4, r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <FLASH_Program_Word+0x40>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <FLASH_Program_Word+0x40>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001490:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	801a      	strh	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023c00 	.word	0x40023c00

080014fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <FLASH_Program_Byte+0x40>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <FLASH_Program_Byte+0x40>)
 800150e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <FLASH_Program_Byte+0x40>)
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <FLASH_Program_Byte+0x40>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <FLASH_Program_Byte+0x40>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Program_Byte+0x40>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 800155a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 800155e:	2210      	movs	r2, #16
 8001560:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001578:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 800157c:	2220      	movs	r2, #32
 800157e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001596:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	60da      	str	r2, [r3, #12]
  }
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40023c00 	.word	0x40023c00
 80015e8:	200001ac 	.word	0x200001ac

080015ec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e010      	b.n	800162a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d103      	bne.n	8001616 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800160e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e009      	b.n	800162a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d103      	bne.n	8001624 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800161c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e002      	b.n	800162a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001624:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001628:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001634:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	490f      	ldr	r1, [pc, #60]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001648:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800164c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4313      	orrs	r3, r2
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <FLASH_Erase_Sector+0x8c>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6113      	str	r3, [r2, #16]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e16b      	b.n	8001970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 815a 	bne.w	800196a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d00b      	beq.n	80016d6 <HAL_GPIO_Init+0x5a>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ca:	2b11      	cmp	r3, #17
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d130      	bne.n	8001738 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170c:	2201      	movs	r2, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 0201 	and.w	r2, r3, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0xfc>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80b4 	beq.w	800196a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_GPIO_Init+0x308>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_GPIO_Init+0x308>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_GPIO_Init+0x308>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181e:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <HAL_GPIO_Init+0x30c>)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a51      	ldr	r2, [pc, #324]	; (800198c <HAL_GPIO_Init+0x310>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d02b      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <HAL_GPIO_Init+0x314>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x222>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <HAL_GPIO_Init+0x318>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x21e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_GPIO_Init+0x31c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x21a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_GPIO_Init+0x320>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x216>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_GPIO_Init+0x324>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x212>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x328>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x20e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x32c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x20a>
 8001882:	2307      	movs	r3, #7
 8001884:	e00e      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 8001886:	2308      	movs	r3, #8
 8001888:	e00c      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 800188a:	2306      	movs	r3, #6
 800188c:	e00a      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 800188e:	2305      	movs	r3, #5
 8001890:	e008      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 8001892:	2304      	movs	r3, #4
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 8001896:	2303      	movs	r3, #3
 8001898:	e004      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 800189a:	2302      	movs	r3, #2
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x228>
 80018a2:	2300      	movs	r3, #0
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f002 0203 	and.w	r2, r2, #3
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	4093      	lsls	r3, r2
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b4:	4934      	ldr	r1, [pc, #208]	; (8001988 <HAL_GPIO_Init+0x30c>)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_GPIO_Init+0x330>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e6:	4a31      	ldr	r2, [pc, #196]	; (80019ac <HAL_GPIO_Init+0x330>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x330>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_GPIO_Init+0x330>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_GPIO_Init+0x330>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_GPIO_Init+0x330>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_GPIO_Init+0x330>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001964:	4a11      	ldr	r2, [pc, #68]	; (80019ac <HAL_GPIO_Init+0x330>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	f67f ae90 	bls.w	8001698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001978:	bf00      	nop
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021400 	.word	0x40021400
 80019a4:	40021800 	.word	0x40021800
 80019a8:	40021c00 	.word	0x40021c00
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f806 	bl	8001a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e11f      	b.n	8001c7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f005 f9f0 	bl	8006e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a90:	f001 fbb6 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a7b      	ldr	r2, [pc, #492]	; (8001c88 <HAL_I2C_Init+0x25c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d807      	bhi.n	8001ab0 <HAL_I2C_Init+0x84>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_I2C_Init+0x260>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e006      	b.n	8001abe <HAL_I2C_Init+0x92>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a77      	ldr	r2, [pc, #476]	; (8001c90 <HAL_I2C_Init+0x264>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	bf94      	ite	ls
 8001ab8:	2301      	movls	r3, #1
 8001aba:	2300      	movhi	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0db      	b.n	8001c7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4a72      	ldr	r2, [pc, #456]	; (8001c94 <HAL_I2C_Init+0x268>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a64      	ldr	r2, [pc, #400]	; (8001c88 <HAL_I2C_Init+0x25c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d802      	bhi.n	8001b00 <HAL_I2C_Init+0xd4>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	e009      	b.n	8001b14 <HAL_I2C_Init+0xe8>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	4a63      	ldr	r2, [pc, #396]	; (8001c98 <HAL_I2C_Init+0x26c>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	3301      	adds	r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4956      	ldr	r1, [pc, #344]	; (8001c88 <HAL_I2C_Init+0x25c>)
 8001b30:	428b      	cmp	r3, r1
 8001b32:	d80d      	bhi.n	8001b50 <HAL_I2C_Init+0x124>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e59      	subs	r1, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	bf38      	it	cc
 8001b4c:	2304      	movcc	r3, #4
 8001b4e:	e04f      	b.n	8001bf0 <HAL_I2C_Init+0x1c4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d111      	bne.n	8001b7c <HAL_I2C_Init+0x150>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e58      	subs	r0, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	440b      	add	r3, r1
 8001b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e012      	b.n	8001ba2 <HAL_I2C_Init+0x176>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e58      	subs	r0, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	0099      	lsls	r1, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Init+0x17e>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e022      	b.n	8001bf0 <HAL_I2C_Init+0x1c4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_I2C_Init+0x1a4>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1e58      	subs	r0, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	440b      	add	r3, r1
 8001bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bce:	e00f      	b.n	8001bf0 <HAL_I2C_Init+0x1c4>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	6809      	ldr	r1, [r1, #0]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6911      	ldr	r1, [r2, #16]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68d2      	ldr	r2, [r2, #12]
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	000186a0 	.word	0x000186a0
 8001c8c:	001e847f 	.word	0x001e847f
 8001c90:	003d08ff 	.word	0x003d08ff
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cb6:	f7ff f9a5 	bl	8001004 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	f040 80d9 	bne.w	8001e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	496d      	ldr	r1, [pc, #436]	; (8001e88 <HAL_I2C_Mem_Write+0x1ec>)
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fc7b 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0cc      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Mem_Write+0x56>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e0c5      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2221      	movs	r2, #33	; 0x21
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_I2C_Mem_Write+0x1f0>)
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d5a:	88f8      	ldrh	r0, [r7, #6]
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4603      	mov	r3, r0
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fab6 	bl	80022dc <I2C_RequestMemoryWrite>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d052      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e081      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fcfc 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00d      	beq.n	8001da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d107      	bne.n	8001da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06b      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d11b      	bne.n	8001e1c <HAL_I2C_Mem_Write+0x180>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1aa      	bne.n	8001d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fce8 	bl	80027fe <I2C_WaitOnBTFFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00d      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d107      	bne.n	8001e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e016      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	00100002 	.word	0x00100002
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	817b      	strh	r3, [r7, #10]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	813b      	strh	r3, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eaa:	f7ff f8ab 	bl	8001004 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	f040 8208 	bne.w	80022ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2319      	movs	r3, #25
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	497b      	ldr	r1, [pc, #492]	; (80020b4 <HAL_I2C_Mem_Read+0x224>)
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fb81 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e1fb      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2C_Mem_Read+0x56>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e1f4      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d007      	beq.n	8001f0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2222      	movs	r2, #34	; 0x22
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	; (80020b8 <HAL_I2C_Mem_Read+0x228>)
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f4e:	88f8      	ldrh	r0, [r7, #6]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	8979      	ldrh	r1, [r7, #10]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fa50 	bl	8002404 <I2C_RequestMemoryRead>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1b0      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d113      	bne.n	8001f9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	623b      	str	r3, [r7, #32]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	623b      	str	r3, [r7, #32]
 8001f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e184      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d11b      	bne.n	8001fde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e164      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d11b      	bne.n	800201e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	e144      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002034:	e138      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	2b03      	cmp	r3, #3
 800203c:	f200 80f1 	bhi.w	8002222 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	2b01      	cmp	r3, #1
 8002046:	d123      	bne.n	8002090 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fc17 	bl	8002880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e139      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800208e:	e10b      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	2b02      	cmp	r3, #2
 8002096:	d14e      	bne.n	8002136 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	2200      	movs	r2, #0
 80020a0:	4906      	ldr	r1, [pc, #24]	; (80020bc <HAL_I2C_Mem_Read+0x22c>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fa94 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e10e      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
 80020b2:	bf00      	nop
 80020b4:	00100002 	.word	0x00100002
 80020b8:	ffff0000 	.word	0xffff0000
 80020bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002134:	e0b8      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	2200      	movs	r2, #0
 800213e:	4966      	ldr	r1, [pc, #408]	; (80022d8 <HAL_I2C_Mem_Read+0x448>)
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fa45 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0bf      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	2200      	movs	r2, #0
 800219a:	494f      	ldr	r1, [pc, #316]	; (80022d8 <HAL_I2C_Mem_Read+0x448>)
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fa17 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e091      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002220:	e042      	b.n	80022a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fb2a 	bl	8002880 <I2C_WaitOnRXNEFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e04c      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d118      	bne.n	80022a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f aec2 	bne.w	8002036 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	00010004 	.word	0x00010004

080022dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	460b      	mov	r3, r1
 80022f0:	813b      	strh	r3, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	2200      	movs	r2, #0
 800230e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f95c 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e05f      	b.n	80023f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002338:	897b      	ldrh	r3, [r7, #10]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002346:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	6a3a      	ldr	r2, [r7, #32]
 800234c:	492c      	ldr	r1, [pc, #176]	; (8002400 <I2C_RequestMemoryWrite+0x124>)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f995 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e04c      	b.n	80023f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	6a39      	ldr	r1, [r7, #32]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f9ff 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e02b      	b.n	80023f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023a6:	893b      	ldrh	r3, [r7, #8]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]
 80023b0:	e021      	b.n	80023f6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023b2:	893b      	ldrh	r3, [r7, #8]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	6a39      	ldr	r1, [r7, #32]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f9d9 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00d      	beq.n	80023ec <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d107      	bne.n	80023e8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e005      	b.n	80023f8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	00010002 	.word	0x00010002

08002404 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	817b      	strh	r3, [r7, #10]
 8002416:	460b      	mov	r3, r1
 8002418:	813b      	strh	r3, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800242c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2200      	movs	r2, #0
 8002446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f8c0 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0a9      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800247e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	6a3a      	ldr	r2, [r7, #32]
 8002484:	4951      	ldr	r1, [pc, #324]	; (80025cc <I2C_RequestMemoryRead+0x1c8>)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f8f9 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e096      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	6a39      	ldr	r1, [r7, #32]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f963 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d107      	bne.n	80024d4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e075      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024de:	893b      	ldrh	r3, [r7, #8]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]
 80024e8:	e021      	b.n	800252e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024ea:	893b      	ldrh	r3, [r7, #8]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	6a39      	ldr	r1, [r7, #32]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f93d 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b04      	cmp	r3, #4
 800250e:	d107      	bne.n	8002520 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e04f      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002524:	893b      	ldrh	r3, [r7, #8]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	6a39      	ldr	r1, [r7, #32]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f922 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b04      	cmp	r3, #4
 8002544:	d107      	bne.n	8002556 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e034      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	2200      	movs	r2, #0
 8002572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f82a 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e013      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800259c:	897b      	ldrh	r3, [r7, #10]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <I2C_RequestMemoryRead+0x1c8>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f863 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	00010002 	.word	0x00010002

080025d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e0:	e025      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d021      	beq.n	800262e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7fe fd0b 	bl	8001004 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e023      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10d      	bne.n	8002654 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4013      	ands	r3, r2
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	e00c      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d0b6      	beq.n	80025e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268c:	e051      	b.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	d123      	bne.n	80026e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0204 	orr.w	r2, r3, #4
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e046      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d021      	beq.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe fc89 	bl	8001004 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e020      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10c      	bne.n	8002756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4013      	ands	r3, r2
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e00b      	b.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	43da      	mvns	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4013      	ands	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d18d      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002788:	e02d      	b.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f8ce 	bl	800292c <I2C_IsAcknowledgeFailed>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e02d      	b.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d021      	beq.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fc2f 	bl	8001004 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d116      	bne.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e007      	b.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d1ca      	bne.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800280a:	e02d      	b.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f88d 	bl	800292c <I2C_IsAcknowledgeFailed>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e02d      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d021      	beq.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7fe fbee 	bl	8001004 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d1ca      	bne.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800288c:	e042      	b.n	8002914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d119      	bne.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0210 	mvn.w	r2, #16
 80028a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e029      	b.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d0:	f7fe fb98 	bl	8001004 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d1b5      	bne.n	800288e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d11b      	bne.n	800297c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e25b      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d075      	beq.n	8002a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029aa:	4ba3      	ldr	r3, [pc, #652]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d112      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b9d      	ldr	r3, [pc, #628]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x108>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d157      	bne.n	8002a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e236      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x74>
 80029f2:	4b91      	ldr	r3, [pc, #580]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a90      	ldr	r2, [pc, #576]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xb0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x98>
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a8a      	ldr	r2, [pc, #552]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a87      	ldr	r2, [pc, #540]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xb0>
 8002a24:	4b84      	ldr	r3, [pc, #528]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a83      	ldr	r2, [pc, #524]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a80      	ldr	r2, [pc, #512]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fade 	bl	8001004 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fada 	bl	8001004 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1fb      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xc0>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe faca 	bl	8001004 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fac6 	bl	8001004 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1e7      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b6c      	ldr	r3, [pc, #432]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0xe8>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b62      	ldr	r3, [pc, #392]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x152>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1bb      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4952      	ldr	r1, [pc, #328]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <HAL_RCC_OscConfig+0x2b0>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fa7f 	bl	8001004 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fa7b 	bl	8001004 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e19c      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4940      	ldr	r1, [pc, #256]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x2b0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fa5e 	bl	8001004 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fa5a 	bl	8001004 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e17b      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d030      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x2b4>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe fa3e 	bl	8001004 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fa3a 	bl	8001004 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e15b      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x200>
 8002baa:	e015      	b.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x2b4>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fa27 	bl	8001004 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fe fa23 	bl	8001004 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e144      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a0 	beq.w	8002d26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d121      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe f9e9 	bl	8001004 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e011      	b.n	8002c5a <HAL_RCC_OscConfig+0x2ce>
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
 8002c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7fe f9dc 	bl	8001004 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0fd      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x4d4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a7c      	ldr	r2, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x32a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x312>
 8002c84:	4b77      	ldr	r3, [pc, #476]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a76      	ldr	r2, [pc, #472]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x32a>
 8002c9e:	4b71      	ldr	r3, [pc, #452]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a70      	ldr	r2, [pc, #448]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8002caa:	4b6e      	ldr	r3, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a6d      	ldr	r2, [pc, #436]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe f9a1 	bl	8001004 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe f99d 	bl	8001004 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0bc      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x33a>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe f98b 	bl	8001004 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe f987 	bl	8001004 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0a6      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a51      	ldr	r2, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8092 	beq.w	8002e54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d05c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d141      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f95b 	bl	8001004 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe f957 	bl	8001004 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e078      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	019b      	lsls	r3, r3, #6
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	4933      	ldr	r1, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe f930 	bl	8001004 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe f92c 	bl	8001004 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04d      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x41c>
 8002dc6:	e045      	b.n	8002e54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe f919 	bl	8001004 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe f915 	bl	8001004 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e036      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x44a>
 8002df4:	e02e      	b.n	8002e54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e029      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d115      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40007000 	.word	0x40007000
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470060 	.word	0x42470060

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cc      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d044      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d119      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e067      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f852 	bl	8001004 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe f84e 	bl	8001004 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d20c      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	fa21 f303 	lsr.w	r3, r1, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd ffb2 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
 8003028:	40023800 	.word	0x40023800
 800302c:	08008548 	.word	0x08008548
 8003030:	200000ac 	.word	0x200000ac
 8003034:	20000000 	.word	0x20000000

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d007      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x32>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d008      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x38>
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 80b4 	bne.w	80031cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003066:	60bb      	str	r3, [r7, #8]
       break;
 8003068:	e0b3      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800306c:	60bb      	str	r3, [r7, #8]
      break;
 800306e:	e0b0      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003070:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003078:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307a:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04a      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b55      	ldr	r3, [pc, #340]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	f04f 0400 	mov.w	r4, #0
 8003090:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	ea03 0501 	and.w	r5, r3, r1
 800309c:	ea04 0602 	and.w	r6, r4, r2
 80030a0:	4629      	mov	r1, r5
 80030a2:	4632      	mov	r2, r6
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	0154      	lsls	r4, r2, #5
 80030ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b2:	014b      	lsls	r3, r1, #5
 80030b4:	4619      	mov	r1, r3
 80030b6:	4622      	mov	r2, r4
 80030b8:	1b49      	subs	r1, r1, r5
 80030ba:	eb62 0206 	sbc.w	r2, r2, r6
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	f04f 0400 	mov.w	r4, #0
 80030c6:	0194      	lsls	r4, r2, #6
 80030c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030cc:	018b      	lsls	r3, r1, #6
 80030ce:	1a5b      	subs	r3, r3, r1
 80030d0:	eb64 0402 	sbc.w	r4, r4, r2
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	00e2      	lsls	r2, r4, #3
 80030de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030e2:	00d9      	lsls	r1, r3, #3
 80030e4:	460b      	mov	r3, r1
 80030e6:	4614      	mov	r4, r2
 80030e8:	195b      	adds	r3, r3, r5
 80030ea:	eb44 0406 	adc.w	r4, r4, r6
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	0262      	lsls	r2, r4, #9
 80030f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030fc:	0259      	lsls	r1, r3, #9
 80030fe:	460b      	mov	r3, r1
 8003100:	4614      	mov	r4, r2
 8003102:	4618      	mov	r0, r3
 8003104:	4621      	mov	r1, r4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	461a      	mov	r2, r3
 800310e:	4623      	mov	r3, r4
 8003110:	f7fd fd92 	bl	8000c38 <__aeabi_uldivmod>
 8003114:	4603      	mov	r3, r0
 8003116:	460c      	mov	r4, r1
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e049      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	f240 11ff 	movw	r1, #511	; 0x1ff
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	ea03 0501 	and.w	r5, r3, r1
 8003132:	ea04 0602 	and.w	r6, r4, r2
 8003136:	4629      	mov	r1, r5
 8003138:	4632      	mov	r2, r6
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	0154      	lsls	r4, r2, #5
 8003144:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003148:	014b      	lsls	r3, r1, #5
 800314a:	4619      	mov	r1, r3
 800314c:	4622      	mov	r2, r4
 800314e:	1b49      	subs	r1, r1, r5
 8003150:	eb62 0206 	sbc.w	r2, r2, r6
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	0194      	lsls	r4, r2, #6
 800315e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003162:	018b      	lsls	r3, r1, #6
 8003164:	1a5b      	subs	r3, r3, r1
 8003166:	eb64 0402 	sbc.w	r4, r4, r2
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	00e2      	lsls	r2, r4, #3
 8003174:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003178:	00d9      	lsls	r1, r3, #3
 800317a:	460b      	mov	r3, r1
 800317c:	4614      	mov	r4, r2
 800317e:	195b      	adds	r3, r3, r5
 8003180:	eb44 0406 	adc.w	r4, r4, r6
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	02a2      	lsls	r2, r4, #10
 800318e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003192:	0299      	lsls	r1, r3, #10
 8003194:	460b      	mov	r3, r1
 8003196:	4614      	mov	r4, r2
 8003198:	4618      	mov	r0, r3
 800319a:	4621      	mov	r1, r4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f04f 0400 	mov.w	r4, #0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4623      	mov	r3, r4
 80031a6:	f7fd fd47 	bl	8000c38 <__aeabi_uldivmod>
 80031aa:	4603      	mov	r3, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	60bb      	str	r3, [r7, #8]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ce:	60bb      	str	r3, [r7, #8]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	68bb      	ldr	r3, [r7, #8]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	200000ac 	.word	0x200000ac

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003208:	4601      	mov	r1, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4a03      	ldr	r2, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08008558 	.word	0x08008558

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800322c:	f7ff ffdc 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003230:	4601      	mov	r1, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0b5b      	lsrs	r3, r3, #13
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4a03      	ldr	r2, [pc, #12]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	08008558 	.word	0x08008558

08003250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e01d      	b.n	800329e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f003 fe76 	bl	8006f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fc4e 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e01d      	b.n	80032f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f003 fe71 	bl	8006fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f000 fc23 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f822 	bl	8004358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_TIM_PWM_Start+0x74>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_PWM_Start+0x2c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_TIM_PWM_Start+0x78>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_TIM_PWM_Start+0x30>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_TIM_PWM_Start+0x32>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d007      	beq.n	8003364 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e01d      	b.n	80033c6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f003 fd92 	bl	8006ec8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fbba 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 ffb9 	bl	8004358 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d122      	bne.n	800346e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d11b      	bne.n	800346e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f06f 0202 	mvn.w	r2, #2
 800343e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f002 fa0f 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 800345a:	e005      	b.n	8003468 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fb49 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fb50 	bl	8003b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d122      	bne.n	80034c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d11b      	bne.n	80034c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0204 	mvn.w	r2, #4
 8003492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f002 f9e5 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 80034ae:	e005      	b.n	80034bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb1f 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fb26 	bl	8003b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d122      	bne.n	8003516 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11b      	bne.n	8003516 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f06f 0208 	mvn.w	r2, #8
 80034e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2204      	movs	r2, #4
 80034ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f002 f9bb 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8003502:	e005      	b.n	8003510 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 faf5 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fafc 	bl	8003b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d122      	bne.n	800356a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b10      	cmp	r3, #16
 8003530:	d11b      	bne.n	800356a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0210 	mvn.w	r2, #16
 800353a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2208      	movs	r2, #8
 8003540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f002 f991 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8003556:	e005      	b.n	8003564 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 facb 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fad2 	bl	8003b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10e      	bne.n	8003596 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d107      	bne.n	8003596 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f06f 0201 	mvn.w	r2, #1
 800358e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 faa5 	bl	8003ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d10e      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 ff77 	bl	80044b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d10e      	bne.n	80035ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d107      	bne.n	80035ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa97 	bl	8003b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d10e      	bne.n	800361a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d107      	bne.n	800361a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f06f 0220 	mvn.w	r2, #32
 8003612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 ff41 	bl	800449c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003638:	2302      	movs	r3, #2
 800363a:	e08a      	b.n	8003752 <HAL_TIM_IC_ConfigChannel+0x130>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11b      	bne.n	800368a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f000 fcb5 	bl	8003fd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 020c 	bic.w	r2, r2, #12
 8003674:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6999      	ldr	r1, [r3, #24]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	619a      	str	r2, [r3, #24]
 8003688:	e05a      	b.n	8003740 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11c      	bne.n	80036ca <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f000 fd39 	bl	8004116 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6999      	ldr	r1, [r3, #24]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	021a      	lsls	r2, r3, #8
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	619a      	str	r2, [r3, #24]
 80036c8:	e03a      	b.n	8003740 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6819      	ldr	r1, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f000 fd86 	bl	80041f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 020c 	bic.w	r2, r2, #12
 80036f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69d9      	ldr	r1, [r3, #28]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	61da      	str	r2, [r3, #28]
 8003706:	e01b      	b.n	8003740 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f000 fda6 	bl	8004268 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800372a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69d9      	ldr	r1, [r3, #28]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003772:	2302      	movs	r3, #2
 8003774:	e0b4      	b.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	f200 809f 	bhi.w	80038cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080038cd 	.word	0x080038cd
 800379c:	080038cd 	.word	0x080038cd
 80037a0:	080038cd 	.word	0x080038cd
 80037a4:	08003809 	.word	0x08003809
 80037a8:	080038cd 	.word	0x080038cd
 80037ac:	080038cd 	.word	0x080038cd
 80037b0:	080038cd 	.word	0x080038cd
 80037b4:	0800384b 	.word	0x0800384b
 80037b8:	080038cd 	.word	0x080038cd
 80037bc:	080038cd 	.word	0x080038cd
 80037c0:	080038cd 	.word	0x080038cd
 80037c4:	0800388b 	.word	0x0800388b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fa4e 	bl	8003c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0208 	orr.w	r2, r2, #8
 80037e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	619a      	str	r2, [r3, #24]
      break;
 8003806:	e062      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fa9e 	bl	8003d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	619a      	str	r2, [r3, #24]
      break;
 8003848:	e041      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 faf3 	bl	8003e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0208 	orr.w	r2, r2, #8
 8003864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0204 	bic.w	r2, r2, #4
 8003874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69d9      	ldr	r1, [r3, #28]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	61da      	str	r2, [r3, #28]
      break;
 8003888:	e021      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fb47 	bl	8003f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	021a      	lsls	r2, r3, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	61da      	str	r2, [r3, #28]
      break;
 80038ca:	e000      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80038cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x18>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0a6      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x166>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d067      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0x120>
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d80b      	bhi.n	8003954 <HAL_TIM_ConfigClockSource+0x6c>
 800393c:	2b10      	cmp	r3, #16
 800393e:	d073      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x140>
 8003940:	2b10      	cmp	r3, #16
 8003942:	d802      	bhi.n	800394a <HAL_TIM_ConfigClockSource+0x62>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d06f      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003948:	e078      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800394a:	2b20      	cmp	r3, #32
 800394c:	d06c      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x140>
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d06a      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003952:	e073      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003954:	2b70      	cmp	r3, #112	; 0x70
 8003956:	d00d      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0x8c>
 8003958:	2b70      	cmp	r3, #112	; 0x70
 800395a:	d804      	bhi.n	8003966 <HAL_TIM_ConfigClockSource+0x7e>
 800395c:	2b50      	cmp	r3, #80	; 0x50
 800395e:	d033      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0xe0>
 8003960:	2b60      	cmp	r3, #96	; 0x60
 8003962:	d041      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003964:	e06a      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	d066      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x152>
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	d017      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003972:	e063      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f000 fcc8 	bl	8004318 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003996:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e04c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f000 fcb1 	bl	8004318 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c4:	609a      	str	r2, [r3, #8]
      break;
 80039c6:	e039      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	461a      	mov	r2, r3
 80039d6:	f000 fb6f 	bl	80040b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2150      	movs	r1, #80	; 0x50
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc7e 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 80039e6:	e029      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f000 fbcb 	bl	8004190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2160      	movs	r1, #96	; 0x60
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fc6e 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 8003a06:	e019      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	461a      	mov	r2, r3
 8003a16:	f000 fb4f 	bl	80040b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fc5e 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 8003a26:	e009      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fc55 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d831      	bhi.n	8003ad0 <HAL_TIM_ReadCapturedValue+0x78>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ad1 	.word	0x08003ad1
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003ad1 	.word	0x08003ad1
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003ad1 	.word	0x08003ad1
 8003a8c:	08003ad1 	.word	0x08003ad1
 8003a90:	08003ad1 	.word	0x08003ad1
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	08003ad1 	.word	0x08003ad1
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003ad1 	.word	0x08003ad1
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	60fb      	str	r3, [r7, #12]

      break;
 8003ab0:	e00f      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	60fb      	str	r3, [r7, #12]

      break;
 8003aba:	e00a      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	60fb      	str	r3, [r7, #12]

      break;
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	60fb      	str	r3, [r7, #12]

      break;
 8003ace:	e000      	b.n	8003ad2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ad0:	bf00      	nop
  }

  return tmpreg;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a40      	ldr	r2, [pc, #256]	; (8003c44 <TIM_Base_SetConfig+0x114>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4e:	d00f      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3d      	ldr	r2, [pc, #244]	; (8003c48 <TIM_Base_SetConfig+0x118>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00b      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3c      	ldr	r2, [pc, #240]	; (8003c4c <TIM_Base_SetConfig+0x11c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <TIM_Base_SetConfig+0x120>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3a      	ldr	r2, [pc, #232]	; (8003c54 <TIM_Base_SetConfig+0x124>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <TIM_Base_SetConfig+0x114>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d02b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b90:	d027      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <TIM_Base_SetConfig+0x118>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d023      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <TIM_Base_SetConfig+0x11c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <TIM_Base_SetConfig+0x120>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <TIM_Base_SetConfig+0x124>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d017      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <TIM_Base_SetConfig+0x128>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <TIM_Base_SetConfig+0x12c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <TIM_Base_SetConfig+0x130>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a25      	ldr	r2, [pc, #148]	; (8003c64 <TIM_Base_SetConfig+0x134>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <TIM_Base_SetConfig+0x138>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <TIM_Base_SetConfig+0x13c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <TIM_Base_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0xf8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <TIM_Base_SetConfig+0x124>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d103      	bne.n	8003c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	615a      	str	r2, [r3, #20]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	40000c00 	.word	0x40000c00
 8003c54:	40010400 	.word	0x40010400
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800
 8003c64:	40001800 	.word	0x40001800
 8003c68:	40001c00 	.word	0x40001c00
 8003c6c:	40002000 	.word	0x40002000

08003c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0302 	bic.w	r3, r3, #2
 8003cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <TIM_OC1_SetConfig+0xd8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC1_SetConfig+0x64>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <TIM_OC1_SetConfig+0xdc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d10c      	bne.n	8003cee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0308 	bic.w	r3, r3, #8
 8003cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <TIM_OC1_SetConfig+0xd8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_OC1_SetConfig+0x8e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <TIM_OC1_SetConfig+0xdc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d111      	bne.n	8003d22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40010400 	.word	0x40010400

08003d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0210 	bic.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0320 	bic.w	r3, r3, #32
 8003d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <TIM_OC2_SetConfig+0xe4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC2_SetConfig+0x68>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <TIM_OC2_SetConfig+0xe8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10d      	bne.n	8003dd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <TIM_OC2_SetConfig+0xe4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_OC2_SetConfig+0x94>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <TIM_OC2_SetConfig+0xe8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d113      	bne.n	8003e0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40010400 	.word	0x40010400

08003e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <TIM_OC3_SetConfig+0xe0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <TIM_OC3_SetConfig+0x66>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <TIM_OC3_SetConfig+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10d      	bne.n	8003ebe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a16      	ldr	r2, [pc, #88]	; (8003f1c <TIM_OC3_SetConfig+0xe0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_OC3_SetConfig+0x92>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <TIM_OC3_SetConfig+0xe4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d113      	bne.n	8003ef6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	621a      	str	r2, [r3, #32]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010400 	.word	0x40010400

08003f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	031b      	lsls	r3, r3, #12
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <TIM_OC4_SetConfig+0xa4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC4_SetConfig+0x68>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <TIM_OC4_SetConfig+0xa8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d109      	bne.n	8003fa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40010400 	.word	0x40010400

08003fd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0201 	bic.w	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <TIM_TI1_SetConfig+0xcc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01b      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d017      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <TIM_TI1_SetConfig+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <TIM_TI1_SetConfig+0xd4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <TIM_TI1_SetConfig+0xd8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <TIM_TI1_SetConfig+0xdc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <TIM_TI1_SetConfig+0xe0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_TI1_SetConfig+0x66>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <TIM_TI1_SetConfig+0xe4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <TIM_TI1_SetConfig+0x6a>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <TIM_TI1_SetConfig+0x6c>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e003      	b.n	800405a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	b2db      	uxtb	r3, r3
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f023 030a 	bic.w	r3, r3, #10
 8004074:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f003 030a 	and.w	r3, r3, #10
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40010400 	.word	0x40010400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40001800 	.word	0x40001800

080040b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f023 0201 	bic.w	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 030a 	bic.w	r3, r3, #10
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004116:	b480      	push	{r7}
 8004118:	b087      	sub	sp, #28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 0210 	bic.w	r2, r3, #16
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	b29b      	uxth	r3, r3
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004168:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f023 0210 	bic.w	r2, r3, #16
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	031b      	lsls	r3, r3, #12
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800422c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	b2db      	uxtb	r3, r3
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004240:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	031b      	lsls	r3, r3, #12
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	031b      	lsls	r3, r3, #12
 80042c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	f043 0307 	orr.w	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	431a      	orrs	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2201      	movs	r2, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	43db      	mvns	r3, r3
 800437a:	401a      	ands	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e05a      	b.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a21      	ldr	r2, [pc, #132]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004408:	d01d      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a15      	ldr	r2, [pc, #84]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10c      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	4313      	orrs	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40010400 	.word	0x40010400
 8004494:	40014000 	.word	0x40014000
 8004498:	40001800 	.word	0x40001800

0800449c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e03f      	b.n	8004556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f002 fdfc 	bl	80070e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f90b 	bl	8004724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800453c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b088      	sub	sp, #32
 8004562:	af02      	add	r7, sp, #8
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b20      	cmp	r3, #32
 800457c:	f040 8083 	bne.w	8004686 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Transmit+0x2e>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e07b      	b.n	8004688 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_UART_Transmit+0x40>
 800459a:	2302      	movs	r3, #2
 800459c:	e074      	b.n	8004688 <HAL_UART_Transmit+0x12a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2221      	movs	r2, #33	; 0x21
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045b4:	f7fc fd26 	bl	8001004 <HAL_GetTick>
 80045b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	88fa      	ldrh	r2, [r7, #6]
 80045be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80045ce:	e042      	b.n	8004656 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d122      	bne.n	800462e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2180      	movs	r1, #128	; 0x80
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f84c 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e042      	b.n	8004688 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3302      	adds	r3, #2
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	e017      	b.n	8004656 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	e013      	b.n	8004656 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	; 0x80
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f829 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e01f      	b.n	8004688 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	60ba      	str	r2, [r7, #8]
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1b7      	bne.n	80045d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2200      	movs	r2, #0
 8004668:	2140      	movs	r1, #64	; 0x40
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f810 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e006      	b.n	8004688 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a0:	e02c      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d028      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b0:	f7fc fca8 	bl	8001004 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d21d      	bcs.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d0c3      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004766:	f023 030c 	bic.w	r3, r3, #12
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	430b      	orrs	r3, r1
 8004772:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004792:	f040 818b 	bne.w	8004aac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4ac1      	ldr	r2, [pc, #772]	; (8004aa0 <UART_SetConfig+0x37c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d005      	beq.n	80047ac <UART_SetConfig+0x88>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4abf      	ldr	r2, [pc, #764]	; (8004aa4 <UART_SetConfig+0x380>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	f040 80bd 	bne.w	8004926 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fe fd3c 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 80047b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	461d      	mov	r5, r3
 80047b6:	f04f 0600 	mov.w	r6, #0
 80047ba:	46a8      	mov	r8, r5
 80047bc:	46b1      	mov	r9, r6
 80047be:	eb18 0308 	adds.w	r3, r8, r8
 80047c2:	eb49 0409 	adc.w	r4, r9, r9
 80047c6:	4698      	mov	r8, r3
 80047c8:	46a1      	mov	r9, r4
 80047ca:	eb18 0805 	adds.w	r8, r8, r5
 80047ce:	eb49 0906 	adc.w	r9, r9, r6
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047e6:	4688      	mov	r8, r1
 80047e8:	4691      	mov	r9, r2
 80047ea:	eb18 0005 	adds.w	r0, r8, r5
 80047ee:	eb49 0106 	adc.w	r1, r9, r6
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	461d      	mov	r5, r3
 80047f8:	f04f 0600 	mov.w	r6, #0
 80047fc:	196b      	adds	r3, r5, r5
 80047fe:	eb46 0406 	adc.w	r4, r6, r6
 8004802:	461a      	mov	r2, r3
 8004804:	4623      	mov	r3, r4
 8004806:	f7fc fa17 	bl	8000c38 <__aeabi_uldivmod>
 800480a:	4603      	mov	r3, r0
 800480c:	460c      	mov	r4, r1
 800480e:	461a      	mov	r2, r3
 8004810:	4ba5      	ldr	r3, [pc, #660]	; (8004aa8 <UART_SetConfig+0x384>)
 8004812:	fba3 2302 	umull	r2, r3, r3, r2
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	461d      	mov	r5, r3
 8004820:	f04f 0600 	mov.w	r6, #0
 8004824:	46a9      	mov	r9, r5
 8004826:	46b2      	mov	sl, r6
 8004828:	eb19 0309 	adds.w	r3, r9, r9
 800482c:	eb4a 040a 	adc.w	r4, sl, sl
 8004830:	4699      	mov	r9, r3
 8004832:	46a2      	mov	sl, r4
 8004834:	eb19 0905 	adds.w	r9, r9, r5
 8004838:	eb4a 0a06 	adc.w	sl, sl, r6
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800484c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004850:	4689      	mov	r9, r1
 8004852:	4692      	mov	sl, r2
 8004854:	eb19 0005 	adds.w	r0, r9, r5
 8004858:	eb4a 0106 	adc.w	r1, sl, r6
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	461d      	mov	r5, r3
 8004862:	f04f 0600 	mov.w	r6, #0
 8004866:	196b      	adds	r3, r5, r5
 8004868:	eb46 0406 	adc.w	r4, r6, r6
 800486c:	461a      	mov	r2, r3
 800486e:	4623      	mov	r3, r4
 8004870:	f7fc f9e2 	bl	8000c38 <__aeabi_uldivmod>
 8004874:	4603      	mov	r3, r0
 8004876:	460c      	mov	r4, r1
 8004878:	461a      	mov	r2, r3
 800487a:	4b8b      	ldr	r3, [pc, #556]	; (8004aa8 <UART_SetConfig+0x384>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	2164      	movs	r1, #100	; 0x64
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	3332      	adds	r3, #50	; 0x32
 800488e:	4a86      	ldr	r2, [pc, #536]	; (8004aa8 <UART_SetConfig+0x384>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800489c:	4498      	add	r8, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	461d      	mov	r5, r3
 80048a2:	f04f 0600 	mov.w	r6, #0
 80048a6:	46a9      	mov	r9, r5
 80048a8:	46b2      	mov	sl, r6
 80048aa:	eb19 0309 	adds.w	r3, r9, r9
 80048ae:	eb4a 040a 	adc.w	r4, sl, sl
 80048b2:	4699      	mov	r9, r3
 80048b4:	46a2      	mov	sl, r4
 80048b6:	eb19 0905 	adds.w	r9, r9, r5
 80048ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048d2:	4689      	mov	r9, r1
 80048d4:	4692      	mov	sl, r2
 80048d6:	eb19 0005 	adds.w	r0, r9, r5
 80048da:	eb4a 0106 	adc.w	r1, sl, r6
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	461d      	mov	r5, r3
 80048e4:	f04f 0600 	mov.w	r6, #0
 80048e8:	196b      	adds	r3, r5, r5
 80048ea:	eb46 0406 	adc.w	r4, r6, r6
 80048ee:	461a      	mov	r2, r3
 80048f0:	4623      	mov	r3, r4
 80048f2:	f7fc f9a1 	bl	8000c38 <__aeabi_uldivmod>
 80048f6:	4603      	mov	r3, r0
 80048f8:	460c      	mov	r4, r1
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <UART_SetConfig+0x384>)
 80048fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2164      	movs	r1, #100	; 0x64
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	3332      	adds	r3, #50	; 0x32
 8004910:	4a65      	ldr	r2, [pc, #404]	; (8004aa8 <UART_SetConfig+0x384>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	f003 0207 	and.w	r2, r3, #7
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4442      	add	r2, r8
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	e26f      	b.n	8004e06 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004926:	f7fe fc6b 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 800492a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	461d      	mov	r5, r3
 8004930:	f04f 0600 	mov.w	r6, #0
 8004934:	46a8      	mov	r8, r5
 8004936:	46b1      	mov	r9, r6
 8004938:	eb18 0308 	adds.w	r3, r8, r8
 800493c:	eb49 0409 	adc.w	r4, r9, r9
 8004940:	4698      	mov	r8, r3
 8004942:	46a1      	mov	r9, r4
 8004944:	eb18 0805 	adds.w	r8, r8, r5
 8004948:	eb49 0906 	adc.w	r9, r9, r6
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004958:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800495c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004960:	4688      	mov	r8, r1
 8004962:	4691      	mov	r9, r2
 8004964:	eb18 0005 	adds.w	r0, r8, r5
 8004968:	eb49 0106 	adc.w	r1, r9, r6
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	461d      	mov	r5, r3
 8004972:	f04f 0600 	mov.w	r6, #0
 8004976:	196b      	adds	r3, r5, r5
 8004978:	eb46 0406 	adc.w	r4, r6, r6
 800497c:	461a      	mov	r2, r3
 800497e:	4623      	mov	r3, r4
 8004980:	f7fc f95a 	bl	8000c38 <__aeabi_uldivmod>
 8004984:	4603      	mov	r3, r0
 8004986:	460c      	mov	r4, r1
 8004988:	461a      	mov	r2, r3
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <UART_SetConfig+0x384>)
 800498c:	fba3 2302 	umull	r2, r3, r3, r2
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	461d      	mov	r5, r3
 800499a:	f04f 0600 	mov.w	r6, #0
 800499e:	46a9      	mov	r9, r5
 80049a0:	46b2      	mov	sl, r6
 80049a2:	eb19 0309 	adds.w	r3, r9, r9
 80049a6:	eb4a 040a 	adc.w	r4, sl, sl
 80049aa:	4699      	mov	r9, r3
 80049ac:	46a2      	mov	sl, r4
 80049ae:	eb19 0905 	adds.w	r9, r9, r5
 80049b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ca:	4689      	mov	r9, r1
 80049cc:	4692      	mov	sl, r2
 80049ce:	eb19 0005 	adds.w	r0, r9, r5
 80049d2:	eb4a 0106 	adc.w	r1, sl, r6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	461d      	mov	r5, r3
 80049dc:	f04f 0600 	mov.w	r6, #0
 80049e0:	196b      	adds	r3, r5, r5
 80049e2:	eb46 0406 	adc.w	r4, r6, r6
 80049e6:	461a      	mov	r2, r3
 80049e8:	4623      	mov	r3, r4
 80049ea:	f7fc f925 	bl	8000c38 <__aeabi_uldivmod>
 80049ee:	4603      	mov	r3, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <UART_SetConfig+0x384>)
 80049f6:	fba3 1302 	umull	r1, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2164      	movs	r1, #100	; 0x64
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	3332      	adds	r3, #50	; 0x32
 8004a08:	4a27      	ldr	r2, [pc, #156]	; (8004aa8 <UART_SetConfig+0x384>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a16:	4498      	add	r8, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	f04f 0600 	mov.w	r6, #0
 8004a20:	46a9      	mov	r9, r5
 8004a22:	46b2      	mov	sl, r6
 8004a24:	eb19 0309 	adds.w	r3, r9, r9
 8004a28:	eb4a 040a 	adc.w	r4, sl, sl
 8004a2c:	4699      	mov	r9, r3
 8004a2e:	46a2      	mov	sl, r4
 8004a30:	eb19 0905 	adds.w	r9, r9, r5
 8004a34:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a4c:	4689      	mov	r9, r1
 8004a4e:	4692      	mov	sl, r2
 8004a50:	eb19 0005 	adds.w	r0, r9, r5
 8004a54:	eb4a 0106 	adc.w	r1, sl, r6
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	461d      	mov	r5, r3
 8004a5e:	f04f 0600 	mov.w	r6, #0
 8004a62:	196b      	adds	r3, r5, r5
 8004a64:	eb46 0406 	adc.w	r4, r6, r6
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	f7fc f8e4 	bl	8000c38 <__aeabi_uldivmod>
 8004a70:	4603      	mov	r3, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <UART_SetConfig+0x384>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	; 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	3332      	adds	r3, #50	; 0x32
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <UART_SetConfig+0x384>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 0207 	and.w	r2, r3, #7
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4442      	add	r2, r8
 8004a9c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a9e:	e1b2      	b.n	8004e06 <UART_SetConfig+0x6e2>
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4ad7      	ldr	r2, [pc, #860]	; (8004e10 <UART_SetConfig+0x6ec>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d005      	beq.n	8004ac2 <UART_SetConfig+0x39e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4ad6      	ldr	r2, [pc, #856]	; (8004e14 <UART_SetConfig+0x6f0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	f040 80d1 	bne.w	8004c64 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ac2:	f7fe fbb1 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8004ac6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	469a      	mov	sl, r3
 8004acc:	f04f 0b00 	mov.w	fp, #0
 8004ad0:	46d0      	mov	r8, sl
 8004ad2:	46d9      	mov	r9, fp
 8004ad4:	eb18 0308 	adds.w	r3, r8, r8
 8004ad8:	eb49 0409 	adc.w	r4, r9, r9
 8004adc:	4698      	mov	r8, r3
 8004ade:	46a1      	mov	r9, r4
 8004ae0:	eb18 080a 	adds.w	r8, r8, sl
 8004ae4:	eb49 090b 	adc.w	r9, r9, fp
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004af4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004af8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004afc:	4688      	mov	r8, r1
 8004afe:	4691      	mov	r9, r2
 8004b00:	eb1a 0508 	adds.w	r5, sl, r8
 8004b04:	eb4b 0609 	adc.w	r6, fp, r9
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	f04f 0400 	mov.w	r4, #0
 8004b1a:	0094      	lsls	r4, r2, #2
 8004b1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b20:	008b      	lsls	r3, r1, #2
 8004b22:	461a      	mov	r2, r3
 8004b24:	4623      	mov	r3, r4
 8004b26:	4628      	mov	r0, r5
 8004b28:	4631      	mov	r1, r6
 8004b2a:	f7fc f885 	bl	8000c38 <__aeabi_uldivmod>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	461a      	mov	r2, r3
 8004b34:	4bb8      	ldr	r3, [pc, #736]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004b36:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	469b      	mov	fp, r3
 8004b44:	f04f 0c00 	mov.w	ip, #0
 8004b48:	46d9      	mov	r9, fp
 8004b4a:	46e2      	mov	sl, ip
 8004b4c:	eb19 0309 	adds.w	r3, r9, r9
 8004b50:	eb4a 040a 	adc.w	r4, sl, sl
 8004b54:	4699      	mov	r9, r3
 8004b56:	46a2      	mov	sl, r4
 8004b58:	eb19 090b 	adds.w	r9, r9, fp
 8004b5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b74:	4689      	mov	r9, r1
 8004b76:	4692      	mov	sl, r2
 8004b78:	eb1b 0509 	adds.w	r5, fp, r9
 8004b7c:	eb4c 060a 	adc.w	r6, ip, sl
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4619      	mov	r1, r3
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	f04f 0400 	mov.w	r4, #0
 8004b92:	0094      	lsls	r4, r2, #2
 8004b94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b98:	008b      	lsls	r3, r1, #2
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	f7fc f849 	bl	8000c38 <__aeabi_uldivmod>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b9a      	ldr	r3, [pc, #616]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004bae:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2164      	movs	r1, #100	; 0x64
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	3332      	adds	r3, #50	; 0x32
 8004bc0:	4a95      	ldr	r2, [pc, #596]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bcc:	4498      	add	r8, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	469b      	mov	fp, r3
 8004bd2:	f04f 0c00 	mov.w	ip, #0
 8004bd6:	46d9      	mov	r9, fp
 8004bd8:	46e2      	mov	sl, ip
 8004bda:	eb19 0309 	adds.w	r3, r9, r9
 8004bde:	eb4a 040a 	adc.w	r4, sl, sl
 8004be2:	4699      	mov	r9, r3
 8004be4:	46a2      	mov	sl, r4
 8004be6:	eb19 090b 	adds.w	r9, r9, fp
 8004bea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c02:	4689      	mov	r9, r1
 8004c04:	4692      	mov	sl, r2
 8004c06:	eb1b 0509 	adds.w	r5, fp, r9
 8004c0a:	eb4c 060a 	adc.w	r6, ip, sl
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4619      	mov	r1, r3
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	0094      	lsls	r4, r2, #2
 8004c22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c26:	008b      	lsls	r3, r1, #2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	4631      	mov	r1, r6
 8004c30:	f7fc f802 	bl	8000c38 <__aeabi_uldivmod>
 8004c34:	4603      	mov	r3, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b77      	ldr	r3, [pc, #476]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2164      	movs	r1, #100	; 0x64
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	3332      	adds	r3, #50	; 0x32
 8004c4e:	4a72      	ldr	r2, [pc, #456]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4442      	add	r2, r8
 8004c60:	609a      	str	r2, [r3, #8]
 8004c62:	e0d0      	b.n	8004e06 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c64:	f7fe facc 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8004c68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	469a      	mov	sl, r3
 8004c6e:	f04f 0b00 	mov.w	fp, #0
 8004c72:	46d0      	mov	r8, sl
 8004c74:	46d9      	mov	r9, fp
 8004c76:	eb18 0308 	adds.w	r3, r8, r8
 8004c7a:	eb49 0409 	adc.w	r4, r9, r9
 8004c7e:	4698      	mov	r8, r3
 8004c80:	46a1      	mov	r9, r4
 8004c82:	eb18 080a 	adds.w	r8, r8, sl
 8004c86:	eb49 090b 	adc.w	r9, r9, fp
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c9e:	4688      	mov	r8, r1
 8004ca0:	4691      	mov	r9, r2
 8004ca2:	eb1a 0508 	adds.w	r5, sl, r8
 8004ca6:	eb4b 0609 	adc.w	r6, fp, r9
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	f04f 0400 	mov.w	r4, #0
 8004cbc:	0094      	lsls	r4, r2, #2
 8004cbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	4631      	mov	r1, r6
 8004ccc:	f7fb ffb4 	bl	8000c38 <__aeabi_uldivmod>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	469b      	mov	fp, r3
 8004ce6:	f04f 0c00 	mov.w	ip, #0
 8004cea:	46d9      	mov	r9, fp
 8004cec:	46e2      	mov	sl, ip
 8004cee:	eb19 0309 	adds.w	r3, r9, r9
 8004cf2:	eb4a 040a 	adc.w	r4, sl, sl
 8004cf6:	4699      	mov	r9, r3
 8004cf8:	46a2      	mov	sl, r4
 8004cfa:	eb19 090b 	adds.w	r9, r9, fp
 8004cfe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d02:	f04f 0100 	mov.w	r1, #0
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d16:	4689      	mov	r9, r1
 8004d18:	4692      	mov	sl, r2
 8004d1a:	eb1b 0509 	adds.w	r5, fp, r9
 8004d1e:	eb4c 060a 	adc.w	r6, ip, sl
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4619      	mov	r1, r3
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	f04f 0400 	mov.w	r4, #0
 8004d34:	0094      	lsls	r4, r2, #2
 8004d36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d3a:	008b      	lsls	r3, r1, #2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4623      	mov	r3, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	4631      	mov	r1, r6
 8004d44:	f7fb ff78 	bl	8000c38 <__aeabi_uldivmod>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004d50:	fba3 1302 	umull	r1, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	2164      	movs	r1, #100	; 0x64
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	3332      	adds	r3, #50	; 0x32
 8004d62:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d6e:	4498      	add	r8, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	469b      	mov	fp, r3
 8004d74:	f04f 0c00 	mov.w	ip, #0
 8004d78:	46d9      	mov	r9, fp
 8004d7a:	46e2      	mov	sl, ip
 8004d7c:	eb19 0309 	adds.w	r3, r9, r9
 8004d80:	eb4a 040a 	adc.w	r4, sl, sl
 8004d84:	4699      	mov	r9, r3
 8004d86:	46a2      	mov	sl, r4
 8004d88:	eb19 090b 	adds.w	r9, r9, fp
 8004d8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004da4:	4689      	mov	r9, r1
 8004da6:	4692      	mov	sl, r2
 8004da8:	eb1b 0509 	adds.w	r5, fp, r9
 8004dac:	eb4c 060a 	adc.w	r6, ip, sl
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	f04f 0400 	mov.w	r4, #0
 8004dc2:	0094      	lsls	r4, r2, #2
 8004dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dc8:	008b      	lsls	r3, r1, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4623      	mov	r3, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	f7fb ff31 	bl	8000c38 <__aeabi_uldivmod>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460c      	mov	r4, r1
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004dde:	fba3 1302 	umull	r1, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2164      	movs	r1, #100	; 0x64
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	3332      	adds	r3, #50	; 0x32
 8004df0:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <UART_SetConfig+0x6f4>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 020f 	and.w	r2, r3, #15
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4442      	add	r2, r8
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	e7ff      	b.n	8004e06 <UART_SetConfig+0x6e2>
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e10:	40011000 	.word	0x40011000
 8004e14:	40011400 	.word	0x40011400
 8004e18:	51eb851f 	.word	0x51eb851f

08004e1c <i2cWrite>:

extern uint32_t SystickMs;


void i2cWrite(uint8_t Address, uint8_t Value)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af04      	add	r7, sp, #16
 8004e22:	4603      	mov	r3, r0
 8004e24:	460a      	mov	r2, r1
 8004e26:	71fb      	strb	r3, [r7, #7]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, Address, 1, &Value, 1, 100);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	2364      	movs	r3, #100	; 0x64
 8004e32:	9302      	str	r3, [sp, #8]
 8004e34:	2301      	movs	r3, #1
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	1dbb      	adds	r3, r7, #6
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	21d0      	movs	r1, #208	; 0xd0
 8004e40:	4803      	ldr	r0, [pc, #12]	; (8004e50 <i2cWrite+0x34>)
 8004e42:	f7fc ff2b 	bl	8001c9c <HAL_I2C_Mem_Write>

}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000290 	.word	0x20000290

08004e54 <MPU6050Init>:



bool MPU6050Init()
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af04      	add	r7, sp, #16
    uint8_t control=0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &control, 1, 100);
 8004e5e:	2364      	movs	r3, #100	; 0x64
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	2301      	movs	r3, #1
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	1dfb      	adds	r3, r7, #7
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	2275      	movs	r2, #117	; 0x75
 8004e6e:	21d0      	movs	r1, #208	; 0xd0
 8004e70:	4806      	ldr	r0, [pc, #24]	; (8004e8c <MPU6050Init+0x38>)
 8004e72:	f7fd f80d 	bl	8001e90 <HAL_I2C_Mem_Read>
	if(control==0x68)
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b68      	cmp	r3, #104	; 0x68
 8004e7a:	d101      	bne.n	8004e80 <MPU6050Init+0x2c>
	 return true;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <MPU6050Init+0x2e>
	else
	 return false;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000290 	.word	0x20000290

08004e90 <MPU6050Initialization>:

void MPU6050Initialization()
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
     i2cWrite(PWR_MGMT_1,0x00);   //Sensor Wake-Up
 8004e94:	2100      	movs	r1, #0
 8004e96:	206b      	movs	r0, #107	; 0x6b
 8004e98:	f7ff ffc0 	bl	8004e1c <i2cWrite>
     i2cWrite(SMPLRT_DIV,0x07);
 8004e9c:	2107      	movs	r1, #7
 8004e9e:	2019      	movs	r0, #25
 8004ea0:	f7ff ffbc 	bl	8004e1c <i2cWrite>
     i2cWrite(GYRO_CONFIG,0x00);  //Gyro ==>250 degree/sc  /131
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	201b      	movs	r0, #27
 8004ea8:	f7ff ffb8 	bl	8004e1c <i2cWrite>
     i2cWrite(ACCEL_CONFIG,0x00); //ACC==> -+2 degree/sc   /16384
 8004eac:	2100      	movs	r1, #0
 8004eae:	201c      	movs	r0, #28
 8004eb0:	f7ff ffb4 	bl	8004e1c <i2cWrite>

}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <setSampleTime>:

void setSampleTime(uint32_t ms)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
    sampleTime= (float )ms/(float)1000.00;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eca:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004ee4 <setSampleTime+0x2c>
 8004ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <setSampleTime+0x30>)
 8004ed4:	edc3 7a00 	vstr	s15, [r3]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	447a0000 	.word	0x447a0000
 8004ee8:	20000098 	.word	0x20000098

08004eec <getAccelerationRawData>:


/*This function are used to read raw acceleration datas and convert real datas...*/
void getAccelerationRawData()
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af04      	add	r7, sp, #16
     uint8_t RawDatas[6];
     HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, (uint16_t) 1, RawDatas, (uint16_t) 3 , 100);//3----6
 8004ef2:	2364      	movs	r3, #100	; 0x64
 8004ef4:	9302      	str	r3, [sp, #8]
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	463b      	mov	r3, r7
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2301      	movs	r3, #1
 8004f00:	223b      	movs	r2, #59	; 0x3b
 8004f02:	21d0      	movs	r1, #208	; 0xd0
 8004f04:	4825      	ldr	r0, [pc, #148]	; (8004f9c <getAccelerationRawData+0xb0>)
 8004f06:	f7fc ffc3 	bl	8001e90 <HAL_I2C_Mem_Read>

     XRaw=(RawDatas[0]<<8) | RawDatas[1];
 8004f0a:	783b      	ldrb	r3, [r7, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	b21a      	sxth	r2, r3
 8004f10:	787b      	ldrb	r3, [r7, #1]
 8004f12:	b21b      	sxth	r3, r3
 8004f14:	4313      	orrs	r3, r2
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <getAccelerationRawData+0xb4>)
 8004f1c:	801a      	strh	r2, [r3, #0]
     YRaw=(RawDatas[2]<<8) | RawDatas[3];
 8004f1e:	78bb      	ldrb	r3, [r7, #2]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	b21a      	sxth	r2, r3
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <getAccelerationRawData+0xb8>)
 8004f30:	801a      	strh	r2, [r3, #0]
     ZRaw=(RawDatas[4]<<8) | RawDatas[5];
 8004f32:	793b      	ldrb	r3, [r7, #4]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	b21a      	sxth	r2, r3
 8004f38:	797b      	ldrb	r3, [r7, #5]
 8004f3a:	b21b      	sxth	r3, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	b21b      	sxth	r3, r3
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <getAccelerationRawData+0xbc>)
 8004f44:	801a      	strh	r2, [r3, #0]

     XRawReal=(float)XRaw/16384.00;
 8004f46:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <getAccelerationRawData+0xb4>)
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f52:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004fac <getAccelerationRawData+0xc0>
 8004f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f5a:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <getAccelerationRawData+0xc4>)
 8004f5c:	edc3 7a00 	vstr	s15, [r3]
     YRawReal=(float)YRaw/16384.00;
 8004f60:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <getAccelerationRawData+0xb8>)
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f6c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004fac <getAccelerationRawData+0xc0>
 8004f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f74:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <getAccelerationRawData+0xc8>)
 8004f76:	edc3 7a00 	vstr	s15, [r3]
     ZRawReal=(float)ZRaw/16384.00;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <getAccelerationRawData+0xbc>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f86:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004fac <getAccelerationRawData+0xc0>
 8004f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <getAccelerationRawData+0xcc>)
 8004f90:	edc3 7a00 	vstr	s15, [r3]




}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000290 	.word	0x20000290
 8004fa0:	200002e4 	.word	0x200002e4
 8004fa4:	20000404 	.word	0x20000404
 8004fa8:	20000244 	.word	0x20000244
 8004fac:	46800000 	.word	0x46800000
 8004fb0:	2000020c 	.word	0x2000020c
 8004fb4:	2000022c 	.word	0x2000022c
 8004fb8:	20000224 	.word	0x20000224

08004fbc <getGyroRawData>:

/*This function are used to read raw gyro datas and convert real datas...*/
void getGyroRawData()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af04      	add	r7, sp, #16
    uint8_t RawDatas[6];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, (uint16_t) 1, RawDatas, (uint16_t) 6 , 100);
 8004fc2:	2364      	movs	r3, #100	; 0x64
 8004fc4:	9302      	str	r3, [sp, #8]
 8004fc6:	2306      	movs	r3, #6
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	463b      	mov	r3, r7
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2301      	movs	r3, #1
 8004fd0:	2243      	movs	r2, #67	; 0x43
 8004fd2:	21d0      	movs	r1, #208	; 0xd0
 8004fd4:	4842      	ldr	r0, [pc, #264]	; (80050e0 <getGyroRawData+0x124>)
 8004fd6:	f7fc ff5b 	bl	8001e90 <HAL_I2C_Mem_Read>

    G_XRaw=(RawDatas[0]<<8) | RawDatas[1];
 8004fda:	783b      	ldrb	r3, [r7, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	b21a      	sxth	r2, r3
 8004fe0:	787b      	ldrb	r3, [r7, #1]
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b21b      	sxth	r3, r3
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <getGyroRawData+0x128>)
 8004fec:	801a      	strh	r2, [r3, #0]
    G_YRaw=(RawDatas[2]<<8) | RawDatas[3];
 8004fee:	78bb      	ldrb	r3, [r7, #2]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	b21a      	sxth	r2, r3
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b21b      	sxth	r3, r3
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <getGyroRawData+0x12c>)
 8005000:	801a      	strh	r2, [r3, #0]
    G_ZRaw=(RawDatas[4]<<8) | RawDatas[5];
 8005002:	793b      	ldrb	r3, [r7, #4]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	b21a      	sxth	r2, r3
 8005008:	797b      	ldrb	r3, [r7, #5]
 800500a:	b21b      	sxth	r3, r3
 800500c:	4313      	orrs	r3, r2
 800500e:	b21b      	sxth	r3, r3
 8005010:	b29a      	uxth	r2, r3
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <getGyroRawData+0x130>)
 8005014:	801a      	strh	r2, [r3, #0]
    if(calibration)
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <getGyroRawData+0x134>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d035      	beq.n	800508a <getGyroRawData+0xce>
    {
		G_XRaw-=calibrationGyro[0];
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <getGyroRawData+0x128>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800502a:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <getGyroRawData+0x138>)
 800502c:	edd3 7a00 	vldr	s15, [r3]
 8005030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005038:	ee17 3a90 	vmov	r3, s15
 800503c:	b29a      	uxth	r2, r3
 800503e:	4b29      	ldr	r3, [pc, #164]	; (80050e4 <getGyroRawData+0x128>)
 8005040:	801a      	strh	r2, [r3, #0]
		G_YRaw-=calibrationGyro[1];
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <getGyroRawData+0x12c>)
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <getGyroRawData+0x138>)
 8005050:	edd3 7a01 	vldr	s15, [r3, #4]
 8005054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505c:	ee17 3a90 	vmov	r3, s15
 8005060:	b29a      	uxth	r2, r3
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <getGyroRawData+0x12c>)
 8005064:	801a      	strh	r2, [r3, #0]
		G_ZRaw-=calibrationGyro[2];
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <getGyroRawData+0x130>)
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <getGyroRawData+0x138>)
 8005074:	edd3 7a02 	vldr	s15, [r3, #8]
 8005078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800507c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005080:	ee17 3a90 	vmov	r3, s15
 8005084:	b29a      	uxth	r2, r3
 8005086:	4b19      	ldr	r3, [pc, #100]	; (80050ec <getGyroRawData+0x130>)
 8005088:	801a      	strh	r2, [r3, #0]
    }

	G_X=(float) G_XRaw/ (float)131.0;
 800508a:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <getGyroRawData+0x128>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005096:	eddf 6a18 	vldr	s13, [pc, #96]	; 80050f8 <getGyroRawData+0x13c>
 800509a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <getGyroRawData+0x140>)
 80050a0:	edc3 7a00 	vstr	s15, [r3]
	G_Y=(float) G_YRaw/ (float)131.0;
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <getGyroRawData+0x12c>)
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050b0:	eddf 6a11 	vldr	s13, [pc, #68]	; 80050f8 <getGyroRawData+0x13c>
 80050b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <getGyroRawData+0x144>)
 80050ba:	edc3 7a00 	vstr	s15, [r3]
	G_Z=(float) G_ZRaw/ (float)131.0;
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <getGyroRawData+0x130>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050ca:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80050f8 <getGyroRawData+0x13c>
 80050ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <getGyroRawData+0x148>)
 80050d4:	edc3 7a00 	vstr	s15, [r3]
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000290 	.word	0x20000290
 80050e4:	20000234 	.word	0x20000234
 80050e8:	200001f0 	.word	0x200001f0
 80050ec:	200001d0 	.word	0x200001d0
 80050f0:	20000140 	.word	0x20000140
 80050f4:	20000134 	.word	0x20000134
 80050f8:	43030000 	.word	0x43030000
 80050fc:	200001e8 	.word	0x200001e8
 8005100:	20000228 	.word	0x20000228
 8005104:	20000238 	.word	0x20000238

08005108 <getAllDatas>:

/*Read all datas and convert them to real values. Then, find degree*/

void getAllDatas()
{
 8005108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800510c:	b089      	sub	sp, #36	; 0x24
 800510e:	af00      	add	r7, sp, #0
	getAccelerationRawData();
 8005110:	f7ff feec 	bl	8004eec <getAccelerationRawData>
	getGyroRawData();
 8005114:	f7ff ff52 	bl	8004fbc <getGyroRawData>

	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8005118:	f7fb ff74 	bl	8001004 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	4b88      	ldr	r3, [pc, #544]	; (8005340 <getAllDatas+0x238>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	4618      	mov	r0, r3
 8005126:	f7fb f9ed 	bl	8000504 <__aeabi_ui2d>
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	4b85      	ldr	r3, [pc, #532]	; (8005344 <getAllDatas+0x23c>)
 8005130:	f7fb fb8c 	bl	800084c <__aeabi_ddiv>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	e9c7 3404 	strd	r3, r4, [r7, #16]
	timer = HAL_GetTick();
 800513c:	f7fb ff62 	bl	8001004 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	4b7f      	ldr	r3, [pc, #508]	; (8005340 <getAllDatas+0x238>)
 8005144:	601a      	str	r2, [r3, #0]
	double roll;
	double roll_sqrt = sqrt(XRaw *XRaw + ZRaw * ZRaw);
 8005146:	4b80      	ldr	r3, [pc, #512]	; (8005348 <getAllDatas+0x240>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	4b7e      	ldr	r3, [pc, #504]	; (8005348 <getAllDatas+0x240>)
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	fb03 f202 	mul.w	r2, r3, r2
 8005154:	4b7d      	ldr	r3, [pc, #500]	; (800534c <getAllDatas+0x244>)
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	4619      	mov	r1, r3
 800515a:	4b7c      	ldr	r3, [pc, #496]	; (800534c <getAllDatas+0x244>)
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	fb03 f301 	mul.w	r3, r3, r1
 8005162:	4413      	add	r3, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f7fb f9dd 	bl	8000524 <__aeabi_i2d>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	ec44 3b10 	vmov	d0, r3, r4
 8005172:	f002 fa7d 	bl	8007670 <sqrt>
 8005176:	ed87 0b02 	vstr	d0, [r7, #8]
	roll = atan(YRaw / roll_sqrt) * RAD_TO_DEG;
 800517a:	4b75      	ldr	r3, [pc, #468]	; (8005350 <getAllDatas+0x248>)
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fb f9d0 	bl	8000524 <__aeabi_i2d>
 8005184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005188:	f7fb fb60 	bl	800084c <__aeabi_ddiv>
 800518c:	4603      	mov	r3, r0
 800518e:	460c      	mov	r4, r1
 8005190:	ec44 3b17 	vmov	d7, r3, r4
 8005194:	eeb0 0a47 	vmov.f32	s0, s14
 8005198:	eef0 0a67 	vmov.f32	s1, s15
 800519c:	f002 f8bc 	bl	8007318 <atan>
 80051a0:	ec51 0b10 	vmov	r0, r1, d0
 80051a4:	a364      	add	r3, pc, #400	; (adr r3, 8005338 <getAllDatas+0x230>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb fa25 	bl	80005f8 <__aeabi_dmul>
 80051ae:	4603      	mov	r3, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	if (roll_sqrt != 0.0) {}
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051c2:	f7fb fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <getAllDatas+0xd0>
	else { roll = 0.0; }
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double pitch = atan2(-XRaw, ZRaw) * RAD_TO_DEG;
 80051d8:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <getAllDatas+0x240>)
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	425b      	negs	r3, r3
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb f9a0 	bl	8000524 <__aeabi_i2d>
 80051e4:	4680      	mov	r8, r0
 80051e6:	4689      	mov	r9, r1
 80051e8:	4b58      	ldr	r3, [pc, #352]	; (800534c <getAllDatas+0x244>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb f989 	bl	8000504 <__aeabi_ui2d>
 80051f2:	4603      	mov	r3, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	ec44 3b11 	vmov	d1, r3, r4
 80051fa:	ec49 8b10 	vmov	d0, r8, r9
 80051fe:	f002 fa34 	bl	800766a <atan2>
 8005202:	ec51 0b10 	vmov	r0, r1, d0
 8005206:	a34c      	add	r3, pc, #304	; (adr r3, 8005338 <getAllDatas+0x230>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fb f9f4 	bl	80005f8 <__aeabi_dmul>
 8005210:	4603      	mov	r3, r0
 8005212:	460c      	mov	r4, r1
 8005214:	e9c7 3400 	strd	r3, r4, [r7]


	if ((pitch < -90 && KalmanAngleY > 90) || (pitch > 90 && KalmanAngleY < -90))
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	4b4d      	ldr	r3, [pc, #308]	; (8005354 <getAllDatas+0x24c>)
 800521e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005222:	f7fb fc5b 	bl	8000adc <__aeabi_dcmplt>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <getAllDatas+0x13a>
 800522c:	4b4a      	ldr	r3, [pc, #296]	; (8005358 <getAllDatas+0x250>)
 800522e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	4b49      	ldr	r3, [pc, #292]	; (800535c <getAllDatas+0x254>)
 8005238:	f7fb fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <getAllDatas+0x164>
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	4b45      	ldr	r3, [pc, #276]	; (800535c <getAllDatas+0x254>)
 8005248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800524c:	f7fb fc64 	bl	8000b18 <__aeabi_dcmpgt>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d015      	beq.n	8005282 <getAllDatas+0x17a>
 8005256:	4b40      	ldr	r3, [pc, #256]	; (8005358 <getAllDatas+0x250>)
 8005258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	4b3c      	ldr	r3, [pc, #240]	; (8005354 <getAllDatas+0x24c>)
 8005262:	f7fb fc3b 	bl	8000adc <__aeabi_dcmplt>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <getAllDatas+0x17a>
	{
	        KalmanY.angle = pitch;
 800526c:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <getAllDatas+0x258>)
 800526e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005272:	e9c2 3406 	strd	r3, r4, [r2, #24]
	        KalmanAngleY = pitch;
 8005276:	4a38      	ldr	r2, [pc, #224]	; (8005358 <getAllDatas+0x250>)
 8005278:	e9d7 3400 	ldrd	r3, r4, [r7]
 800527c:	e9c2 3400 	strd	r3, r4, [r2]
 8005280:	e016      	b.n	80052b0 <getAllDatas+0x1a8>
	}
	else
	{
	        KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, YRawReal, dt);
 8005282:	4b38      	ldr	r3, [pc, #224]	; (8005364 <getAllDatas+0x25c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb f95e 	bl	8000548 <__aeabi_f2d>
 800528c:	4603      	mov	r3, r0
 800528e:	460c      	mov	r4, r1
 8005290:	ed97 2b04 	vldr	d2, [r7, #16]
 8005294:	ec44 3b11 	vmov	d1, r3, r4
 8005298:	ed97 0b00 	vldr	d0, [r7]
 800529c:	4830      	ldr	r0, [pc, #192]	; (8005360 <getAllDatas+0x258>)
 800529e:	f000 f86d 	bl	800537c <Kalman_getAngle>
 80052a2:	eeb0 7a40 	vmov.f32	s14, s0
 80052a6:	eef0 7a60 	vmov.f32	s15, s1
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <getAllDatas+0x250>)
 80052ac:	ed83 7b00 	vstr	d7, [r3]
	}
	if (fabs(KalmanAngleY) > 90)
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <getAllDatas+0x250>)
 80052b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b6:	461d      	mov	r5, r3
 80052b8:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <getAllDatas+0x254>)
 80052c2:	4628      	mov	r0, r5
 80052c4:	4631      	mov	r1, r6
 80052c6:	f7fb fc27 	bl	8000b18 <__aeabi_dcmpgt>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <getAllDatas+0x1d8>
	        XRawReal = -XRawReal;
 80052d0:	4b25      	ldr	r3, [pc, #148]	; (8005368 <getAllDatas+0x260>)
 80052d2:	edd3 7a00 	vldr	s15, [r3]
 80052d6:	eef1 7a67 	vneg.f32	s15, s15
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <getAllDatas+0x260>)
 80052dc:	edc3 7a00 	vstr	s15, [r3]

	KalmanAngleX = Kalman_getAngle(&KalmanX, roll, YRawReal, dt);
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <getAllDatas+0x25c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fb f92f 	bl	8000548 <__aeabi_f2d>
 80052ea:	4603      	mov	r3, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	ed97 2b04 	vldr	d2, [r7, #16]
 80052f2:	ec44 3b11 	vmov	d1, r3, r4
 80052f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80052fa:	481c      	ldr	r0, [pc, #112]	; (800536c <getAllDatas+0x264>)
 80052fc:	f000 f83e 	bl	800537c <Kalman_getAngle>
 8005300:	eeb0 7a40 	vmov.f32	s14, s0
 8005304:	eef0 7a60 	vmov.f32	s15, s1
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <getAllDatas+0x268>)
 800530a:	ed83 7b00 	vstr	d7, [r3]

    ROLL=roll;
 800530e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005312:	f7fb fc41 	bl	8000b98 <__aeabi_d2f>
 8005316:	4602      	mov	r2, r0
 8005318:	4b16      	ldr	r3, [pc, #88]	; (8005374 <getAllDatas+0x26c>)
 800531a:	601a      	str	r2, [r3, #0]
    PITCH=pitch;
 800531c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005320:	f7fb fc3a 	bl	8000b98 <__aeabi_d2f>
 8005324:	4602      	mov	r2, r0
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <getAllDatas+0x270>)
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3724      	adds	r7, #36	; 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005334:	f3af 8000 	nop.w
 8005338:	1a63c1f8 	.word	0x1a63c1f8
 800533c:	404ca5dc 	.word	0x404ca5dc
 8005340:	200001e0 	.word	0x200001e0
 8005344:	408f4000 	.word	0x408f4000
 8005348:	200002e4 	.word	0x200002e4
 800534c:	20000244 	.word	0x20000244
 8005350:	20000404 	.word	0x20000404
 8005354:	c0568000 	.word	0xc0568000
 8005358:	200001d8 	.word	0x200001d8
 800535c:	40568000 	.word	0x40568000
 8005360:	20000050 	.word	0x20000050
 8005364:	2000022c 	.word	0x2000022c
 8005368:	2000020c 	.word	0x2000020c
 800536c:	20000008 	.word	0x20000008
 8005370:	20000200 	.word	0x20000200
 8005374:	20000144 	.word	0x20000144
 8005378:	20000148 	.word	0x20000148

0800537c <Kalman_getAngle>:


double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800537c:	b5b0      	push	{r4, r5, r7, lr}
 800537e:	b096      	sub	sp, #88	; 0x58
 8005380:	af00      	add	r7, sp, #0
 8005382:	61f8      	str	r0, [r7, #28]
 8005384:	ed87 0b04 	vstr	d0, [r7, #16]
 8005388:	ed87 1b02 	vstr	d1, [r7, #8]
 800538c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800539e:	f7fa ff73 	bl	8000288 <__aeabi_dsub>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80053b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053b8:	f7fb f91e 	bl	80005f8 <__aeabi_dmul>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4620      	mov	r0, r4
 80053c2:	4629      	mov	r1, r5
 80053c4:	f7fa ff62 	bl	800028c <__adddf3>
 80053c8:	4603      	mov	r3, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80053de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e2:	f7fb f909 	bl	80005f8 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80053f4:	f7fa ff48 	bl	8000288 <__aeabi_dsub>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005406:	f7fa ff3f 	bl	8000288 <__aeabi_dsub>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa ff38 	bl	800028c <__adddf3>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	f7fb f8e6 	bl	80005f8 <__aeabi_dmul>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4620      	mov	r0, r4
 8005432:	4629      	mov	r1, r5
 8005434:	f7fa ff2a 	bl	800028c <__adddf3>
 8005438:	4603      	mov	r3, r0
 800543a:	460c      	mov	r4, r1
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800544e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005452:	f7fb f8d1 	bl	80005f8 <__aeabi_dmul>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fa ff13 	bl	8000288 <__aeabi_dsub>
 8005462:	4603      	mov	r3, r0
 8005464:	460c      	mov	r4, r1
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547c:	f7fb f8bc 	bl	80005f8 <__aeabi_dmul>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	f7fa fefe 	bl	8000288 <__aeabi_dsub>
 800548c:	4603      	mov	r3, r0
 800548e:	460c      	mov	r4, r1
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80054a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a6:	f7fb f8a7 	bl	80005f8 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fa feeb 	bl	800028c <__adddf3>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4623      	mov	r3, r4
 80054d0:	f7fa fedc 	bl	800028c <__adddf3>
 80054d4:	4603      	mov	r3, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80054e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054e6:	f7fb f9b1 	bl	800084c <__aeabi_ddiv>
 80054ea:	4603      	mov	r3, r0
 80054ec:	460c      	mov	r4, r1
 80054ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80054f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054fc:	f7fb f9a6 	bl	800084c <__aeabi_ddiv>
 8005500:	4603      	mov	r3, r0
 8005502:	460c      	mov	r4, r1
 8005504:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800550e:	461a      	mov	r2, r3
 8005510:	4623      	mov	r3, r4
 8005512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005516:	f7fa feb7 	bl	8000288 <__aeabi_dsub>
 800551a:	4603      	mov	r3, r0
 800551c:	460c      	mov	r4, r1
 800551e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005528:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800552c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005530:	f7fb f862 	bl	80005f8 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fa fea6 	bl	800028c <__adddf3>
 8005540:	4603      	mov	r3, r0
 8005542:	460c      	mov	r4, r1
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005550:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005554:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005558:	f7fb f84e 	bl	80005f8 <__aeabi_dmul>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4620      	mov	r0, r4
 8005562:	4629      	mov	r1, r5
 8005564:	f7fa fe92 	bl	800028c <__adddf3>
 8005568:	4603      	mov	r3, r0
 800556a:	460c      	mov	r4, r1
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005578:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005582:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800558c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005594:	f7fb f830 	bl	80005f8 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4620      	mov	r0, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	f7fa fe72 	bl	8000288 <__aeabi_dsub>
 80055a4:	4603      	mov	r3, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80055b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80055b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055bc:	f7fb f81c 	bl	80005f8 <__aeabi_dmul>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fa fe5e 	bl	8000288 <__aeabi_dsub>
 80055cc:	4603      	mov	r3, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80055dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055e4:	f7fb f808 	bl	80005f8 <__aeabi_dmul>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	f7fa fe4a 	bl	8000288 <__aeabi_dsub>
 80055f4:	4603      	mov	r3, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005604:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005608:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800560c:	f7fa fff4 	bl	80005f8 <__aeabi_dmul>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7fa fe36 	bl	8000288 <__aeabi_dsub>
 800561c:	4603      	mov	r3, r0
 800561e:	460c      	mov	r4, r1
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800562c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005630:	eeb0 0a47 	vmov.f32	s0, s14
 8005634:	eef0 0a67 	vmov.f32	s1, s15
 8005638:	3758      	adds	r7, #88	; 0x58
 800563a:	46bd      	mov	sp, r7
 800563c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005640 <getRoll>:

float getRoll()
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0

    return ROLL;
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <getRoll+0x18>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	ee07 3a90 	vmov	s15, r3
}
 800564c:	eeb0 0a67 	vmov.f32	s0, s15
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	20000144 	.word	0x20000144

0800565c <getPitch>:

float getPitch()
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
    return PITCH;
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <getPitch+0x18>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	ee07 3a90 	vmov	s15, r3
}
 8005668:	eeb0 0a67 	vmov.f32	s0, s15
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000148 	.word	0x20000148

08005678 <MPU6050Calibration>:
	return temperature;
}


void MPU6050Calibration(int time)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

     sampleTime=(float) time/1000;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800568a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8005770 <MPU6050Calibration+0xf8>
 800568e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005692:	4b38      	ldr	r3, [pc, #224]	; (8005774 <MPU6050Calibration+0xfc>)
 8005694:	edc3 7a00 	vstr	s15, [r3]
     for(int i=0;i<50;i++)
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e039      	b.n	8005712 <MPU6050Calibration+0x9a>
     {
    	 __HAL_TIM_SET_COUNTER(&htim1,0);
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <MPU6050Calibration+0x100>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24
    	 getGyroRawData();
 80056a6:	f7ff fc89 	bl	8004fbc <getGyroRawData>
    	 calibrationGyro[0]+=G_XRaw;
 80056aa:	4b34      	ldr	r3, [pc, #208]	; (800577c <MPU6050Calibration+0x104>)
 80056ac:	ed93 7a00 	vldr	s14, [r3]
 80056b0:	4b33      	ldr	r3, [pc, #204]	; (8005780 <MPU6050Calibration+0x108>)
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c0:	4b2e      	ldr	r3, [pc, #184]	; (800577c <MPU6050Calibration+0x104>)
 80056c2:	edc3 7a00 	vstr	s15, [r3]
    	 calibrationGyro[1]+=G_YRaw;
 80056c6:	4b2d      	ldr	r3, [pc, #180]	; (800577c <MPU6050Calibration+0x104>)
 80056c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80056cc:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <MPU6050Calibration+0x10c>)
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <MPU6050Calibration+0x104>)
 80056de:	edc3 7a01 	vstr	s15, [r3, #4]
    	 calibrationGyro[2]+=G_ZRaw;
 80056e2:	4b26      	ldr	r3, [pc, #152]	; (800577c <MPU6050Calibration+0x104>)
 80056e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <MPU6050Calibration+0x110>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056f8:	4b20      	ldr	r3, [pc, #128]	; (800577c <MPU6050Calibration+0x104>)
 80056fa:	edc3 7a02 	vstr	s15, [r3, #8]

    	 while(__HAL_TIM_GET_COUNTER(&htim1)<4000);
 80056fe:	bf00      	nop
 8005700:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <MPU6050Calibration+0x100>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800570a:	d3f9      	bcc.n	8005700 <MPU6050Calibration+0x88>
     for(int i=0;i<50;i++)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3301      	adds	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b31      	cmp	r3, #49	; 0x31
 8005716:	ddc2      	ble.n	800569e <MPU6050Calibration+0x26>
     }

     for(int i=0;i<3;i++) calibrationGyro[i]/=50.0;
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	e012      	b.n	8005744 <MPU6050Calibration+0xcc>
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <MPU6050Calibration+0x104>)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	ed93 7a00 	vldr	s14, [r3]
 800572a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800578c <MPU6050Calibration+0x114>
 800572e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005732:	4a12      	ldr	r2, [pc, #72]	; (800577c <MPU6050Calibration+0x104>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	edc3 7a00 	vstr	s15, [r3]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	3301      	adds	r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b02      	cmp	r3, #2
 8005748:	dde9      	ble.n	800571e <MPU6050Calibration+0xa6>
     calibration=1;
 800574a:	4b11      	ldr	r3, [pc, #68]	; (8005790 <MPU6050Calibration+0x118>)
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
     Calib_X=calibrationGyro[0];
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <MPU6050Calibration+0x104>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0f      	ldr	r2, [pc, #60]	; (8005794 <MPU6050Calibration+0x11c>)
 8005756:	6013      	str	r3, [r2, #0]
     Calib_Y=calibrationGyro[1];
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <MPU6050Calibration+0x104>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a0e      	ldr	r2, [pc, #56]	; (8005798 <MPU6050Calibration+0x120>)
 800575e:	6013      	str	r3, [r2, #0]
     Calib_Z=calibrationGyro[2];
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <MPU6050Calibration+0x104>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <MPU6050Calibration+0x124>)
 8005766:	6013      	str	r3, [r2, #0]



}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	447a0000 	.word	0x447a0000
 8005774:	20000098 	.word	0x20000098
 8005778:	200003c4 	.word	0x200003c4
 800577c:	20000134 	.word	0x20000134
 8005780:	20000234 	.word	0x20000234
 8005784:	200001f0 	.word	0x200001f0
 8005788:	200001d0 	.word	0x200001d0
 800578c:	42480000 	.word	0x42480000
 8005790:	20000140 	.word	0x20000140
 8005794:	200001e4 	.word	0x200001e4
 8005798:	20000230 	.word	0x20000230
 800579c:	20000208 	.word	0x20000208

080057a0 <setCalibrationValue>:
    return 	angle_Roll;
}


void setCalibrationValue(uint32_t X,uint32_t Y,uint32_t Z)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	calibrationGyro[0]=X;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <setCalibrationValue+0x48>)
 80057b8:	edc3 7a00 	vstr	s15, [r3]
	calibrationGyro[1]=Y;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <setCalibrationValue+0x48>)
 80057c8:	edc3 7a01 	vstr	s15, [r3, #4]
	calibrationGyro[2]=Z;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <setCalibrationValue+0x48>)
 80057d8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20000134 	.word	0x20000134

080057ec <X_calib>:

float X_calib()
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
   return Calib_X;
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <X_calib+0x18>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	ee07 3a90 	vmov	s15, r3
}
 80057f8:	eeb0 0a67 	vmov.f32	s0, s15
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	200001e4 	.word	0x200001e4

08005808 <Y_calib>:


float Y_calib()
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
   return Calib_Y;
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <Y_calib+0x18>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	ee07 3a90 	vmov	s15, r3
}
 8005814:	eeb0 0a67 	vmov.f32	s0, s15
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000230 	.word	0x20000230

08005824 <Z_calib>:


float Z_calib()
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
   return Calib_Z;
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <Z_calib+0x18>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	ee07 3a90 	vmov	s15, r3
}
 8005830:	eeb0 0a67 	vmov.f32	s0, s15
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20000208 	.word	0x20000208

08005840 <EXTI0_IRQHandler>:
/* USER CODE BEGIN PFP */

//For new game starting.

void EXTI0_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
    newGame=1;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <EXTI0_IRQHandler+0x14>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800584a:	2001      	movs	r0, #1
 800584c:	f7fc f8ca 	bl	80019e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005850:	bf00      	nop
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000016d 	.word	0x2000016d

08005858 <TIM2_IRQHandler>:


//Servo drive timer

void TIM2_IRQHandler(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	timeCount++;
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <TIM2_IRQHandler+0x18>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	4a03      	ldr	r2, [pc, #12]	; (8005870 <TIM2_IRQHandler+0x18>)
 8005864:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005866:	4803      	ldr	r0, [pc, #12]	; (8005874 <TIM2_IRQHandler+0x1c>)
 8005868:	f7fd fdd3 	bl	8003412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800586c:	bf00      	nop
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000198 	.word	0x20000198
 8005874:	2000040c 	.word	0x2000040c

08005878 <HAL_TIM_IC_CaptureCallback>:

//For HCSR-04 measurement. When Echo pin is high, timer1 is starting to measure time. Then, when echo pin is low, timer1 stop to measure time.
//This measured time value give us distance.

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7f1b      	ldrb	r3, [r3, #28]
 8005884:	2b01      	cmp	r3, #1
 8005886:	f040 8099 	bne.w	80059bc <HAL_TIM_IC_CaptureCallback+0x144>
	{
		if (captureFirst==0)
 800588a:	4b51      	ldr	r3, [pc, #324]	; (80059d0 <HAL_TIM_IC_CaptureCallback+0x158>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f083 0301 	eor.w	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01a      	beq.n	80058ce <HAL_TIM_IC_CaptureCallback+0x56>
		{

			FirstValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8005898:	2100      	movs	r1, #0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fe f8dc 	bl	8003a58 <HAL_TIM_ReadCapturedValue>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b4c      	ldr	r3, [pc, #304]	; (80059d4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80058a4:	601a      	str	r2, [r3, #0]
			captureFirst = 1;
 80058a6:	4b4a      	ldr	r3, [pc, #296]	; (80059d0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a1a      	ldr	r2, [r3, #32]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 020a 	bic.w	r2, r2, #10
 80058ba:	621a      	str	r2, [r3, #32]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0202 	orr.w	r2, r2, #2
 80058ca:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 80058cc:	e076      	b.n	80059bc <HAL_TIM_IC_CaptureCallback+0x144>
		else if (captureFirst==1)
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d072      	beq.n	80059bc <HAL_TIM_IC_CaptureCallback+0x144>
			SecondValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80058d6:	2100      	movs	r1, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fe f8bd 	bl	8003a58 <HAL_TIM_ReadCapturedValue>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b3d      	ldr	r3, [pc, #244]	; (80059d8 <HAL_TIM_IC_CaptureCallback+0x160>)
 80058e2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2200      	movs	r2, #0
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
			if (SecondValue > FirstValue)
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <HAL_TIM_IC_CaptureCallback+0x160>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b38      	ldr	r3, [pc, #224]	; (80059d4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d907      	bls.n	8005908 <HAL_TIM_IC_CaptureCallback+0x90>
				timeDistance = SecondValue-FirstValue;
 80058f8:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HAL_TIM_IC_CaptureCallback+0x160>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	4a36      	ldr	r2, [pc, #216]	; (80059dc <HAL_TIM_IC_CaptureCallback+0x164>)
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e00d      	b.n	8005924 <HAL_TIM_IC_CaptureCallback+0xac>
			else if (FirstValue > SecondValue)
 8005908:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <HAL_TIM_IC_CaptureCallback+0x160>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d907      	bls.n	8005924 <HAL_TIM_IC_CaptureCallback+0xac>
				timeDistance = (255 - FirstValue) + SecondValue;
 8005914:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b2e      	ldr	r3, [pc, #184]	; (80059d4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	33ff      	adds	r3, #255	; 0xff
 8005920:	4a2e      	ldr	r2, [pc, #184]	; (80059dc <HAL_TIM_IC_CaptureCallback+0x164>)
 8005922:	6013      	str	r3, [r2, #0]
			distance = timeDistance * .034/2;
 8005924:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <HAL_TIM_IC_CaptureCallback+0x164>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fa fdeb 	bl	8000504 <__aeabi_ui2d>
 800592e:	a326      	add	r3, pc, #152	; (adr r3, 80059c8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fa fe60 	bl	80005f8 <__aeabi_dmul>
 8005938:	4603      	mov	r3, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4618      	mov	r0, r3
 800593e:	4621      	mov	r1, r4
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005948:	f7fa ff80 	bl	800084c <__aeabi_ddiv>
 800594c:	4603      	mov	r3, r0
 800594e:	460c      	mov	r4, r1
 8005950:	4618      	mov	r0, r3
 8005952:	4621      	mov	r1, r4
 8005954:	f7fb f900 	bl	8000b58 <__aeabi_d2uiz>
 8005958:	4602      	mov	r2, r0
 800595a:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800595c:	601a      	str	r2, [r3, #0]
			if(distance>0 && distance<400)
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_TIM_IC_CaptureCallback+0x106>
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800596e:	d206      	bcs.n	800597e <HAL_TIM_IC_CaptureCallback+0x106>
			   captureFirst = 0; // set it back to false
 8005970:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <HAL_TIM_IC_CaptureCallback+0x158>)
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
			   distanceFound=1;
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e008      	b.n	8005990 <HAL_TIM_IC_CaptureCallback+0x118>
				captureFirst = 0; // set it back to false
 800597e:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <HAL_TIM_IC_CaptureCallback+0x158>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
				distanceFound=0;
 8005984:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
				distance=0;
 800598a:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 020a 	bic.w	r2, r2, #10
 800599e:	621a      	str	r2, [r3, #32]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a12      	ldr	r2, [r2, #32]
 80059aa:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_TIM_IC_CaptureCallback+0x170>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_TIM_IC_CaptureCallback+0x170>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0202 	bic.w	r2, r2, #2
 80059ba:	60da      	str	r2, [r3, #12]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd90      	pop	{r4, r7, pc}
 80059c4:	f3af 8000 	nop.w
 80059c8:	b020c49c 	.word	0xb020c49c
 80059cc:	3fa16872 	.word	0x3fa16872
 80059d0:	2000014c 	.word	0x2000014c
 80059d4:	20000158 	.word	0x20000158
 80059d8:	2000015c 	.word	0x2000015c
 80059dc:	20000150 	.word	0x20000150
 80059e0:	20000154 	.word	0x20000154
 80059e4:	20000169 	.word	0x20000169
 80059e8:	200003c4 	.word	0x200003c4

080059ec <Write_To_Flash>:



void Write_To_Flash(uint32_t myData,uint32_t myAddress)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]

      HAL_FLASH_Unlock();
 80059f6:	f7fb fc99 	bl	800132c <HAL_FLASH_Unlock>
      FLASH_Erase_Sector(FLASH_SECTOR_11, FLASH_VOLTAGE_RANGE_3);
 80059fa:	2102      	movs	r1, #2
 80059fc:	200b      	movs	r0, #11
 80059fe:	f7fb fdf5 	bl	80015ec <FLASH_Erase_Sector>
      HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, myAddress, myData);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	2002      	movs	r0, #2
 8005a10:	f7fb fc38 	bl	8001284 <HAL_FLASH_Program>
      HAL_FLASH_Lock();
 8005a14:	f7fb fcac 	bl	8001370 <HAL_FLASH_Lock>

}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd90      	pop	{r4, r7, pc}

08005a20 <Read_From_Flash>:


uint32_t Read_From_Flash(uint32_t myAddress)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	uint32_t readData;
	readData=*(uint32_t*)myAddress;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]

    return readData;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <delay>:

//Delay function for HCSR-04. For starting HCSR-04, first you have to pull trigger pin logic-1. After 10us, pull logic-0.
//Then active Timer input capture and measure distance.

void delay(uint32_t us)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
     __HAL_TIM_SET_COUNTER(&htim1,0);
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <delay+0x2c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
     while(__HAL_TIM_GET_COUNTER(&htim1)<us);
 8005a4c:	bf00      	nop
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <delay+0x2c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d8f9      	bhi.n	8005a4e <delay+0x12>
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	200003c4 	.word	0x200003c4

08005a6c <HCSR04_ReadDistance>:

void HCSR04_ReadDistance (void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a76:	4811      	ldr	r0, [pc, #68]	; (8005abc <HCSR04_ReadDistance+0x50>)
 8005a78:	f7fb ff9a 	bl	80019b0 <HAL_GPIO_WritePin>
     delay(1000);
 8005a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a80:	f7ff ffdc 	bl	8005a3c <delay>



     timeCount=0;
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <HCSR04_ReadDistance+0x54>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a90:	480a      	ldr	r0, [pc, #40]	; (8005abc <HCSR04_ReadDistance+0x50>)
 8005a92:	f7fb ff8d 	bl	80019b0 <HAL_GPIO_WritePin>
	 delay(10);
 8005a96:	200a      	movs	r0, #10
 8005a98:	f7ff ffd0 	bl	8005a3c <delay>
	 HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005aa2:	4806      	ldr	r0, [pc, #24]	; (8005abc <HCSR04_ReadDistance+0x50>)
 8005aa4:	f7fb ff84 	bl	80019b0 <HAL_GPIO_WritePin>
	 __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <HCSR04_ReadDistance+0x58>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HCSR04_ReadDistance+0x58>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0202 	orr.w	r2, r2, #2
 8005ab6:	60da      	str	r2, [r3, #12]


}
 8005ab8:	bf00      	nop
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	20000198 	.word	0x20000198
 8005ac4:	200003c4 	.word	0x200003c4

08005ac8 <servoAct>:



void servoAct(uint32_t pulse)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4809      	ldr	r0, [pc, #36]	; (8005af8 <servoAct+0x30>)
 8005ad4:	f7fd fc12 	bl	80032fc <HAL_TIM_PWM_Start>

	   __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, 500+pulse*40);
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <servoAct+0x30>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8005aec:	635a      	str	r2, [r3, #52]	; 0x34

}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000248 	.word	0x20000248

08005afc <ledDrive>:
}

//Led PWM

void ledDrive(uint32_t pulse)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

	   __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,pulse);
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <ledDrive+0x1c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	200002e8 	.word	0x200002e8

08005b1c <sendDataviaUART>:

//Send message buffer via uart to PC

void sendDataviaUART()
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
     HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message),150);
 8005b20:	4805      	ldr	r0, [pc, #20]	; (8005b38 <sendDataviaUART+0x1c>)
 8005b22:	f7fa fb55 	bl	80001d0 <strlen>
 8005b26:	4603      	mov	r3, r0
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	2396      	movs	r3, #150	; 0x96
 8005b2c:	4902      	ldr	r1, [pc, #8]	; (8005b38 <sendDataviaUART+0x1c>)
 8005b2e:	4803      	ldr	r0, [pc, #12]	; (8005b3c <sendDataviaUART+0x20>)
 8005b30:	f7fe fd15 	bl	800455e <HAL_UART_Transmit>

}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000328 	.word	0x20000328
 8005b3c:	20000450 	.word	0x20000450

08005b40 <calibrationStage>:

//This function is necessary for calibrating MPU6050 sensor.

void calibrationStage()
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
	  Write_To_Flash(0xFFFFFFFF,CALIB_OK);
 8005b44:	4944      	ldr	r1, [pc, #272]	; (8005c58 <calibrationStage+0x118>)
 8005b46:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4a:	f7ff ff4f 	bl	80059ec <Write_To_Flash>
	  HAL_Delay(100);
 8005b4e:	2064      	movs	r0, #100	; 0x64
 8005b50:	f7fb fa64 	bl	800101c <HAL_Delay>

	  if(Read_From_Flash(CALIB_OK) == 0xFFFFFFFF)
 8005b54:	4840      	ldr	r0, [pc, #256]	; (8005c58 <calibrationStage+0x118>)
 8005b56:	f7ff ff63 	bl	8005a20 <Read_From_Flash>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d13c      	bne.n	8005bdc <calibrationStage+0x9c>
	  {


		  MPU6050Calibration(5);
 8005b62:	2005      	movs	r0, #5
 8005b64:	f7ff fd88 	bl	8005678 <MPU6050Calibration>
		  X_cal=X_calib();
 8005b68:	f7ff fe40 	bl	80057ec <X_calib>
 8005b6c:	eef0 7a40 	vmov.f32	s15, s0
 8005b70:	4b3a      	ldr	r3, [pc, #232]	; (8005c5c <calibrationStage+0x11c>)
 8005b72:	edc3 7a00 	vstr	s15, [r3]
		  Y_cal=Y_calib();
 8005b76:	f7ff fe47 	bl	8005808 <Y_calib>
 8005b7a:	eef0 7a40 	vmov.f32	s15, s0
 8005b7e:	4b38      	ldr	r3, [pc, #224]	; (8005c60 <calibrationStage+0x120>)
 8005b80:	edc3 7a00 	vstr	s15, [r3]
		  Z_cal=Z_calib();
 8005b84:	f7ff fe4e 	bl	8005824 <Z_calib>
 8005b88:	eef0 7a40 	vmov.f32	s15, s0
 8005b8c:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <calibrationStage+0x124>)
 8005b8e:	edc3 7a00 	vstr	s15, [r3]

		  Write_To_Flash((uint32_t)X_cal , X_CALIB);
 8005b92:	4b32      	ldr	r3, [pc, #200]	; (8005c5c <calibrationStage+0x11c>)
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9c:	4932      	ldr	r1, [pc, #200]	; (8005c68 <calibrationStage+0x128>)
 8005b9e:	ee17 0a90 	vmov	r0, s15
 8005ba2:	f7ff ff23 	bl	80059ec <Write_To_Flash>
		  Write_To_Flash((uint32_t)Y_cal , Y_CALIB);
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <calibrationStage+0x120>)
 8005ba8:	edd3 7a00 	vldr	s15, [r3]
 8005bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb0:	492e      	ldr	r1, [pc, #184]	; (8005c6c <calibrationStage+0x12c>)
 8005bb2:	ee17 0a90 	vmov	r0, s15
 8005bb6:	f7ff ff19 	bl	80059ec <Write_To_Flash>
		  Write_To_Flash((uint32_t)Z_cal , Z_CALIB);
 8005bba:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <calibrationStage+0x124>)
 8005bbc:	edd3 7a00 	vldr	s15, [r3]
 8005bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc4:	492a      	ldr	r1, [pc, #168]	; (8005c70 <calibrationStage+0x130>)
 8005bc6:	ee17 0a90 	vmov	r0, s15
 8005bca:	f7ff ff0f 	bl	80059ec <Write_To_Flash>
		  Write_To_Flash(sampleT,CALIB_OK);
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <calibrationStage+0x134>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4921      	ldr	r1, [pc, #132]	; (8005c58 <calibrationStage+0x118>)
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff ff09 	bl	80059ec <Write_To_Flash>

	  }



}
 8005bda:	e03b      	b.n	8005c54 <calibrationStage+0x114>
	      setSampleTime(Read_From_Flash(CALIB_OK));
 8005bdc:	481e      	ldr	r0, [pc, #120]	; (8005c58 <calibrationStage+0x118>)
 8005bde:	f7ff ff1f 	bl	8005a20 <Read_From_Flash>
 8005be2:	4603      	mov	r3, r0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff f967 	bl	8004eb8 <setSampleTime>
	      X_cal=Read_From_Flash(X_CALIB);
 8005bea:	481f      	ldr	r0, [pc, #124]	; (8005c68 <calibrationStage+0x128>)
 8005bec:	f7ff ff18 	bl	8005a20 <Read_From_Flash>
 8005bf0:	ee07 0a90 	vmov	s15, r0
 8005bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf8:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <calibrationStage+0x11c>)
 8005bfa:	edc3 7a00 	vstr	s15, [r3]
	      Y_cal=Read_From_Flash(Y_CALIB);
 8005bfe:	481b      	ldr	r0, [pc, #108]	; (8005c6c <calibrationStage+0x12c>)
 8005c00:	f7ff ff0e 	bl	8005a20 <Read_From_Flash>
 8005c04:	ee07 0a90 	vmov	s15, r0
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <calibrationStage+0x120>)
 8005c0e:	edc3 7a00 	vstr	s15, [r3]
	      Z_cal=Read_From_Flash(Z_CALIB);
 8005c12:	4817      	ldr	r0, [pc, #92]	; (8005c70 <calibrationStage+0x130>)
 8005c14:	f7ff ff04 	bl	8005a20 <Read_From_Flash>
 8005c18:	ee07 0a90 	vmov	s15, r0
 8005c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <calibrationStage+0x124>)
 8005c22:	edc3 7a00 	vstr	s15, [r3]
	      setCalibrationValue(X_cal, Y_cal, Z_cal);
 8005c26:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <calibrationStage+0x11c>)
 8005c28:	edd3 7a00 	vldr	s15, [r3]
 8005c2c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <calibrationStage+0x120>)
 8005c32:	edd3 7a00 	vldr	s15, [r3]
 8005c36:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <calibrationStage+0x124>)
 8005c3c:	edd3 7a00 	vldr	s15, [r3]
 8005c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c44:	ee17 2a90 	vmov	r2, s15
 8005c48:	ee16 1a90 	vmov	r1, s13
 8005c4c:	ee17 0a10 	vmov	r0, s14
 8005c50:	f7ff fda6 	bl	80057a0 <setCalibrationValue>
}
 8005c54:	bf00      	nop
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	080e0030 	.word	0x080e0030
 8005c5c:	2000028c 	.word	0x2000028c
 8005c60:	20000240 	.word	0x20000240
 8005c64:	20000494 	.word	0x20000494
 8005c68:	080e0000 	.word	0x080e0000
 8005c6c:	080e0010 	.word	0x080e0010
 8005c70:	080e0020 	.word	0x080e0020
 8005c74:	2000009c 	.word	0x2000009c

08005c78 <firstOpenOfSystem>:


void firstOpenOfSystem()
{
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af04      	add	r7, sp, #16
		sprintf(message,"You've got 5 seconds to take first position your system\r");
 8005c7e:	4b8b      	ldr	r3, [pc, #556]	; (8005eac <firstOpenOfSystem+0x234>)
 8005c80:	4a8b      	ldr	r2, [pc, #556]	; (8005eb0 <firstOpenOfSystem+0x238>)
 8005c82:	4614      	mov	r4, r2
 8005c84:	469c      	mov	ip, r3
 8005c86:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005c8a:	4665      	mov	r5, ip
 8005c8c:	4626      	mov	r6, r4
 8005c8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c90:	6028      	str	r0, [r5, #0]
 8005c92:	6069      	str	r1, [r5, #4]
 8005c94:	60aa      	str	r2, [r5, #8]
 8005c96:	60eb      	str	r3, [r5, #12]
 8005c98:	3410      	adds	r4, #16
 8005c9a:	f10c 0c10 	add.w	ip, ip, #16
 8005c9e:	4574      	cmp	r4, lr
 8005ca0:	d1f3      	bne.n	8005c8a <firstOpenOfSystem+0x12>
 8005ca2:	4662      	mov	r2, ip
 8005ca4:	4623      	mov	r3, r4
 8005ca6:	cb03      	ldmia	r3!, {r0, r1}
 8005ca8:	6010      	str	r0, [r2, #0]
 8005caa:	6051      	str	r1, [r2, #4]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	7213      	strb	r3, [r2, #8]
		sendDataviaUART();
 8005cb0:	f7ff ff34 	bl	8005b1c <sendDataviaUART>

		SystickSecond=0;
 8005cb4:	4b7f      	ldr	r3, [pc, #508]	; (8005eb4 <firstOpenOfSystem+0x23c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]

		while(SystickSecond<5)
 8005cba:	e014      	b.n	8005ce6 <firstOpenOfSystem+0x6e>
		{
			if(MPU6050Init())
 8005cbc:	f7ff f8ca 	bl	8004e54 <MPU6050Init>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <firstOpenOfSystem+0x54>
			{
				getAllDatas();
 8005cc6:	f7ff fa1f 	bl	8005108 <getAllDatas>
 8005cca:	e00c      	b.n	8005ce6 <firstOpenOfSystem+0x6e>
            }

			else
			{
				sprintf(message,"MPU6050 Error...\n");
 8005ccc:	4a77      	ldr	r2, [pc, #476]	; (8005eac <firstOpenOfSystem+0x234>)
 8005cce:	4b7a      	ldr	r3, [pc, #488]	; (8005eb8 <firstOpenOfSystem+0x240>)
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd6:	6028      	str	r0, [r5, #0]
 8005cd8:	6069      	str	r1, [r5, #4]
 8005cda:	60aa      	str	r2, [r5, #8]
 8005cdc:	60eb      	str	r3, [r5, #12]
 8005cde:	8823      	ldrh	r3, [r4, #0]
 8005ce0:	822b      	strh	r3, [r5, #16]
				sendDataviaUART();
 8005ce2:	f7ff ff1b 	bl	8005b1c <sendDataviaUART>
		while(SystickSecond<5)
 8005ce6:	4b73      	ldr	r3, [pc, #460]	; (8005eb4 <firstOpenOfSystem+0x23c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d9e6      	bls.n	8005cbc <firstOpenOfSystem+0x44>
			}


		}

		bool keepDone=false;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	71fb      	strb	r3, [r7, #7]
		SystickMs=0;
 8005cf2:	4b72      	ldr	r3, [pc, #456]	; (8005ebc <firstOpenOfSystem+0x244>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

		sprintf(message,"\r\nBeginnig target values will measured....\r\n");
 8005cf8:	4b6c      	ldr	r3, [pc, #432]	; (8005eac <firstOpenOfSystem+0x234>)
 8005cfa:	4a71      	ldr	r2, [pc, #452]	; (8005ec0 <firstOpenOfSystem+0x248>)
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	469c      	mov	ip, r3
 8005d00:	f104 0e20 	add.w	lr, r4, #32
 8005d04:	4665      	mov	r5, ip
 8005d06:	4626      	mov	r6, r4
 8005d08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d0a:	6028      	str	r0, [r5, #0]
 8005d0c:	6069      	str	r1, [r5, #4]
 8005d0e:	60aa      	str	r2, [r5, #8]
 8005d10:	60eb      	str	r3, [r5, #12]
 8005d12:	3410      	adds	r4, #16
 8005d14:	f10c 0c10 	add.w	ip, ip, #16
 8005d18:	4574      	cmp	r4, lr
 8005d1a:	d1f3      	bne.n	8005d04 <firstOpenOfSystem+0x8c>
 8005d1c:	4665      	mov	r5, ip
 8005d1e:	4623      	mov	r3, r4
 8005d20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d22:	6028      	str	r0, [r5, #0]
 8005d24:	6069      	str	r1, [r5, #4]
 8005d26:	60aa      	str	r2, [r5, #8]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	732b      	strb	r3, [r5, #12]
		sendDataviaUART();
 8005d2c:	f7ff fef6 	bl	8005b1c <sendDataviaUART>
		sprintf(message,"Do not change position when new message arrives you...\r");
 8005d30:	4b5e      	ldr	r3, [pc, #376]	; (8005eac <firstOpenOfSystem+0x234>)
 8005d32:	4a64      	ldr	r2, [pc, #400]	; (8005ec4 <firstOpenOfSystem+0x24c>)
 8005d34:	4614      	mov	r4, r2
 8005d36:	469c      	mov	ip, r3
 8005d38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005d3c:	4665      	mov	r5, ip
 8005d3e:	4626      	mov	r6, r4
 8005d40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d42:	6028      	str	r0, [r5, #0]
 8005d44:	6069      	str	r1, [r5, #4]
 8005d46:	60aa      	str	r2, [r5, #8]
 8005d48:	60eb      	str	r3, [r5, #12]
 8005d4a:	3410      	adds	r4, #16
 8005d4c:	f10c 0c10 	add.w	ip, ip, #16
 8005d50:	4574      	cmp	r4, lr
 8005d52:	d1f3      	bne.n	8005d3c <firstOpenOfSystem+0xc4>
 8005d54:	4662      	mov	r2, ip
 8005d56:	4623      	mov	r3, r4
 8005d58:	cb03      	ldmia	r3!, {r0, r1}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	6051      	str	r1, [r2, #4]
		sendDataviaUART();
 8005d5e:	f7ff fedd 	bl	8005b1c <sendDataviaUART>

		while(!keepDone)
 8005d62:	e068      	b.n	8005e36 <firstOpenOfSystem+0x1be>
		{
			 targetDegressFound=0;
 8005d64:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <firstOpenOfSystem+0x250>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
			 if(MPU6050Init())
 8005d6a:	f7ff f873 	bl	8004e54 <MPU6050Init>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d012      	beq.n	8005d9a <firstOpenOfSystem+0x122>
			 {
				    getAllDatas();
 8005d74:	f7ff f9c8 	bl	8005108 <getAllDatas>
					target_X=getPitch();
 8005d78:	f7ff fc70 	bl	800565c <getPitch>
 8005d7c:	eef0 7a40 	vmov.f32	s15, s0
 8005d80:	4b52      	ldr	r3, [pc, #328]	; (8005ecc <firstOpenOfSystem+0x254>)
 8005d82:	edc3 7a00 	vstr	s15, [r3]
					target_Y=getRoll();
 8005d86:	f7ff fc5b 	bl	8005640 <getRoll>
 8005d8a:	eef0 7a40 	vmov.f32	s15, s0
 8005d8e:	4b50      	ldr	r3, [pc, #320]	; (8005ed0 <firstOpenOfSystem+0x258>)
 8005d90:	edc3 7a00 	vstr	s15, [r3]
					targetDegressFound=1;
 8005d94:	4b4c      	ldr	r3, [pc, #304]	; (8005ec8 <firstOpenOfSystem+0x250>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]

			  }

			  if(SystickMs>100)
 8005d9a:	4b48      	ldr	r3, [pc, #288]	; (8005ebc <firstOpenOfSystem+0x244>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b64      	cmp	r3, #100	; 0x64
 8005da0:	d949      	bls.n	8005e36 <firstOpenOfSystem+0x1be>
			  {
				SystickMs=0;
 8005da2:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <firstOpenOfSystem+0x244>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
				HCSR04_ReadDistance();
 8005da8:	f7ff fe60 	bl	8005a6c <HCSR04_ReadDistance>
				if(distanceFound && distance<maxHeight)
 8005dac:	4b49      	ldr	r3, [pc, #292]	; (8005ed4 <firstOpenOfSystem+0x25c>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d040      	beq.n	8005e36 <firstOpenOfSystem+0x1be>
 8005db4:	4b48      	ldr	r3, [pc, #288]	; (8005ed8 <firstOpenOfSystem+0x260>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005dc0:	4b46      	ldr	r3, [pc, #280]	; (8005edc <firstOpenOfSystem+0x264>)
 8005dc2:	edd3 7a00 	vldr	s15, [r3]
 8005dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	d400      	bmi.n	8005dd2 <firstOpenOfSystem+0x15a>
 8005dd0:	e031      	b.n	8005e36 <firstOpenOfSystem+0x1be>
				{
					distanceFound=0;
 8005dd2:	4b40      	ldr	r3, [pc, #256]	; (8005ed4 <firstOpenOfSystem+0x25c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
					targetDistance=distance;
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <firstOpenOfSystem+0x260>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	4b3e      	ldr	r3, [pc, #248]	; (8005ee0 <firstOpenOfSystem+0x268>)
 8005de6:	edc3 7a00 	vstr	s15, [r3]
					if((maxHeight-targetDistance)>targetDistance)
 8005dea:	4b3c      	ldr	r3, [pc, #240]	; (8005edc <firstOpenOfSystem+0x264>)
 8005dec:	ed93 7a00 	vldr	s14, [r3]
 8005df0:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <firstOpenOfSystem+0x268>)
 8005df2:	edd3 7a00 	vldr	s15, [r3]
 8005df6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dfa:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <firstOpenOfSystem+0x268>)
 8005dfc:	edd3 7a00 	vldr	s15, [r3]
 8005e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e08:	dd0b      	ble.n	8005e22 <firstOpenOfSystem+0x1aa>
						maxDifference=maxHeight-targetDistance;
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <firstOpenOfSystem+0x264>)
 8005e0c:	ed93 7a00 	vldr	s14, [r3]
 8005e10:	4b33      	ldr	r3, [pc, #204]	; (8005ee0 <firstOpenOfSystem+0x268>)
 8005e12:	edd3 7a00 	vldr	s15, [r3]
 8005e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e1a:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <firstOpenOfSystem+0x26c>)
 8005e1c:	edc3 7a00 	vstr	s15, [r3]
 8005e20:	e003      	b.n	8005e2a <firstOpenOfSystem+0x1b2>
					else
						maxDifference=targetDistance;
 8005e22:	4b2f      	ldr	r3, [pc, #188]	; (8005ee0 <firstOpenOfSystem+0x268>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <firstOpenOfSystem+0x26c>)
 8005e28:	6013      	str	r3, [r2, #0]
					if(targetDegressFound)
 8005e2a:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <firstOpenOfSystem+0x250>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <firstOpenOfSystem+0x1be>
						keepDone=1;
 8005e32:	2301      	movs	r3, #1
 8005e34:	71fb      	strb	r3, [r7, #7]
		while(!keepDone)
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	f083 0301 	eor.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d190      	bne.n	8005d64 <firstOpenOfSystem+0xec>

				}
			  }
		}

		sprintf(message,"Calculation Okay. Target_Pitch:%0.4f,Target_Roll:%0.4f,Target_Distance:%d \n\r",target_X,target_Y,(int)targetDistance);
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <firstOpenOfSystem+0x254>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fa fb7e 	bl	8000548 <__aeabi_f2d>
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460e      	mov	r6, r1
 8005e50:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <firstOpenOfSystem+0x258>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fa fb77 	bl	8000548 <__aeabi_f2d>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <firstOpenOfSystem+0x268>)
 8005e60:	edd2 7a00 	vldr	s15, [r2]
 8005e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e68:	ee17 2a90 	vmov	r2, s15
 8005e6c:	9202      	str	r2, [sp, #8]
 8005e6e:	e9cd 3400 	strd	r3, r4, [sp]
 8005e72:	462a      	mov	r2, r5
 8005e74:	4633      	mov	r3, r6
 8005e76:	491c      	ldr	r1, [pc, #112]	; (8005ee8 <firstOpenOfSystem+0x270>)
 8005e78:	480c      	ldr	r0, [pc, #48]	; (8005eac <firstOpenOfSystem+0x234>)
 8005e7a:	f001 fe17 	bl	8007aac <siprintf>
		sendDataviaUART();
 8005e7e:	f7ff fe4d 	bl	8005b1c <sendDataviaUART>
		sprintf(message,"Let it go the system...\r\n");
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <firstOpenOfSystem+0x234>)
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <firstOpenOfSystem+0x274>)
 8005e86:	4615      	mov	r5, r2
 8005e88:	461c      	mov	r4, r3
 8005e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e8c:	6028      	str	r0, [r5, #0]
 8005e8e:	6069      	str	r1, [r5, #4]
 8005e90:	60aa      	str	r2, [r5, #8]
 8005e92:	60eb      	str	r3, [r5, #12]
 8005e94:	cc03      	ldmia	r4!, {r0, r1}
 8005e96:	6128      	str	r0, [r5, #16]
 8005e98:	6169      	str	r1, [r5, #20]
 8005e9a:	8823      	ldrh	r3, [r4, #0]
 8005e9c:	832b      	strh	r3, [r5, #24]
		sendDataviaUART();
 8005e9e:	f7ff fe3d 	bl	8005b1c <sendDataviaUART>
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000328 	.word	0x20000328
 8005eb0:	080082d0 	.word	0x080082d0
 8005eb4:	20000164 	.word	0x20000164
 8005eb8:	0800830c 	.word	0x0800830c
 8005ebc:	20000160 	.word	0x20000160
 8005ec0:	08008320 	.word	0x08008320
 8005ec4:	08008350 	.word	0x08008350
 8005ec8:	2000016a 	.word	0x2000016a
 8005ecc:	20000170 	.word	0x20000170
 8005ed0:	20000174 	.word	0x20000174
 8005ed4:	20000169 	.word	0x20000169
 8005ed8:	20000154 	.word	0x20000154
 8005edc:	200000a0 	.word	0x200000a0
 8005ee0:	20000178 	.word	0x20000178
 8005ee4:	2000017c 	.word	0x2000017c
 8005ee8:	08008388 	.word	0x08008388
 8005eec:	080083d8 	.word	0x080083d8

08005ef0 <GameStart>:

void GameStart()
{
 8005ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af04      	add	r7, sp, #16
	SystickSecond=0;
 8005ef6:	4baf      	ldr	r3, [pc, #700]	; (80061b4 <GameStart+0x2c4>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
	sprintf(message,"Game is starting...\r");
 8005efc:	4aae      	ldr	r2, [pc, #696]	; (80061b8 <GameStart+0x2c8>)
 8005efe:	4baf      	ldr	r3, [pc, #700]	; (80061bc <GameStart+0x2cc>)
 8005f00:	4615      	mov	r5, r2
 8005f02:	461c      	mov	r4, r3
 8005f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f06:	6028      	str	r0, [r5, #0]
 8005f08:	6069      	str	r1, [r5, #4]
 8005f0a:	60aa      	str	r2, [r5, #8]
 8005f0c:	60eb      	str	r3, [r5, #12]
 8005f0e:	6820      	ldr	r0, [r4, #0]
 8005f10:	6128      	str	r0, [r5, #16]
 8005f12:	7923      	ldrb	r3, [r4, #4]
 8005f14:	752b      	strb	r3, [r5, #20]
	sendDataviaUART();
 8005f16:	f7ff fe01 	bl	8005b1c <sendDataviaUART>

	SystickMs=0;
 8005f1a:	4ba9      	ldr	r3, [pc, #676]	; (80061c0 <GameStart+0x2d0>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

	foundTarget=0;
 8005f20:	4ba8      	ldr	r3, [pc, #672]	; (80061c4 <GameStart+0x2d4>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
	targetDistanceFound=0;
 8005f26:	4ba8      	ldr	r3, [pc, #672]	; (80061c8 <GameStart+0x2d8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
	targetDegreeFound=0;
 8005f2c:	4ba7      	ldr	r3, [pc, #668]	; (80061cc <GameStart+0x2dc>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
	timeServo=0;
 8005f32:	4ba7      	ldr	r3, [pc, #668]	; (80061d0 <GameStart+0x2e0>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
	timeLed=0;
 8005f38:	4ba6      	ldr	r3, [pc, #664]	; (80061d4 <GameStart+0x2e4>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
	distance=0;
 8005f3e:	4ba6      	ldr	r3, [pc, #664]	; (80061d8 <GameStart+0x2e8>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
    int totalAngle=0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	607b      	str	r3, [r7, #4]
    float rollOnly=0.00;
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
    float pitchOnly=0.0;
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	60bb      	str	r3, [r7, #8]
    while(!foundTarget)
 8005f54:	e326      	b.n	80065a4 <GameStart+0x6b4>
    {
    	targetDegreeFound=0;
 8005f56:	4b9d      	ldr	r3, [pc, #628]	; (80061cc <GameStart+0x2dc>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
    	targetDistanceFound=0;
 8005f5c:	4b9a      	ldr	r3, [pc, #616]	; (80061c8 <GameStart+0x2d8>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]

    	if(MPU6050Init())
 8005f62:	f7fe ff77 	bl	8004e54 <MPU6050Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 81cc 	beq.w	8006306 <GameStart+0x416>
    	{
    		totalAngle=0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	607b      	str	r3, [r7, #4]
    		getAllDatas();
 8005f72:	f7ff f8c9 	bl	8005108 <getAllDatas>
    		PitchValue=getPitch();
 8005f76:	f7ff fb71 	bl	800565c <getPitch>
 8005f7a:	eef0 7a40 	vmov.f32	s15, s0
 8005f7e:	4b97      	ldr	r3, [pc, #604]	; (80061dc <GameStart+0x2ec>)
 8005f80:	edc3 7a00 	vstr	s15, [r3]
    	    RollValue=getRoll();
 8005f84:	f7ff fb5c 	bl	8005640 <getRoll>
 8005f88:	eef0 7a40 	vmov.f32	s15, s0
 8005f8c:	4b94      	ldr	r3, [pc, #592]	; (80061e0 <GameStart+0x2f0>)
 8005f8e:	edc3 7a00 	vstr	s15, [r3]

            if(RollValue>45 &&target_Y<30 )
 8005f92:	4b93      	ldr	r3, [pc, #588]	; (80061e0 <GameStart+0x2f0>)
 8005f94:	edd3 7a00 	vldr	s15, [r3]
 8005f98:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80061e4 <GameStart+0x2f4>
 8005f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa4:	dd18      	ble.n	8005fd8 <GameStart+0xe8>
 8005fa6:	4b90      	ldr	r3, [pc, #576]	; (80061e8 <GameStart+0x2f8>)
 8005fa8:	edd3 7a00 	vldr	s15, [r3]
 8005fac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb8:	d50e      	bpl.n	8005fd8 <GameStart+0xe8>
            {
            	rollOnly=(65-RollValue+target_Y);
 8005fba:	4b89      	ldr	r3, [pc, #548]	; (80061e0 <GameStart+0x2f0>)
 8005fbc:	edd3 7a00 	vldr	s15, [r3]
 8005fc0:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80061ec <GameStart+0x2fc>
 8005fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fc8:	4b87      	ldr	r3, [pc, #540]	; (80061e8 <GameStart+0x2f8>)
 8005fca:	edd3 7a00 	vldr	s15, [r3]
 8005fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd2:	edc7 7a03 	vstr	s15, [r7, #12]
 8005fd6:	e075      	b.n	80060c4 <GameStart+0x1d4>
            }
            else if(RollValue>45 &&target_Y>30 )
 8005fd8:	4b81      	ldr	r3, [pc, #516]	; (80061e0 <GameStart+0x2f0>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80061e4 <GameStart+0x2f4>
 8005fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	dd1f      	ble.n	800602c <GameStart+0x13c>
 8005fec:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <GameStart+0x2f8>)
 8005fee:	edd3 7a00 	vldr	s15, [r3]
 8005ff2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffe:	dd15      	ble.n	800602c <GameStart+0x13c>
            {
                rollOnly=abs(RollValue-target_Y);
 8006000:	4b77      	ldr	r3, [pc, #476]	; (80061e0 <GameStart+0x2f0>)
 8006002:	ed93 7a00 	vldr	s14, [r3]
 8006006:	4b78      	ldr	r3, [pc, #480]	; (80061e8 <GameStart+0x2f8>)
 8006008:	edd3 7a00 	vldr	s15, [r3]
 800600c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006014:	ee17 3a90 	vmov	r3, s15
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfb8      	it	lt
 800601c:	425b      	neglt	r3, r3
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006026:	edc7 7a03 	vstr	s15, [r7, #12]
 800602a:	e04b      	b.n	80060c4 <GameStart+0x1d4>
             }
            else if(RollValue<45 && target_Y<30 )
 800602c:	4b6c      	ldr	r3, [pc, #432]	; (80061e0 <GameStart+0x2f0>)
 800602e:	edd3 7a00 	vldr	s15, [r3]
 8006032:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80061e4 <GameStart+0x2f4>
 8006036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603e:	d51f      	bpl.n	8006080 <GameStart+0x190>
 8006040:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <GameStart+0x2f8>)
 8006042:	edd3 7a00 	vldr	s15, [r3]
 8006046:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800604a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800604e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006052:	d515      	bpl.n	8006080 <GameStart+0x190>
            {
            	rollOnly=abs(RollValue-target_Y);
 8006054:	4b62      	ldr	r3, [pc, #392]	; (80061e0 <GameStart+0x2f0>)
 8006056:	ed93 7a00 	vldr	s14, [r3]
 800605a:	4b63      	ldr	r3, [pc, #396]	; (80061e8 <GameStart+0x2f8>)
 800605c:	edd3 7a00 	vldr	s15, [r3]
 8006060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006068:	ee17 3a90 	vmov	r3, s15
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfb8      	it	lt
 8006070:	425b      	neglt	r3, r3
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800607a:	edc7 7a03 	vstr	s15, [r7, #12]
 800607e:	e021      	b.n	80060c4 <GameStart+0x1d4>
            }
            else if(RollValue<45 &&target_Y>30 )
 8006080:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <GameStart+0x2f0>)
 8006082:	edd3 7a00 	vldr	s15, [r3]
 8006086:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80061e4 <GameStart+0x2f4>
 800608a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006092:	d517      	bpl.n	80060c4 <GameStart+0x1d4>
 8006094:	4b54      	ldr	r3, [pc, #336]	; (80061e8 <GameStart+0x2f8>)
 8006096:	edd3 7a00 	vldr	s15, [r3]
 800609a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800609e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	dd0d      	ble.n	80060c4 <GameStart+0x1d4>
            {
            	rollOnly=(65+RollValue-target_Y);
 80060a8:	4b4d      	ldr	r3, [pc, #308]	; (80061e0 <GameStart+0x2f0>)
 80060aa:	edd3 7a00 	vldr	s15, [r3]
 80060ae:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80061ec <GameStart+0x2fc>
 80060b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b6:	4b4c      	ldr	r3, [pc, #304]	; (80061e8 <GameStart+0x2f8>)
 80060b8:	edd3 7a00 	vldr	s15, [r3]
 80060bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060c0:	edc7 7a03 	vstr	s15, [r7, #12]
             }

            if(PitchValue>-45 &&target_X<-45 )
 80060c4:	4b45      	ldr	r3, [pc, #276]	; (80061dc <GameStart+0x2ec>)
 80060c6:	edd3 7a00 	vldr	s15, [r3]
 80060ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80061f0 <GameStart+0x300>
 80060ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	dd18      	ble.n	800610a <GameStart+0x21a>
 80060d8:	4b46      	ldr	r3, [pc, #280]	; (80061f4 <GameStart+0x304>)
 80060da:	edd3 7a00 	vldr	s15, [r3]
 80060de:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80061f0 <GameStart+0x300>
 80060e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ea:	d50e      	bpl.n	800610a <GameStart+0x21a>
            {
            	pitchOnly=(65-PitchValue+target_X);
 80060ec:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <GameStart+0x2ec>)
 80060ee:	edd3 7a00 	vldr	s15, [r3]
 80060f2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80061ec <GameStart+0x2fc>
 80060f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060fa:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <GameStart+0x304>)
 80060fc:	edd3 7a00 	vldr	s15, [r3]
 8006100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006104:	edc7 7a02 	vstr	s15, [r7, #8]
 8006108:	e098      	b.n	800623c <GameStart+0x34c>
            }
            else if(PitchValue>-45 &&target_X>-45 )
 800610a:	4b34      	ldr	r3, [pc, #208]	; (80061dc <GameStart+0x2ec>)
 800610c:	edd3 7a00 	vldr	s15, [r3]
 8006110:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80061f0 <GameStart+0x300>
 8006114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611c:	dd1f      	ble.n	800615e <GameStart+0x26e>
 800611e:	4b35      	ldr	r3, [pc, #212]	; (80061f4 <GameStart+0x304>)
 8006120:	edd3 7a00 	vldr	s15, [r3]
 8006124:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80061f0 <GameStart+0x300>
 8006128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	dd15      	ble.n	800615e <GameStart+0x26e>
            {
            	pitchOnly=abs(PitchValue-target_X);
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <GameStart+0x2ec>)
 8006134:	ed93 7a00 	vldr	s14, [r3]
 8006138:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <GameStart+0x304>)
 800613a:	edd3 7a00 	vldr	s15, [r3]
 800613e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006146:	ee17 3a90 	vmov	r3, s15
 800614a:	2b00      	cmp	r3, #0
 800614c:	bfb8      	it	lt
 800614e:	425b      	neglt	r3, r3
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006158:	edc7 7a02 	vstr	s15, [r7, #8]
 800615c:	e06e      	b.n	800623c <GameStart+0x34c>
             }
            else if(PitchValue<-45 && target_X<-45 )
 800615e:	4b1f      	ldr	r3, [pc, #124]	; (80061dc <GameStart+0x2ec>)
 8006160:	edd3 7a00 	vldr	s15, [r3]
 8006164:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80061f0 <GameStart+0x300>
 8006168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800616c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006170:	d542      	bpl.n	80061f8 <GameStart+0x308>
 8006172:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <GameStart+0x304>)
 8006174:	edd3 7a00 	vldr	s15, [r3]
 8006178:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80061f0 <GameStart+0x300>
 800617c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006184:	d538      	bpl.n	80061f8 <GameStart+0x308>
            {
            	pitchOnly=abs(PitchValue-target_X);
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <GameStart+0x2ec>)
 8006188:	ed93 7a00 	vldr	s14, [r3]
 800618c:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <GameStart+0x304>)
 800618e:	edd3 7a00 	vldr	s15, [r3]
 8006192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619a:	ee17 3a90 	vmov	r3, s15
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	425b      	neglt	r3, r3
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ac:	edc7 7a02 	vstr	s15, [r7, #8]
 80061b0:	e044      	b.n	800623c <GameStart+0x34c>
 80061b2:	bf00      	nop
 80061b4:	20000164 	.word	0x20000164
 80061b8:	20000328 	.word	0x20000328
 80061bc:	080083f4 	.word	0x080083f4
 80061c0:	20000160 	.word	0x20000160
 80061c4:	20000168 	.word	0x20000168
 80061c8:	2000016c 	.word	0x2000016c
 80061cc:	2000016b 	.word	0x2000016b
 80061d0:	2000018c 	.word	0x2000018c
 80061d4:	20000190 	.word	0x20000190
 80061d8:	20000154 	.word	0x20000154
 80061dc:	20000288 	.word	0x20000288
 80061e0:	2000044c 	.word	0x2000044c
 80061e4:	42340000 	.word	0x42340000
 80061e8:	20000174 	.word	0x20000174
 80061ec:	42820000 	.word	0x42820000
 80061f0:	c2340000 	.word	0xc2340000
 80061f4:	20000170 	.word	0x20000170
            }
            else if(PitchValue<-45 &&target_X>-45 )
 80061f8:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <GameStart+0x4e4>)
 80061fa:	edd3 7a00 	vldr	s15, [r3]
 80061fe:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80063d8 <GameStart+0x4e8>
 8006202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620a:	d517      	bpl.n	800623c <GameStart+0x34c>
 800620c:	4b73      	ldr	r3, [pc, #460]	; (80063dc <GameStart+0x4ec>)
 800620e:	edd3 7a00 	vldr	s15, [r3]
 8006212:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80063d8 <GameStart+0x4e8>
 8006216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	dd0d      	ble.n	800623c <GameStart+0x34c>
            {
            	pitchOnly=(65+PitchValue-target_X);
 8006220:	4b6c      	ldr	r3, [pc, #432]	; (80063d4 <GameStart+0x4e4>)
 8006222:	edd3 7a00 	vldr	s15, [r3]
 8006226:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80063e0 <GameStart+0x4f0>
 800622a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800622e:	4b6b      	ldr	r3, [pc, #428]	; (80063dc <GameStart+0x4ec>)
 8006230:	edd3 7a00 	vldr	s15, [r3]
 8006234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006238:	edc7 7a02 	vstr	s15, [r7, #8]
             }

    	    differenceAngle=sqrt( pitchOnly*pitchOnly +rollOnly*rollOnly);
 800623c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006240:	edd7 7a02 	vldr	s15, [r7, #8]
 8006244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006248:	edd7 6a03 	vldr	s13, [r7, #12]
 800624c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006258:	ee17 0a90 	vmov	r0, s15
 800625c:	f7fa f974 	bl	8000548 <__aeabi_f2d>
 8006260:	4603      	mov	r3, r0
 8006262:	460c      	mov	r4, r1
 8006264:	ec44 3b10 	vmov	d0, r3, r4
 8006268:	f001 fa02 	bl	8007670 <sqrt>
 800626c:	ec54 3b10 	vmov	r3, r4, d0
 8006270:	4618      	mov	r0, r3
 8006272:	4621      	mov	r1, r4
 8006274:	f7fa fc90 	bl	8000b98 <__aeabi_d2f>
 8006278:	4602      	mov	r2, r0
 800627a:	4b5a      	ldr	r3, [pc, #360]	; (80063e4 <GameStart+0x4f4>)
 800627c:	601a      	str	r2, [r3, #0]

    	    if( differenceAngle  <accaptableDegree)
 800627e:	4b59      	ldr	r3, [pc, #356]	; (80063e4 <GameStart+0x4f4>)
 8006280:	ed93 7a00 	vldr	s14, [r3]
 8006284:	4b58      	ldr	r3, [pc, #352]	; (80063e8 <GameStart+0x4f8>)
 8006286:	edd3 7a00 	vldr	s15, [r3]
 800628a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006292:	d510      	bpl.n	80062b6 <GameStart+0x3c6>
    	    {   targetDegreeFound=1; differenceAngle=0; servoAct((uint32_t)differenceAngle); }
 8006294:	4b55      	ldr	r3, [pc, #340]	; (80063ec <GameStart+0x4fc>)
 8006296:	2201      	movs	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	4b52      	ldr	r3, [pc, #328]	; (80063e4 <GameStart+0x4f4>)
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	4b50      	ldr	r3, [pc, #320]	; (80063e4 <GameStart+0x4f4>)
 80062a4:	edd3 7a00 	vldr	s15, [r3]
 80062a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ac:	ee17 0a90 	vmov	r0, s15
 80062b0:	f7ff fc0a 	bl	8005ac8 <servoAct>
 80062b4:	e00f      	b.n	80062d6 <GameStart+0x3e6>
    	    else
    	    {
    	    	targetDegreeFound=0;
 80062b6:	4b4d      	ldr	r3, [pc, #308]	; (80063ec <GameStart+0x4fc>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
    	    	if(differenceAngle>50) differenceAngle=50;
 80062bc:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <GameStart+0x4f4>)
 80062be:	edd3 7a00 	vldr	s15, [r3]
 80062c2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80063f0 <GameStart+0x500>
 80062c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ce:	dd02      	ble.n	80062d6 <GameStart+0x3e6>
 80062d0:	4b44      	ldr	r3, [pc, #272]	; (80063e4 <GameStart+0x4f4>)
 80062d2:	4a48      	ldr	r2, [pc, #288]	; (80063f4 <GameStart+0x504>)
 80062d4:	601a      	str	r2, [r3, #0]
    	    }
    	    if(timeServo>700)
 80062d6:	4b48      	ldr	r3, [pc, #288]	; (80063f8 <GameStart+0x508>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80062de:	d912      	bls.n	8006306 <GameStart+0x416>
    	    {
    	       timeServo=0;
 80062e0:	4b45      	ldr	r3, [pc, #276]	; (80063f8 <GameStart+0x508>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
    	       if(!targetDegreeFound)
 80062e6:	4b41      	ldr	r3, [pc, #260]	; (80063ec <GameStart+0x4fc>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	f083 0301 	eor.w	r3, r3, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <GameStart+0x416>
    	          servoAct((uint32_t)differenceAngle);
 80062f4:	4b3b      	ldr	r3, [pc, #236]	; (80063e4 <GameStart+0x4f4>)
 80062f6:	edd3 7a00 	vldr	s15, [r3]
 80062fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fe:	ee17 0a90 	vmov	r0, s15
 8006302:	f7ff fbe1 	bl	8005ac8 <servoAct>
    	    }

        }

		if(SystickMs>400)
 8006306:	4b3d      	ldr	r3, [pc, #244]	; (80063fc <GameStart+0x50c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800630e:	f240 80b3 	bls.w	8006478 <GameStart+0x588>
		{
		  SystickMs=0;
 8006312:	4b3a      	ldr	r3, [pc, #232]	; (80063fc <GameStart+0x50c>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
		  HCSR04_ReadDistance();
 8006318:	f7ff fba8 	bl	8005a6c <HCSR04_ReadDistance>
		  HAL_Delay(1);
 800631c:	2001      	movs	r0, #1
 800631e:	f7fa fe7d 	bl	800101c <HAL_Delay>
		  if(distanceFound && distance<maxHeight )
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <GameStart+0x510>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80a3 	beq.w	8006472 <GameStart+0x582>
 800632c:	4b35      	ldr	r3, [pc, #212]	; (8006404 <GameStart+0x514>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006338:	4b33      	ldr	r3, [pc, #204]	; (8006408 <GameStart+0x518>)
 800633a:	edd3 7a00 	vldr	s15, [r3]
 800633e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006346:	f140 8094 	bpl.w	8006472 <GameStart+0x582>
		  {

			 distanceFound=0;
 800634a:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <GameStart+0x510>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
			 differentHeight=abs(distance-targetDistance);
 8006350:	4b2c      	ldr	r3, [pc, #176]	; (8006404 <GameStart+0x514>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	ee07 3a90 	vmov	s15, r3
 8006358:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800635c:	4b2b      	ldr	r3, [pc, #172]	; (800640c <GameStart+0x51c>)
 800635e:	edd3 7a00 	vldr	s15, [r3]
 8006362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800636a:	ee17 3a90 	vmov	r3, s15
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfb8      	it	lt
 8006372:	425b      	neglt	r3, r3
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637c:	4b24      	ldr	r3, [pc, #144]	; (8006410 <GameStart+0x520>)
 800637e:	edc3 7a00 	vstr	s15, [r3]
			 if(differentHeight>maxDifference)
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <GameStart+0x520>)
 8006384:	ed93 7a00 	vldr	s14, [r3]
 8006388:	4b22      	ldr	r3, [pc, #136]	; (8006414 <GameStart+0x524>)
 800638a:	edd3 7a00 	vldr	s15, [r3]
 800638e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006396:	dd03      	ble.n	80063a0 <GameStart+0x4b0>
				differentHeight=maxDifference;
 8006398:	4b1e      	ldr	r3, [pc, #120]	; (8006414 <GameStart+0x524>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <GameStart+0x520>)
 800639e:	6013      	str	r3, [r2, #0]

			 if(differentHeight<=acceptableHeightDifference)
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <GameStart+0x528>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ac:	4b18      	ldr	r3, [pc, #96]	; (8006410 <GameStart+0x520>)
 80063ae:	edd3 7a00 	vldr	s15, [r3]
 80063b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	db31      	blt.n	8006420 <GameStart+0x530>
			 {
				 differentHeight=targetDistance;
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <GameStart+0x51c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <GameStart+0x520>)
 80063c2:	6013      	str	r3, [r2, #0]
				 targetDistanceFound=1;
 80063c4:	4b15      	ldr	r3, [pc, #84]	; (800641c <GameStart+0x52c>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
				 ledDrive(0);
 80063ca:	2000      	movs	r0, #0
 80063cc:	f7ff fb96 	bl	8005afc <ledDrive>
 80063d0:	e029      	b.n	8006426 <GameStart+0x536>
 80063d2:	bf00      	nop
 80063d4:	20000288 	.word	0x20000288
 80063d8:	c2340000 	.word	0xc2340000
 80063dc:	20000170 	.word	0x20000170
 80063e0:	42820000 	.word	0x42820000
 80063e4:	20000188 	.word	0x20000188
 80063e8:	200000a8 	.word	0x200000a8
 80063ec:	2000016b 	.word	0x2000016b
 80063f0:	42480000 	.word	0x42480000
 80063f4:	42480000 	.word	0x42480000
 80063f8:	2000018c 	.word	0x2000018c
 80063fc:	20000160 	.word	0x20000160
 8006400:	20000169 	.word	0x20000169
 8006404:	20000154 	.word	0x20000154
 8006408:	200000a0 	.word	0x200000a0
 800640c:	20000178 	.word	0x20000178
 8006410:	20000180 	.word	0x20000180
 8006414:	2000017c 	.word	0x2000017c
 8006418:	200000a4 	.word	0x200000a4
 800641c:	2000016c 	.word	0x2000016c
			 }

			 else
				 targetDistanceFound=0;
 8006420:	4b78      	ldr	r3, [pc, #480]	; (8006604 <GameStart+0x714>)
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]

			 if(timeLed>700)
 8006426:	4b78      	ldr	r3, [pc, #480]	; (8006608 <GameStart+0x718>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800642e:	d920      	bls.n	8006472 <GameStart+0x582>
			 {
				 timeLed=0;
 8006430:	4b75      	ldr	r3, [pc, #468]	; (8006608 <GameStart+0x718>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
				 if(!targetDistanceFound)
 8006436:	4b73      	ldr	r3, [pc, #460]	; (8006604 <GameStart+0x714>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f083 0301 	eor.w	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d016      	beq.n	8006472 <GameStart+0x582>
				 {
					 ledPulse=255*differentHeight/maxDifference;
 8006444:	4b71      	ldr	r3, [pc, #452]	; (800660c <GameStart+0x71c>)
 8006446:	edd3 7a00 	vldr	s15, [r3]
 800644a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006610 <GameStart+0x720>
 800644e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006452:	4b70      	ldr	r3, [pc, #448]	; (8006614 <GameStart+0x724>)
 8006454:	ed93 7a00 	vldr	s14, [r3]
 8006458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006460:	ee17 2a90 	vmov	r2, s15
 8006464:	4b6c      	ldr	r3, [pc, #432]	; (8006618 <GameStart+0x728>)
 8006466:	601a      	str	r2, [r3, #0]
					 ledDrive(ledPulse);
 8006468:	4b6b      	ldr	r3, [pc, #428]	; (8006618 <GameStart+0x728>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fb45 	bl	8005afc <ledDrive>
				 }
			 }
		   }
		   distanceFound=0;
 8006472:	4b6a      	ldr	r3, [pc, #424]	; (800661c <GameStart+0x72c>)
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]



		}

		if(targetDistanceFound && targetDegreeFound)
 8006478:	4b62      	ldr	r3, [pc, #392]	; (8006604 <GameStart+0x714>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d041      	beq.n	8006504 <GameStart+0x614>
 8006480:	4b67      	ldr	r3, [pc, #412]	; (8006620 <GameStart+0x730>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d03d      	beq.n	8006504 <GameStart+0x614>
		{
			foundTarget=1;
 8006488:	4b66      	ldr	r3, [pc, #408]	; (8006624 <GameStart+0x734>)
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
			sprintf(message,"\nTarget_Pitch:%0.4f, Target_Roll:%0.4f,Target_Distance:%d ",target_X,target_Y,(int)targetDistance);
 800648e:	4b66      	ldr	r3, [pc, #408]	; (8006628 <GameStart+0x738>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fa f858 	bl	8000548 <__aeabi_f2d>
 8006498:	4605      	mov	r5, r0
 800649a:	460e      	mov	r6, r1
 800649c:	4b63      	ldr	r3, [pc, #396]	; (800662c <GameStart+0x73c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fa f851 	bl	8000548 <__aeabi_f2d>
 80064a6:	4603      	mov	r3, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	4a61      	ldr	r2, [pc, #388]	; (8006630 <GameStart+0x740>)
 80064ac:	edd2 7a00 	vldr	s15, [r2]
 80064b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b4:	ee17 2a90 	vmov	r2, s15
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	e9cd 3400 	strd	r3, r4, [sp]
 80064be:	462a      	mov	r2, r5
 80064c0:	4633      	mov	r3, r6
 80064c2:	495c      	ldr	r1, [pc, #368]	; (8006634 <GameStart+0x744>)
 80064c4:	485c      	ldr	r0, [pc, #368]	; (8006638 <GameStart+0x748>)
 80064c6:	f001 faf1 	bl	8007aac <siprintf>
			sendDataviaUART();
 80064ca:	f7ff fb27 	bl	8005b1c <sendDataviaUART>
			sprintf(message,"\nPitch:%0.4f,Roll:%0.4f,Distance:%d",PitchValue,RollValue,distance);
 80064ce:	4b5b      	ldr	r3, [pc, #364]	; (800663c <GameStart+0x74c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fa f838 	bl	8000548 <__aeabi_f2d>
 80064d8:	4605      	mov	r5, r0
 80064da:	460e      	mov	r6, r1
 80064dc:	4b58      	ldr	r3, [pc, #352]	; (8006640 <GameStart+0x750>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa f831 	bl	8000548 <__aeabi_f2d>
 80064e6:	4603      	mov	r3, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	4a56      	ldr	r2, [pc, #344]	; (8006644 <GameStart+0x754>)
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	9202      	str	r2, [sp, #8]
 80064f0:	e9cd 3400 	strd	r3, r4, [sp]
 80064f4:	462a      	mov	r2, r5
 80064f6:	4633      	mov	r3, r6
 80064f8:	4953      	ldr	r1, [pc, #332]	; (8006648 <GameStart+0x758>)
 80064fa:	484f      	ldr	r0, [pc, #316]	; (8006638 <GameStart+0x748>)
 80064fc:	f001 fad6 	bl	8007aac <siprintf>
			sendDataviaUART();
 8006500:	f7ff fb0c 	bl	8005b1c <sendDataviaUART>

		}
		if(gameTimer>700)
 8006504:	4b51      	ldr	r3, [pc, #324]	; (800664c <GameStart+0x75c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800650c:	d93d      	bls.n	800658a <GameStart+0x69a>
		{
			gameTimer=0;
 800650e:	4b4f      	ldr	r3, [pc, #316]	; (800664c <GameStart+0x75c>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
			sprintf(message,"\nTarget_Pitch:%0.4f, Target_Roll:%0.4f,Target_Distance:%d ",target_X,target_Y,(int)targetDistance);
 8006514:	4b44      	ldr	r3, [pc, #272]	; (8006628 <GameStart+0x738>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7fa f815 	bl	8000548 <__aeabi_f2d>
 800651e:	4605      	mov	r5, r0
 8006520:	460e      	mov	r6, r1
 8006522:	4b42      	ldr	r3, [pc, #264]	; (800662c <GameStart+0x73c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fa f80e 	bl	8000548 <__aeabi_f2d>
 800652c:	4603      	mov	r3, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4a3f      	ldr	r2, [pc, #252]	; (8006630 <GameStart+0x740>)
 8006532:	edd2 7a00 	vldr	s15, [r2]
 8006536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800653a:	ee17 2a90 	vmov	r2, s15
 800653e:	9202      	str	r2, [sp, #8]
 8006540:	e9cd 3400 	strd	r3, r4, [sp]
 8006544:	462a      	mov	r2, r5
 8006546:	4633      	mov	r3, r6
 8006548:	493a      	ldr	r1, [pc, #232]	; (8006634 <GameStart+0x744>)
 800654a:	483b      	ldr	r0, [pc, #236]	; (8006638 <GameStart+0x748>)
 800654c:	f001 faae 	bl	8007aac <siprintf>
			sendDataviaUART();
 8006550:	f7ff fae4 	bl	8005b1c <sendDataviaUART>
			sprintf(message,"\nPitch:%0.4f,Roll:%0.4f,Distance:%d",PitchValue,RollValue,distance);
 8006554:	4b39      	ldr	r3, [pc, #228]	; (800663c <GameStart+0x74c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7f9 fff5 	bl	8000548 <__aeabi_f2d>
 800655e:	4605      	mov	r5, r0
 8006560:	460e      	mov	r6, r1
 8006562:	4b37      	ldr	r3, [pc, #220]	; (8006640 <GameStart+0x750>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 ffee 	bl	8000548 <__aeabi_f2d>
 800656c:	4603      	mov	r3, r0
 800656e:	460c      	mov	r4, r1
 8006570:	4a34      	ldr	r2, [pc, #208]	; (8006644 <GameStart+0x754>)
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	9202      	str	r2, [sp, #8]
 8006576:	e9cd 3400 	strd	r3, r4, [sp]
 800657a:	462a      	mov	r2, r5
 800657c:	4633      	mov	r3, r6
 800657e:	4932      	ldr	r1, [pc, #200]	; (8006648 <GameStart+0x758>)
 8006580:	482d      	ldr	r0, [pc, #180]	; (8006638 <GameStart+0x748>)
 8006582:	f001 fa93 	bl	8007aac <siprintf>
			sendDataviaUART();
 8006586:	f7ff fac9 	bl	8005b1c <sendDataviaUART>

		}
        while(SystickMs %5 !=0);
 800658a:	bf00      	nop
 800658c:	4b30      	ldr	r3, [pc, #192]	; (8006650 <GameStart+0x760>)
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	4b30      	ldr	r3, [pc, #192]	; (8006654 <GameStart+0x764>)
 8006592:	fba3 2301 	umull	r2, r3, r3, r1
 8006596:	089a      	lsrs	r2, r3, #2
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	1aca      	subs	r2, r1, r3
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	d1f3      	bne.n	800658c <GameStart+0x69c>
    while(!foundTarget)
 80065a4:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <GameStart+0x734>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f083 0301 	eor.w	r3, r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f47f acd1 	bne.w	8005f56 <GameStart+0x66>

    }

	sprintf(message,"\n\rGame finish Succesfully. Congratulations\r");
 80065b4:	4b20      	ldr	r3, [pc, #128]	; (8006638 <GameStart+0x748>)
 80065b6:	4a28      	ldr	r2, [pc, #160]	; (8006658 <GameStart+0x768>)
 80065b8:	4614      	mov	r4, r2
 80065ba:	469c      	mov	ip, r3
 80065bc:	f104 0e20 	add.w	lr, r4, #32
 80065c0:	4665      	mov	r5, ip
 80065c2:	4626      	mov	r6, r4
 80065c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80065c6:	6028      	str	r0, [r5, #0]
 80065c8:	6069      	str	r1, [r5, #4]
 80065ca:	60aa      	str	r2, [r5, #8]
 80065cc:	60eb      	str	r3, [r5, #12]
 80065ce:	3410      	adds	r4, #16
 80065d0:	f10c 0c10 	add.w	ip, ip, #16
 80065d4:	4574      	cmp	r4, lr
 80065d6:	d1f3      	bne.n	80065c0 <GameStart+0x6d0>
 80065d8:	4665      	mov	r5, ip
 80065da:	4623      	mov	r3, r4
 80065dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065de:	6028      	str	r0, [r5, #0]
 80065e0:	6069      	str	r1, [r5, #4]
 80065e2:	60aa      	str	r2, [r5, #8]
	sendDataviaUART();
 80065e4:	f7ff fa9a 	bl	8005b1c <sendDataviaUART>
	foundTarget=0;
 80065e8:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <GameStart+0x734>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
	targetDistanceFound=0;
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <GameStart+0x714>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
	targetDegreeFound=0;
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <GameStart+0x730>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]

}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006602:	bf00      	nop
 8006604:	2000016c 	.word	0x2000016c
 8006608:	20000190 	.word	0x20000190
 800660c:	20000180 	.word	0x20000180
 8006610:	437f0000 	.word	0x437f0000
 8006614:	2000017c 	.word	0x2000017c
 8006618:	20000184 	.word	0x20000184
 800661c:	20000169 	.word	0x20000169
 8006620:	2000016b 	.word	0x2000016b
 8006624:	20000168 	.word	0x20000168
 8006628:	20000170 	.word	0x20000170
 800662c:	20000174 	.word	0x20000174
 8006630:	20000178 	.word	0x20000178
 8006634:	0800840c 	.word	0x0800840c
 8006638:	20000328 	.word	0x20000328
 800663c:	20000288 	.word	0x20000288
 8006640:	2000044c 	.word	0x2000044c
 8006644:	20000154 	.word	0x20000154
 8006648:	08008448 	.word	0x08008448
 800664c:	20000194 	.word	0x20000194
 8006650:	20000160 	.word	0x20000160
 8006654:	cccccccd 	.word	0xcccccccd
 8006658:	0800846c 	.word	0x0800846c

0800665c <waitNewPosition>:

void waitNewPosition()
{
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	af00      	add	r7, sp, #0

	SystickSecond=0;
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <waitNewPosition+0x74>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	sprintf(message,"Please change position and wait 10 seconds...\n");
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <waitNewPosition+0x78>)
 8006668:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <waitNewPosition+0x7c>)
 800666a:	4615      	mov	r5, r2
 800666c:	469c      	mov	ip, r3
 800666e:	f105 0e20 	add.w	lr, r5, #32
 8006672:	4664      	mov	r4, ip
 8006674:	462e      	mov	r6, r5
 8006676:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006678:	6020      	str	r0, [r4, #0]
 800667a:	6061      	str	r1, [r4, #4]
 800667c:	60a2      	str	r2, [r4, #8]
 800667e:	60e3      	str	r3, [r4, #12]
 8006680:	3510      	adds	r5, #16
 8006682:	f10c 0c10 	add.w	ip, ip, #16
 8006686:	4575      	cmp	r5, lr
 8006688:	d1f3      	bne.n	8006672 <waitNewPosition+0x16>
 800668a:	4664      	mov	r4, ip
 800668c:	462b      	mov	r3, r5
 800668e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006690:	6020      	str	r0, [r4, #0]
 8006692:	6061      	str	r1, [r4, #4]
 8006694:	60a2      	str	r2, [r4, #8]
 8006696:	881a      	ldrh	r2, [r3, #0]
 8006698:	789b      	ldrb	r3, [r3, #2]
 800669a:	81a2      	strh	r2, [r4, #12]
 800669c:	73a3      	strb	r3, [r4, #14]
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 1000);
 800669e:	480d      	ldr	r0, [pc, #52]	; (80066d4 <waitNewPosition+0x78>)
 80066a0:	f7f9 fd96 	bl	80001d0 <strlen>
 80066a4:	4603      	mov	r3, r0
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066ac:	4909      	ldr	r1, [pc, #36]	; (80066d4 <waitNewPosition+0x78>)
 80066ae:	480b      	ldr	r0, [pc, #44]	; (80066dc <waitNewPosition+0x80>)
 80066b0:	f7fd ff55 	bl	800455e <HAL_UART_Transmit>
	while(SystickSecond<10)
 80066b4:	e006      	b.n	80066c4 <waitNewPosition+0x68>
	{

		if(MPU6050Init())
 80066b6:	f7fe fbcd 	bl	8004e54 <MPU6050Init>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <waitNewPosition+0x68>
		{
			getAllDatas();
 80066c0:	f7fe fd22 	bl	8005108 <getAllDatas>
	while(SystickSecond<10)
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <waitNewPosition+0x74>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b09      	cmp	r3, #9
 80066ca:	d9f4      	bls.n	80066b6 <waitNewPosition+0x5a>

		}
	}

}
 80066cc:	bf00      	nop
 80066ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d0:	20000164 	.word	0x20000164
 80066d4:	20000328 	.word	0x20000328
 80066d8:	08008498 	.word	0x08008498
 80066dc:	20000450 	.word	0x20000450

080066e0 <testLed>:

void testLed()
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
	for(int i=0;i<255;i+=10)
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	e009      	b.n	8006700 <testLed+0x20>
	{
		ledDrive(i);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fa04 	bl	8005afc <ledDrive>
		HAL_Delay(20);
 80066f4:	2014      	movs	r0, #20
 80066f6:	f7fa fc91 	bl	800101c <HAL_Delay>
	for(int i=0;i<255;i+=10)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	330a      	adds	r3, #10
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2bfe      	cmp	r3, #254	; 0xfe
 8006704:	ddf2      	ble.n	80066ec <testLed+0xc>

	}
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <testServo>:

void testServo()
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
	for(int i=0;i<50;i+=1)
 8006714:	2300      	movs	r3, #0
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	e009      	b.n	800672e <testServo+0x20>
	{
		servoAct(i);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff f9d3 	bl	8005ac8 <servoAct>
		HAL_Delay(20);
 8006722:	2014      	movs	r0, #20
 8006724:	f7fa fc7a 	bl	800101c <HAL_Delay>
	for(int i=0;i<50;i+=1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3301      	adds	r3, #1
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b31      	cmp	r3, #49	; 0x31
 8006732:	ddf2      	ble.n	800671a <testServo+0xc>

	}

}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <waitNewGame>:
void waitNewGame()
{
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	af00      	add	r7, sp, #0
	sprintf(message,"For new game, press the user button...\r");
 8006740:	4b12      	ldr	r3, [pc, #72]	; (800678c <waitNewGame+0x50>)
 8006742:	4a13      	ldr	r2, [pc, #76]	; (8006790 <waitNewGame+0x54>)
 8006744:	4614      	mov	r4, r2
 8006746:	469c      	mov	ip, r3
 8006748:	f104 0e20 	add.w	lr, r4, #32
 800674c:	4665      	mov	r5, ip
 800674e:	4626      	mov	r6, r4
 8006750:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006752:	6028      	str	r0, [r5, #0]
 8006754:	6069      	str	r1, [r5, #4]
 8006756:	60aa      	str	r2, [r5, #8]
 8006758:	60eb      	str	r3, [r5, #12]
 800675a:	3410      	adds	r4, #16
 800675c:	f10c 0c10 	add.w	ip, ip, #16
 8006760:	4574      	cmp	r4, lr
 8006762:	d1f3      	bne.n	800674c <waitNewGame+0x10>
 8006764:	4662      	mov	r2, ip
 8006766:	4623      	mov	r3, r4
 8006768:	cb03      	ldmia	r3!, {r0, r1}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	6051      	str	r1, [r2, #4]
	sendDataviaUART();
 800676e:	f7ff f9d5 	bl	8005b1c <sendDataviaUART>

	while(!newGame);
 8006772:	bf00      	nop
 8006774:	4b07      	ldr	r3, [pc, #28]	; (8006794 <waitNewGame+0x58>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f083 0301 	eor.w	r3, r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f8      	bne.n	8006774 <waitNewGame+0x38>
	newGame=0;
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <waitNewGame+0x58>)
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]

}
 8006788:	bf00      	nop
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678c:	20000328 	.word	0x20000328
 8006790:	080084c8 	.word	0x080084c8
 8006794:	2000016d 	.word	0x2000016d

08006798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800679c:	f7fa fbcc 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067a0:	f000 f87c 	bl	800689c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067a4:	f000 fa92 	bl	8006ccc <MX_GPIO_Init>
  MX_I2C1_Init();
 80067a8:	f000 f8e2 	bl	8006970 <MX_I2C1_Init>
  MX_TIM1_Init();
 80067ac:	f000 f90e 	bl	80069cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80067b0:	f000 f962 	bl	8006a78 <MX_TIM2_Init>
  MX_TIM4_Init();
 80067b4:	f000 f9ac 	bl	8006b10 <MX_TIM4_Init>
  MX_TIM5_Init();
 80067b8:	f000 fa04 	bl	8006bc4 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80067bc:	f000 fa5c 	bl	8006c78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 80067c0:	2100      	movs	r1, #0
 80067c2:	4830      	ldr	r0, [pc, #192]	; (8006884 <main+0xec>)
 80067c4:	f7fc fe03 	bl	80033ce <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80067c8:	2100      	movs	r1, #0
 80067ca:	482f      	ldr	r0, [pc, #188]	; (8006888 <main+0xf0>)
 80067cc:	f7fc fd96 	bl	80032fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80067d0:	2104      	movs	r1, #4
 80067d2:	482e      	ldr	r0, [pc, #184]	; (800688c <main+0xf4>)
 80067d4:	f7fc fd92 	bl	80032fc <HAL_TIM_PWM_Start>

  testLed();
 80067d8:	f7ff ff82 	bl	80066e0 <testLed>
  testServo();
 80067dc:	f7ff ff97 	bl	800670e <testServo>
  //mpuInit=MPU6050Init();
  //MPU6050Initialization();
  getAccelerationRawData();
 80067e0:	f7fe fb84 	bl	8004eec <getAccelerationRawData>
  while(!MPU6050Init())
 80067e4:	e01e      	b.n	8006824 <main+0x8c>
  {

	  sprintf(message,"MPU6050 Error.Check wire connections...\n");
 80067e6:	4b2a      	ldr	r3, [pc, #168]	; (8006890 <main+0xf8>)
 80067e8:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <main+0xfc>)
 80067ea:	4614      	mov	r4, r2
 80067ec:	469c      	mov	ip, r3
 80067ee:	f104 0e20 	add.w	lr, r4, #32
 80067f2:	4665      	mov	r5, ip
 80067f4:	4626      	mov	r6, r4
 80067f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80067f8:	6028      	str	r0, [r5, #0]
 80067fa:	6069      	str	r1, [r5, #4]
 80067fc:	60aa      	str	r2, [r5, #8]
 80067fe:	60eb      	str	r3, [r5, #12]
 8006800:	3410      	adds	r4, #16
 8006802:	f10c 0c10 	add.w	ip, ip, #16
 8006806:	4574      	cmp	r4, lr
 8006808:	d1f3      	bne.n	80067f2 <main+0x5a>
 800680a:	4662      	mov	r2, ip
 800680c:	4623      	mov	r3, r4
 800680e:	cb03      	ldmia	r3!, {r0, r1}
 8006810:	6010      	str	r0, [r2, #0]
 8006812:	6051      	str	r1, [r2, #4]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	7213      	strb	r3, [r2, #8]
	  sendDataviaUART();
 8006818:	f7ff f980 	bl	8005b1c <sendDataviaUART>
	  HAL_Delay(3000);
 800681c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006820:	f7fa fbfc 	bl	800101c <HAL_Delay>
  while(!MPU6050Init())
 8006824:	f7fe fb16 	bl	8004e54 <MPU6050Init>
 8006828:	4603      	mov	r3, r0
 800682a:	f083 0301 	eor.w	r3, r3, #1
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1d8      	bne.n	80067e6 <main+0x4e>

  }

  sprintf(message,"Wait for initialization and calibration\n");
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <main+0xf8>)
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <main+0x100>)
 8006838:	4614      	mov	r4, r2
 800683a:	469c      	mov	ip, r3
 800683c:	f104 0e20 	add.w	lr, r4, #32
 8006840:	4665      	mov	r5, ip
 8006842:	4626      	mov	r6, r4
 8006844:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006846:	6028      	str	r0, [r5, #0]
 8006848:	6069      	str	r1, [r5, #4]
 800684a:	60aa      	str	r2, [r5, #8]
 800684c:	60eb      	str	r3, [r5, #12]
 800684e:	3410      	adds	r4, #16
 8006850:	f10c 0c10 	add.w	ip, ip, #16
 8006854:	4574      	cmp	r4, lr
 8006856:	d1f3      	bne.n	8006840 <main+0xa8>
 8006858:	4662      	mov	r2, ip
 800685a:	4623      	mov	r3, r4
 800685c:	cb03      	ldmia	r3!, {r0, r1}
 800685e:	6010      	str	r0, [r2, #0]
 8006860:	6051      	str	r1, [r2, #4]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	7213      	strb	r3, [r2, #8]
  sendDataviaUART();
 8006866:	f7ff f959 	bl	8005b1c <sendDataviaUART>
  MPU6050Initialization();
 800686a:	f7fe fb11 	bl	8004e90 <MPU6050Initialization>
  calibrationStage();
 800686e:	f7ff f967 	bl	8005b40 <calibrationStage>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	firstOpenOfSystem();
 8006872:	f7ff fa01 	bl	8005c78 <firstOpenOfSystem>
	waitNewPosition();
 8006876:	f7ff fef1 	bl	800665c <waitNewPosition>
	GameStart();
 800687a:	f7ff fb39 	bl	8005ef0 <GameStart>
    waitNewGame();
 800687e:	f7ff ff5d 	bl	800673c <waitNewGame>
	firstOpenOfSystem();
 8006882:	e7f6      	b.n	8006872 <main+0xda>
 8006884:	200003c4 	.word	0x200003c4
 8006888:	20000248 	.word	0x20000248
 800688c:	200002e8 	.word	0x200002e8
 8006890:	20000328 	.word	0x20000328
 8006894:	080084f0 	.word	0x080084f0
 8006898:	0800851c 	.word	0x0800851c

0800689c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b094      	sub	sp, #80	; 0x50
 80068a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80068a2:	f107 0320 	add.w	r3, r7, #32
 80068a6:	2230      	movs	r2, #48	; 0x30
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 f8f6 	bl	8007a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80068b0:	f107 030c 	add.w	r3, r7, #12
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80068c0:	2300      	movs	r3, #0
 80068c2:	60bb      	str	r3, [r7, #8]
 80068c4:	4b28      	ldr	r3, [pc, #160]	; (8006968 <SystemClock_Config+0xcc>)
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	4a27      	ldr	r2, [pc, #156]	; (8006968 <SystemClock_Config+0xcc>)
 80068ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ce:	6413      	str	r3, [r2, #64]	; 0x40
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <SystemClock_Config+0xcc>)
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80068dc:	2300      	movs	r3, #0
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	4b22      	ldr	r3, [pc, #136]	; (800696c <SystemClock_Config+0xd0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a21      	ldr	r2, [pc, #132]	; (800696c <SystemClock_Config+0xd0>)
 80068e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <SystemClock_Config+0xd0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f4:	607b      	str	r3, [r7, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80068fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006902:	2302      	movs	r3, #2
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800690c:	2304      	movs	r3, #4
 800690e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8006910:	2354      	movs	r3, #84	; 0x54
 8006912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006914:	2302      	movs	r3, #2
 8006916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006918:	2304      	movs	r3, #4
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800691c:	f107 0320 	add.w	r3, r7, #32
 8006920:	4618      	mov	r0, r3
 8006922:	f7fc f833 	bl	800298c <HAL_RCC_OscConfig>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800692c:	f000 fa54 	bl	8006dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006930:	230f      	movs	r3, #15
 8006932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006934:	2302      	movs	r3, #2
 8006936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800693c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006946:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	2102      	movs	r1, #2
 800694e:	4618      	mov	r0, r3
 8006950:	f7fc fa8c 	bl	8002e6c <HAL_RCC_ClockConfig>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800695a:	f000 fa3d 	bl	8006dd8 <Error_Handler>
  }
}
 800695e:	bf00      	nop
 8006960:	3750      	adds	r7, #80	; 0x50
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	40007000 	.word	0x40007000

08006970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006974:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <MX_I2C1_Init+0x50>)
 8006976:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <MX_I2C1_Init+0x54>)
 8006978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800697a:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <MX_I2C1_Init+0x50>)
 800697c:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <MX_I2C1_Init+0x58>)
 800697e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <MX_I2C1_Init+0x50>)
 8006982:	2200      	movs	r2, #0
 8006984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006986:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <MX_I2C1_Init+0x50>)
 8006988:	2200      	movs	r2, #0
 800698a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <MX_I2C1_Init+0x50>)
 800698e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <MX_I2C1_Init+0x50>)
 8006996:	2200      	movs	r2, #0
 8006998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <MX_I2C1_Init+0x50>)
 800699c:	2200      	movs	r2, #0
 800699e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <MX_I2C1_Init+0x50>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <MX_I2C1_Init+0x50>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80069ac:	4804      	ldr	r0, [pc, #16]	; (80069c0 <MX_I2C1_Init+0x50>)
 80069ae:	f7fb f83d 	bl	8001a2c <HAL_I2C_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80069b8:	f000 fa0e 	bl	8006dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000290 	.word	0x20000290
 80069c4:	40005400 	.word	0x40005400
 80069c8:	000186a0 	.word	0x000186a0

080069cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069d2:	f107 0310 	add.w	r3, r7, #16
 80069d6:	2200      	movs	r2, #0
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80069dc:	463b      	mov	r3, r7
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	605a      	str	r2, [r3, #4]
 80069e4:	609a      	str	r2, [r3, #8]
 80069e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80069e8:	4b21      	ldr	r3, [pc, #132]	; (8006a70 <MX_TIM1_Init+0xa4>)
 80069ea:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <MX_TIM1_Init+0xa8>)
 80069ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80069ee:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <MX_TIM1_Init+0xa4>)
 80069f0:	2253      	movs	r2, #83	; 0x53
 80069f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <MX_TIM1_Init+0xa4>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80069fa:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <MX_TIM1_Init+0xa4>)
 80069fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a02:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <MX_TIM1_Init+0xa4>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <MX_TIM1_Init+0xa4>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <MX_TIM1_Init+0xa4>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8006a14:	4816      	ldr	r0, [pc, #88]	; (8006a70 <MX_TIM1_Init+0xa4>)
 8006a16:	f7fc fcaf 	bl	8003378 <HAL_TIM_IC_Init>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006a20:	f000 f9da 	bl	8006dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4619      	mov	r1, r3
 8006a32:	480f      	ldr	r0, [pc, #60]	; (8006a70 <MX_TIM1_Init+0xa4>)
 8006a34:	f7fd fcb6 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8006a3e:	f000 f9cb 	bl	8006dd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006a42:	2300      	movs	r3, #0
 8006a44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006a46:	2301      	movs	r3, #1
 8006a48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006a52:	463b      	mov	r3, r7
 8006a54:	2200      	movs	r2, #0
 8006a56:	4619      	mov	r1, r3
 8006a58:	4805      	ldr	r0, [pc, #20]	; (8006a70 <MX_TIM1_Init+0xa4>)
 8006a5a:	f7fc fde2 	bl	8003622 <HAL_TIM_IC_ConfigChannel>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8006a64:	f000 f9b8 	bl	8006dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006a68:	bf00      	nop
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	200003c4 	.word	0x200003c4
 8006a74:	40010000 	.word	0x40010000

08006a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a7e:	f107 0308 	add.w	r3, r7, #8
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
 8006a88:	609a      	str	r2, [r3, #8]
 8006a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006a9e:	2253      	movs	r2, #83	; 0x53
 8006aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8006aa8:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006aba:	4814      	ldr	r0, [pc, #80]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006abc:	f7fc fbc8 	bl	8003250 <HAL_TIM_Base_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8006ac6:	f000 f987 	bl	8006dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ad0:	f107 0308 	add.w	r3, r7, #8
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	480d      	ldr	r0, [pc, #52]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006ad8:	f7fc ff06 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8006ae2:	f000 f979 	bl	8006dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006aee:	463b      	mov	r3, r7
 8006af0:	4619      	mov	r1, r3
 8006af2:	4806      	ldr	r0, [pc, #24]	; (8006b0c <MX_TIM2_Init+0x94>)
 8006af4:	f7fd fc56 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8006afe:	f000 f96b 	bl	8006dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	2000040c 	.word	0x2000040c

08006b10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b16:	f107 0320 	add.w	r3, r7, #32
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	609a      	str	r2, [r3, #8]
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	611a      	str	r2, [r3, #16]
 8006b2e:	615a      	str	r2, [r3, #20]
 8006b30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006b32:	4b22      	ldr	r3, [pc, #136]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b34:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <MX_TIM4_Init+0xb0>)
 8006b36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8006b38:	4b20      	ldr	r3, [pc, #128]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b3a:	2253      	movs	r2, #83	; 0x53
 8006b3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b3e:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8006b44:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b46:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006b4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b52:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006b58:	4818      	ldr	r0, [pc, #96]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b5a:	f7fc fba4 	bl	80032a6 <HAL_TIM_PWM_Init>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006b64:	f000 f938 	bl	8006dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006b70:	f107 0320 	add.w	r3, r7, #32
 8006b74:	4619      	mov	r1, r3
 8006b76:	4811      	ldr	r0, [pc, #68]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b78:	f7fd fc14 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006b82:	f000 f929 	bl	8006dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b86:	2360      	movs	r3, #96	; 0x60
 8006b88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4807      	ldr	r0, [pc, #28]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006b9e:	f7fc fddd 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006ba8:	f000 f916 	bl	8006dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006bac:	4803      	ldr	r0, [pc, #12]	; (8006bbc <MX_TIM4_Init+0xac>)
 8006bae:	f000 fa39 	bl	8007024 <HAL_TIM_MspPostInit>

}
 8006bb2:	bf00      	nop
 8006bb4:	3728      	adds	r7, #40	; 0x28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000248 	.word	0x20000248
 8006bc0:	40000800 	.word	0x40000800

08006bc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bca:	f107 0320 	add.w	r3, r7, #32
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006bd4:	1d3b      	adds	r3, r7, #4
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	605a      	str	r2, [r3, #4]
 8006bdc:	609a      	str	r2, [r3, #8]
 8006bde:	60da      	str	r2, [r3, #12]
 8006be0:	611a      	str	r2, [r3, #16]
 8006be2:	615a      	str	r2, [r3, #20]
 8006be4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006be6:	4b22      	ldr	r3, [pc, #136]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <MX_TIM5_Init+0xb0>)
 8006bea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1291;
 8006bec:	4b20      	ldr	r3, [pc, #128]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006bee:	f240 520b 	movw	r2, #1291	; 0x50b
 8006bf2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255-1;
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006bfc:	22fe      	movs	r2, #254	; 0xfe
 8006bfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c00:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8006c0c:	4818      	ldr	r0, [pc, #96]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006c0e:	f7fc fb4a 	bl	80032a6 <HAL_TIM_PWM_Init>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8006c18:	f000 f8de 	bl	8006dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006c24:	f107 0320 	add.w	r3, r7, #32
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4811      	ldr	r0, [pc, #68]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006c2c:	f7fd fbba 	bl	80043a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8006c36:	f000 f8cf 	bl	8006dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c3a:	2360      	movs	r3, #96	; 0x60
 8006c3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4807      	ldr	r0, [pc, #28]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006c52:	f7fc fd83 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8006c5c:	f000 f8bc 	bl	8006dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8006c60:	4803      	ldr	r0, [pc, #12]	; (8006c70 <MX_TIM5_Init+0xac>)
 8006c62:	f000 f9df 	bl	8007024 <HAL_TIM_MspPostInit>

}
 8006c66:	bf00      	nop
 8006c68:	3728      	adds	r7, #40	; 0x28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200002e8 	.word	0x200002e8
 8006c74:	40000c00 	.word	0x40000c00

08006c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006c7e:	4a12      	ldr	r2, [pc, #72]	; (8006cc8 <MX_USART2_UART_Init+0x50>)
 8006c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006c84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006c9e:	220c      	movs	r2, #12
 8006ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ca2:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006cae:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <MX_USART2_UART_Init+0x4c>)
 8006cb0:	f7fd fc08 	bl	80044c4 <HAL_UART_Init>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006cba:	f000 f88d 	bl	8006dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000450 	.word	0x20000450
 8006cc8:	40004400 	.word	0x40004400

08006ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd2:	f107 0314 	add.w	r3, r7, #20
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	605a      	str	r2, [r3, #4]
 8006cdc:	609a      	str	r2, [r3, #8]
 8006cde:	60da      	str	r2, [r3, #12]
 8006ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	4b38      	ldr	r3, [pc, #224]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	4a37      	ldr	r2, [pc, #220]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf2:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	4a30      	ldr	r2, [pc, #192]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0e:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	4b2a      	ldr	r3, [pc, #168]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	4a29      	ldr	r2, [pc, #164]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d24:	f043 0310 	orr.w	r3, r3, #16
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2a:	4b27      	ldr	r3, [pc, #156]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	60bb      	str	r3, [r7, #8]
 8006d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d36:	2300      	movs	r3, #0
 8006d38:	607b      	str	r3, [r7, #4]
 8006d3a:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	4a22      	ldr	r2, [pc, #136]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d40:	f043 0308 	orr.w	r3, r3, #8
 8006d44:	6313      	str	r3, [r2, #48]	; 0x30
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d5c:	f043 0302 	orr.w	r3, r3, #2
 8006d60:	6313      	str	r3, [r2, #48]	; 0x30
 8006d62:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <MX_GPIO_Init+0xfc>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d74:	4815      	ldr	r0, [pc, #84]	; (8006dcc <MX_GPIO_Init+0x100>)
 8006d76:	f7fa fe1b 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <MX_GPIO_Init+0x104>)
 8006d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d86:	f107 0314 	add.w	r3, r7, #20
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4811      	ldr	r0, [pc, #68]	; (8006dd4 <MX_GPIO_Init+0x108>)
 8006d8e:	f7fa fc75 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006da0:	2300      	movs	r3, #0
 8006da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4619      	mov	r1, r3
 8006daa:	4808      	ldr	r0, [pc, #32]	; (8006dcc <MX_GPIO_Init+0x100>)
 8006dac:	f7fa fc66 	bl	800167c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006db0:	2200      	movs	r2, #0
 8006db2:	2100      	movs	r1, #0
 8006db4:	2006      	movs	r0, #6
 8006db6:	f7fa fa2e 	bl	8001216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006dba:	2006      	movs	r0, #6
 8006dbc:	f7fa fa47 	bl	800124e <HAL_NVIC_EnableIRQ>

}
 8006dc0:	bf00      	nop
 8006dc2:	3728      	adds	r7, #40	; 0x28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	10110000 	.word	0x10110000
 8006dd4:	40020000 	.word	0x40020000

08006dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <HAL_MspInit+0x4c>)
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	4a0f      	ldr	r2, [pc, #60]	; (8006e34 <HAL_MspInit+0x4c>)
 8006df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <HAL_MspInit+0x4c>)
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <HAL_MspInit+0x4c>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4a08      	ldr	r2, [pc, #32]	; (8006e34 <HAL_MspInit+0x4c>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1a:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <HAL_MspInit+0x4c>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40023800 	.word	0x40023800

08006e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	; 0x28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	609a      	str	r2, [r3, #8]
 8006e4c:	60da      	str	r2, [r3, #12]
 8006e4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <HAL_I2C_MspInit+0x84>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d12b      	bne.n	8006eb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <HAL_I2C_MspInit+0x88>)
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <HAL_I2C_MspInit+0x88>)
 8006e64:	f043 0302 	orr.w	r3, r3, #2
 8006e68:	6313      	str	r3, [r2, #48]	; 0x30
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <HAL_I2C_MspInit+0x88>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e76:	23c0      	movs	r3, #192	; 0xc0
 8006e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e7a:	2312      	movs	r3, #18
 8006e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e82:	2303      	movs	r3, #3
 8006e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e86:	2304      	movs	r3, #4
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e8a:	f107 0314 	add.w	r3, r7, #20
 8006e8e:	4619      	mov	r1, r3
 8006e90:	480c      	ldr	r0, [pc, #48]	; (8006ec4 <HAL_I2C_MspInit+0x8c>)
 8006e92:	f7fa fbf3 	bl	800167c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <HAL_I2C_MspInit+0x88>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <HAL_I2C_MspInit+0x88>)
 8006ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_I2C_MspInit+0x88>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006eb2:	bf00      	nop
 8006eb4:	3728      	adds	r7, #40	; 0x28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40005400 	.word	0x40005400
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40020400 	.word	0x40020400

08006ec8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed0:	f107 0314 	add.w	r3, r7, #20
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <HAL_TIM_IC_MspInit+0x94>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d134      	bne.n	8006f54 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	4b1c      	ldr	r3, [pc, #112]	; (8006f60 <HAL_TIM_IC_MspInit+0x98>)
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIM_IC_MspInit+0x98>)
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8006efa:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <HAL_TIM_IC_MspInit+0x98>)
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <HAL_TIM_IC_MspInit+0x98>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <HAL_TIM_IC_MspInit+0x98>)
 8006f10:	f043 0310 	orr.w	r3, r3, #16
 8006f14:	6313      	str	r3, [r2, #48]	; 0x30
 8006f16:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <HAL_TIM_IC_MspInit+0x98>)
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f30:	2300      	movs	r3, #0
 8006f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006f34:	2301      	movs	r3, #1
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4809      	ldr	r0, [pc, #36]	; (8006f64 <HAL_TIM_IC_MspInit+0x9c>)
 8006f40:	f7fa fb9c 	bl	800167c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006f44:	2200      	movs	r2, #0
 8006f46:	2100      	movs	r1, #0
 8006f48:	201b      	movs	r0, #27
 8006f4a:	f7fa f964 	bl	8001216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006f4e:	201b      	movs	r0, #27
 8006f50:	f7fa f97d 	bl	800124e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006f54:	bf00      	nop
 8006f56:	3728      	adds	r7, #40	; 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40021000 	.word	0x40021000

08006f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f78:	d115      	bne.n	8006fa6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_TIM_Base_MspInit+0x48>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <HAL_TIM_Base_MspInit+0x48>)
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	6413      	str	r3, [r2, #64]	; 0x40
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_TIM_Base_MspInit+0x48>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	201c      	movs	r0, #28
 8006f9c:	f7fa f93b 	bl	8001216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006fa0:	201c      	movs	r0, #28
 8006fa2:	f7fa f954 	bl	800124e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800

08006fb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_TIM_PWM_MspInit+0x64>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10e      	bne.n	8006fe4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <HAL_TIM_PWM_MspInit+0x68>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	4a13      	ldr	r2, [pc, #76]	; (800701c <HAL_TIM_PWM_MspInit+0x68>)
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <HAL_TIM_PWM_MspInit+0x68>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006fe2:	e012      	b.n	800700a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a0d      	ldr	r2, [pc, #52]	; (8007020 <HAL_TIM_PWM_MspInit+0x6c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d10d      	bne.n	800700a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	; (800701c <HAL_TIM_PWM_MspInit+0x68>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	4a09      	ldr	r2, [pc, #36]	; (800701c <HAL_TIM_PWM_MspInit+0x68>)
 8006ff8:	f043 0308 	orr.w	r3, r3, #8
 8006ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ffe:	4b07      	ldr	r3, [pc, #28]	; (800701c <HAL_TIM_PWM_MspInit+0x68>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	60bb      	str	r3, [r7, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40000800 	.word	0x40000800
 800701c:	40023800 	.word	0x40023800
 8007020:	40000c00 	.word	0x40000c00

08007024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	; 0x28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702c:	f107 0314 	add.w	r3, r7, #20
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	609a      	str	r2, [r3, #8]
 8007038:	60da      	str	r2, [r3, #12]
 800703a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a24      	ldr	r2, [pc, #144]	; (80070d4 <HAL_TIM_MspPostInit+0xb0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d11f      	bne.n	8007086 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <HAL_TIM_MspPostInit+0xb4>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	4a22      	ldr	r2, [pc, #136]	; (80070d8 <HAL_TIM_MspPostInit+0xb4>)
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	6313      	str	r3, [r2, #48]	; 0x30
 8007056:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <HAL_TIM_MspPostInit+0xb4>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007068:	2302      	movs	r3, #2
 800706a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800706c:	2300      	movs	r3, #0
 800706e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007070:	2300      	movs	r3, #0
 8007072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007074:	2302      	movs	r3, #2
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	4619      	mov	r1, r3
 800707e:	4817      	ldr	r0, [pc, #92]	; (80070dc <HAL_TIM_MspPostInit+0xb8>)
 8007080:	f7fa fafc 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8007084:	e022      	b.n	80070cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <HAL_TIM_MspPostInit+0xbc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d11d      	bne.n	80070cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <HAL_TIM_MspPostInit+0xb4>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	4a0f      	ldr	r2, [pc, #60]	; (80070d8 <HAL_TIM_MspPostInit+0xb4>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6313      	str	r3, [r2, #48]	; 0x30
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <HAL_TIM_MspPostInit+0xb4>)
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80070ac:	2302      	movs	r3, #2
 80070ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	2302      	movs	r3, #2
 80070b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070b8:	2300      	movs	r3, #0
 80070ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80070bc:	2302      	movs	r3, #2
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	4619      	mov	r1, r3
 80070c6:	4807      	ldr	r0, [pc, #28]	; (80070e4 <HAL_TIM_MspPostInit+0xc0>)
 80070c8:	f7fa fad8 	bl	800167c <HAL_GPIO_Init>
}
 80070cc:	bf00      	nop
 80070ce:	3728      	adds	r7, #40	; 0x28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40023800 	.word	0x40023800
 80070dc:	40020c00 	.word	0x40020c00
 80070e0:	40000c00 	.word	0x40000c00
 80070e4:	40020000 	.word	0x40020000

080070e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070f0:	f107 0314 	add.w	r3, r7, #20
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	605a      	str	r2, [r3, #4]
 80070fa:	609a      	str	r2, [r3, #8]
 80070fc:	60da      	str	r2, [r3, #12]
 80070fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a19      	ldr	r2, [pc, #100]	; (800716c <HAL_UART_MspInit+0x84>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d12b      	bne.n	8007162 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	4b18      	ldr	r3, [pc, #96]	; (8007170 <HAL_UART_MspInit+0x88>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	4a17      	ldr	r2, [pc, #92]	; (8007170 <HAL_UART_MspInit+0x88>)
 8007114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007118:	6413      	str	r3, [r2, #64]	; 0x40
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <HAL_UART_MspInit+0x88>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	4b11      	ldr	r3, [pc, #68]	; (8007170 <HAL_UART_MspInit+0x88>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	4a10      	ldr	r2, [pc, #64]	; (8007170 <HAL_UART_MspInit+0x88>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6313      	str	r3, [r2, #48]	; 0x30
 8007136:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <HAL_UART_MspInit+0x88>)
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007142:	230c      	movs	r3, #12
 8007144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007146:	2302      	movs	r3, #2
 8007148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800714a:	2301      	movs	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800714e:	2303      	movs	r3, #3
 8007150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007152:	2307      	movs	r3, #7
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007156:	f107 0314 	add.w	r3, r7, #20
 800715a:	4619      	mov	r1, r3
 800715c:	4805      	ldr	r0, [pc, #20]	; (8007174 <HAL_UART_MspInit+0x8c>)
 800715e:	f7fa fa8d 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007162:	bf00      	nop
 8007164:	3728      	adds	r7, #40	; 0x28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40004400 	.word	0x40004400
 8007170:	40023800 	.word	0x40023800
 8007174:	40020000 	.word	0x40020000

08007178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007186:	b480      	push	{r7}
 8007188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800718a:	e7fe      	b.n	800718a <HardFault_Handler+0x4>

0800718c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007190:	e7fe      	b.n	8007190 <MemManage_Handler+0x4>

08007192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007192:	b480      	push	{r7}
 8007194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007196:	e7fe      	b.n	8007196 <BusFault_Handler+0x4>

08007198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800719c:	e7fe      	b.n	800719c <UsageFault_Handler+0x4>

0800719e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800719e:	b480      	push	{r7}
 80071a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80071a2:	bf00      	nop
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80071ba:	b480      	push	{r7}
 80071bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071be:	bf00      	nop
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickMs++;
 80071cc:	4b12      	ldr	r3, [pc, #72]	; (8007218 <SysTick_Handler+0x50>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	4a11      	ldr	r2, [pc, #68]	; (8007218 <SysTick_Handler+0x50>)
 80071d4:	6013      	str	r3, [r2, #0]
	gameTimer++;
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <SysTick_Handler+0x54>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	4a0f      	ldr	r2, [pc, #60]	; (800721c <SysTick_Handler+0x54>)
 80071de:	6013      	str	r3, [r2, #0]
	timeServo++;
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <SysTick_Handler+0x58>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <SysTick_Handler+0x58>)
 80071e8:	6013      	str	r3, [r2, #0]
	timeLed++;
 80071ea:	4b0e      	ldr	r3, [pc, #56]	; (8007224 <SysTick_Handler+0x5c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	4a0c      	ldr	r2, [pc, #48]	; (8007224 <SysTick_Handler+0x5c>)
 80071f2:	6013      	str	r3, [r2, #0]
	if(SystickMs==1000)
 80071f4:	4b08      	ldr	r3, [pc, #32]	; (8007218 <SysTick_Handler+0x50>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071fc:	d107      	bne.n	800720e <SysTick_Handler+0x46>
	{
		SystickSecond++;
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <SysTick_Handler+0x60>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a08      	ldr	r2, [pc, #32]	; (8007228 <SysTick_Handler+0x60>)
 8007206:	6013      	str	r3, [r2, #0]
		SystickMs=0;
 8007208:	4b03      	ldr	r3, [pc, #12]	; (8007218 <SysTick_Handler+0x50>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800720e:	f7f9 fee5 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000160 	.word	0x20000160
 800721c:	20000194 	.word	0x20000194
 8007220:	2000018c 	.word	0x2000018c
 8007224:	20000190 	.word	0x20000190
 8007228:	20000164 	.word	0x20000164

0800722c <TIM1_CC_IRQHandler>:
  */
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007230:	4802      	ldr	r0, [pc, #8]	; (800723c <TIM1_CC_IRQHandler+0x10>)
 8007232:	f7fc f8ee 	bl	8003412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8007236:	bf00      	nop
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	200003c4 	.word	0x200003c4

08007240 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <_sbrk+0x50>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <_sbrk+0x16>
		heap_end = &end;
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <_sbrk+0x50>)
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <_sbrk+0x54>)
 8007254:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007256:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <_sbrk+0x50>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800725c:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <_sbrk+0x50>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4413      	add	r3, r2
 8007264:	466a      	mov	r2, sp
 8007266:	4293      	cmp	r3, r2
 8007268:	d907      	bls.n	800727a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800726a:	f000 fbed 	bl	8007a48 <__errno>
 800726e:	4602      	mov	r2, r0
 8007270:	230c      	movs	r3, #12
 8007272:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295
 8007278:	e006      	b.n	8007288 <_sbrk+0x48>
	}

	heap_end += incr;
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <_sbrk+0x50>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	4a03      	ldr	r2, [pc, #12]	; (8007290 <_sbrk+0x50>)
 8007284:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	2000019c 	.word	0x2000019c
 8007294:	200004a0 	.word	0x200004a0

08007298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800729c:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <SystemInit+0x28>)
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a2:	4a07      	ldr	r2, [pc, #28]	; (80072c0 <SystemInit+0x28>)
 80072a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <SystemInit+0x28>)
 80072ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072b2:	609a      	str	r2, [r3, #8]
#endif
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000ed00 	.word	0xe000ed00

080072c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80072c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80072c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80072ca:	e003      	b.n	80072d4 <LoopCopyDataInit>

080072cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80072cc:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80072ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80072d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80072d2:	3104      	adds	r1, #4

080072d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80072d4:	480b      	ldr	r0, [pc, #44]	; (8007304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80072d6:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80072d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80072da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80072dc:	d3f6      	bcc.n	80072cc <CopyDataInit>
  ldr  r2, =_sbss
 80072de:	4a0b      	ldr	r2, [pc, #44]	; (800730c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80072e0:	e002      	b.n	80072e8 <LoopFillZerobss>

080072e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80072e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80072e4:	f842 3b04 	str.w	r3, [r2], #4

080072e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80072e8:	4b09      	ldr	r3, [pc, #36]	; (8007310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80072ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80072ec:	d3f9      	bcc.n	80072e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80072ee:	f7ff ffd3 	bl	8007298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072f2:	f000 fbaf 	bl	8007a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072f6:	f7ff fa4f 	bl	8006798 <main>
  bx  lr    
 80072fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80072fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007300:	080085e8 	.word	0x080085e8
  ldr  r0, =_sdata
 8007304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007308:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 800730c:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8007310:	2000049c 	.word	0x2000049c

08007314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007314:	e7fe      	b.n	8007314 <ADC_IRQHandler>
	...

08007318 <atan>:
 8007318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	ec55 4b10 	vmov	r4, r5, d0
 8007320:	4bc3      	ldr	r3, [pc, #780]	; (8007630 <atan+0x318>)
 8007322:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007326:	429e      	cmp	r6, r3
 8007328:	46ab      	mov	fp, r5
 800732a:	dd18      	ble.n	800735e <atan+0x46>
 800732c:	4bc1      	ldr	r3, [pc, #772]	; (8007634 <atan+0x31c>)
 800732e:	429e      	cmp	r6, r3
 8007330:	dc01      	bgt.n	8007336 <atan+0x1e>
 8007332:	d109      	bne.n	8007348 <atan+0x30>
 8007334:	b144      	cbz	r4, 8007348 <atan+0x30>
 8007336:	4622      	mov	r2, r4
 8007338:	462b      	mov	r3, r5
 800733a:	4620      	mov	r0, r4
 800733c:	4629      	mov	r1, r5
 800733e:	f7f8 ffa5 	bl	800028c <__adddf3>
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	e006      	b.n	8007356 <atan+0x3e>
 8007348:	f1bb 0f00 	cmp.w	fp, #0
 800734c:	f340 8131 	ble.w	80075b2 <atan+0x29a>
 8007350:	a59b      	add	r5, pc, #620	; (adr r5, 80075c0 <atan+0x2a8>)
 8007352:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007356:	ec45 4b10 	vmov	d0, r4, r5
 800735a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	4bb6      	ldr	r3, [pc, #728]	; (8007638 <atan+0x320>)
 8007360:	429e      	cmp	r6, r3
 8007362:	dc14      	bgt.n	800738e <atan+0x76>
 8007364:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007368:	429e      	cmp	r6, r3
 800736a:	dc0d      	bgt.n	8007388 <atan+0x70>
 800736c:	a396      	add	r3, pc, #600	; (adr r3, 80075c8 <atan+0x2b0>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	ee10 0a10 	vmov	r0, s0
 8007376:	4629      	mov	r1, r5
 8007378:	f7f8 ff88 	bl	800028c <__adddf3>
 800737c:	2200      	movs	r2, #0
 800737e:	4baf      	ldr	r3, [pc, #700]	; (800763c <atan+0x324>)
 8007380:	f7f9 fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8007384:	2800      	cmp	r0, #0
 8007386:	d1e6      	bne.n	8007356 <atan+0x3e>
 8007388:	f04f 3aff 	mov.w	sl, #4294967295
 800738c:	e02b      	b.n	80073e6 <atan+0xce>
 800738e:	f000 f963 	bl	8007658 <fabs>
 8007392:	4bab      	ldr	r3, [pc, #684]	; (8007640 <atan+0x328>)
 8007394:	429e      	cmp	r6, r3
 8007396:	ec55 4b10 	vmov	r4, r5, d0
 800739a:	f300 80bf 	bgt.w	800751c <atan+0x204>
 800739e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80073a2:	429e      	cmp	r6, r3
 80073a4:	f300 80a0 	bgt.w	80074e8 <atan+0x1d0>
 80073a8:	ee10 2a10 	vmov	r2, s0
 80073ac:	ee10 0a10 	vmov	r0, s0
 80073b0:	462b      	mov	r3, r5
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f8 ff6a 	bl	800028c <__adddf3>
 80073b8:	2200      	movs	r2, #0
 80073ba:	4ba0      	ldr	r3, [pc, #640]	; (800763c <atan+0x324>)
 80073bc:	f7f8 ff64 	bl	8000288 <__aeabi_dsub>
 80073c0:	2200      	movs	r2, #0
 80073c2:	4606      	mov	r6, r0
 80073c4:	460f      	mov	r7, r1
 80073c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073ca:	4620      	mov	r0, r4
 80073cc:	4629      	mov	r1, r5
 80073ce:	f7f8 ff5d 	bl	800028c <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4630      	mov	r0, r6
 80073d8:	4639      	mov	r1, r7
 80073da:	f7f9 fa37 	bl	800084c <__aeabi_ddiv>
 80073de:	f04f 0a00 	mov.w	sl, #0
 80073e2:	4604      	mov	r4, r0
 80073e4:	460d      	mov	r5, r1
 80073e6:	4622      	mov	r2, r4
 80073e8:	462b      	mov	r3, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f9 f903 	bl	80005f8 <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4680      	mov	r8, r0
 80073f8:	4689      	mov	r9, r1
 80073fa:	f7f9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80073fe:	a374      	add	r3, pc, #464	; (adr r3, 80075d0 <atan+0x2b8>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	a372      	add	r3, pc, #456	; (adr r3, 80075d8 <atan+0x2c0>)
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f8 ff3b 	bl	800028c <__adddf3>
 8007416:	4632      	mov	r2, r6
 8007418:	463b      	mov	r3, r7
 800741a:	f7f9 f8ed 	bl	80005f8 <__aeabi_dmul>
 800741e:	a370      	add	r3, pc, #448	; (adr r3, 80075e0 <atan+0x2c8>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f7f8 ff32 	bl	800028c <__adddf3>
 8007428:	4632      	mov	r2, r6
 800742a:	463b      	mov	r3, r7
 800742c:	f7f9 f8e4 	bl	80005f8 <__aeabi_dmul>
 8007430:	a36d      	add	r3, pc, #436	; (adr r3, 80075e8 <atan+0x2d0>)
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f8 ff29 	bl	800028c <__adddf3>
 800743a:	4632      	mov	r2, r6
 800743c:	463b      	mov	r3, r7
 800743e:	f7f9 f8db 	bl	80005f8 <__aeabi_dmul>
 8007442:	a36b      	add	r3, pc, #428	; (adr r3, 80075f0 <atan+0x2d8>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f8 ff20 	bl	800028c <__adddf3>
 800744c:	4632      	mov	r2, r6
 800744e:	463b      	mov	r3, r7
 8007450:	f7f9 f8d2 	bl	80005f8 <__aeabi_dmul>
 8007454:	a368      	add	r3, pc, #416	; (adr r3, 80075f8 <atan+0x2e0>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f8 ff17 	bl	800028c <__adddf3>
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	f7f9 f8c9 	bl	80005f8 <__aeabi_dmul>
 8007466:	a366      	add	r3, pc, #408	; (adr r3, 8007600 <atan+0x2e8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	4680      	mov	r8, r0
 800746e:	4689      	mov	r9, r1
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 f8c0 	bl	80005f8 <__aeabi_dmul>
 8007478:	a363      	add	r3, pc, #396	; (adr r3, 8007608 <atan+0x2f0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 ff03 	bl	8000288 <__aeabi_dsub>
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	f7f9 f8b7 	bl	80005f8 <__aeabi_dmul>
 800748a:	a361      	add	r3, pc, #388	; (adr r3, 8007610 <atan+0x2f8>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fefa 	bl	8000288 <__aeabi_dsub>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 f8ae 	bl	80005f8 <__aeabi_dmul>
 800749c:	a35e      	add	r3, pc, #376	; (adr r3, 8007618 <atan+0x300>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fef1 	bl	8000288 <__aeabi_dsub>
 80074a6:	4632      	mov	r2, r6
 80074a8:	463b      	mov	r3, r7
 80074aa:	f7f9 f8a5 	bl	80005f8 <__aeabi_dmul>
 80074ae:	a35c      	add	r3, pc, #368	; (adr r3, 8007620 <atan+0x308>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 fee8 	bl	8000288 <__aeabi_dsub>
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	f7f9 f89c 	bl	80005f8 <__aeabi_dmul>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4640      	mov	r0, r8
 80074c6:	4649      	mov	r1, r9
 80074c8:	f7f8 fee0 	bl	800028c <__adddf3>
 80074cc:	4622      	mov	r2, r4
 80074ce:	462b      	mov	r3, r5
 80074d0:	f7f9 f892 	bl	80005f8 <__aeabi_dmul>
 80074d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	d14b      	bne.n	8007576 <atan+0x25e>
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f8 fed1 	bl	8000288 <__aeabi_dsub>
 80074e6:	e72c      	b.n	8007342 <atan+0x2a>
 80074e8:	ee10 0a10 	vmov	r0, s0
 80074ec:	2200      	movs	r2, #0
 80074ee:	4b53      	ldr	r3, [pc, #332]	; (800763c <atan+0x324>)
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f8 fec9 	bl	8000288 <__aeabi_dsub>
 80074f6:	2200      	movs	r2, #0
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	4b4f      	ldr	r3, [pc, #316]	; (800763c <atan+0x324>)
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f8 fec3 	bl	800028c <__adddf3>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4630      	mov	r0, r6
 800750c:	4639      	mov	r1, r7
 800750e:	f7f9 f99d 	bl	800084c <__aeabi_ddiv>
 8007512:	f04f 0a01 	mov.w	sl, #1
 8007516:	4604      	mov	r4, r0
 8007518:	460d      	mov	r5, r1
 800751a:	e764      	b.n	80073e6 <atan+0xce>
 800751c:	4b49      	ldr	r3, [pc, #292]	; (8007644 <atan+0x32c>)
 800751e:	429e      	cmp	r6, r3
 8007520:	dc1d      	bgt.n	800755e <atan+0x246>
 8007522:	ee10 0a10 	vmov	r0, s0
 8007526:	2200      	movs	r2, #0
 8007528:	4b47      	ldr	r3, [pc, #284]	; (8007648 <atan+0x330>)
 800752a:	4629      	mov	r1, r5
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	2200      	movs	r2, #0
 8007532:	4606      	mov	r6, r0
 8007534:	460f      	mov	r7, r1
 8007536:	4b44      	ldr	r3, [pc, #272]	; (8007648 <atan+0x330>)
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f7f9 f85c 	bl	80005f8 <__aeabi_dmul>
 8007540:	2200      	movs	r2, #0
 8007542:	4b3e      	ldr	r3, [pc, #248]	; (800763c <atan+0x324>)
 8007544:	f7f8 fea2 	bl	800028c <__adddf3>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 f97c 	bl	800084c <__aeabi_ddiv>
 8007554:	f04f 0a02 	mov.w	sl, #2
 8007558:	4604      	mov	r4, r0
 800755a:	460d      	mov	r5, r1
 800755c:	e743      	b.n	80073e6 <atan+0xce>
 800755e:	462b      	mov	r3, r5
 8007560:	ee10 2a10 	vmov	r2, s0
 8007564:	2000      	movs	r0, #0
 8007566:	4939      	ldr	r1, [pc, #228]	; (800764c <atan+0x334>)
 8007568:	f7f9 f970 	bl	800084c <__aeabi_ddiv>
 800756c:	f04f 0a03 	mov.w	sl, #3
 8007570:	4604      	mov	r4, r0
 8007572:	460d      	mov	r5, r1
 8007574:	e737      	b.n	80073e6 <atan+0xce>
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <atan+0x338>)
 8007578:	4e36      	ldr	r6, [pc, #216]	; (8007654 <atan+0x33c>)
 800757a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800757e:	4456      	add	r6, sl
 8007580:	449a      	add	sl, r3
 8007582:	e9da 2300 	ldrd	r2, r3, [sl]
 8007586:	f7f8 fe7f 	bl	8000288 <__aeabi_dsub>
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	f7f8 fe7b 	bl	8000288 <__aeabi_dsub>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	e9d6 0100 	ldrd	r0, r1, [r6]
 800759a:	f7f8 fe75 	bl	8000288 <__aeabi_dsub>
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	f6bf aed6 	bge.w	8007356 <atan+0x3e>
 80075aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075ae:	461d      	mov	r5, r3
 80075b0:	e6d1      	b.n	8007356 <atan+0x3e>
 80075b2:	a51d      	add	r5, pc, #116	; (adr r5, 8007628 <atan+0x310>)
 80075b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075b8:	e6cd      	b.n	8007356 <atan+0x3e>
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	54442d18 	.word	0x54442d18
 80075c4:	3ff921fb 	.word	0x3ff921fb
 80075c8:	8800759c 	.word	0x8800759c
 80075cc:	7e37e43c 	.word	0x7e37e43c
 80075d0:	e322da11 	.word	0xe322da11
 80075d4:	3f90ad3a 	.word	0x3f90ad3a
 80075d8:	24760deb 	.word	0x24760deb
 80075dc:	3fa97b4b 	.word	0x3fa97b4b
 80075e0:	a0d03d51 	.word	0xa0d03d51
 80075e4:	3fb10d66 	.word	0x3fb10d66
 80075e8:	c54c206e 	.word	0xc54c206e
 80075ec:	3fb745cd 	.word	0x3fb745cd
 80075f0:	920083ff 	.word	0x920083ff
 80075f4:	3fc24924 	.word	0x3fc24924
 80075f8:	5555550d 	.word	0x5555550d
 80075fc:	3fd55555 	.word	0x3fd55555
 8007600:	2c6a6c2f 	.word	0x2c6a6c2f
 8007604:	bfa2b444 	.word	0xbfa2b444
 8007608:	52defd9a 	.word	0x52defd9a
 800760c:	3fadde2d 	.word	0x3fadde2d
 8007610:	af749a6d 	.word	0xaf749a6d
 8007614:	3fb3b0f2 	.word	0x3fb3b0f2
 8007618:	fe231671 	.word	0xfe231671
 800761c:	3fbc71c6 	.word	0x3fbc71c6
 8007620:	9998ebc4 	.word	0x9998ebc4
 8007624:	3fc99999 	.word	0x3fc99999
 8007628:	54442d18 	.word	0x54442d18
 800762c:	bff921fb 	.word	0xbff921fb
 8007630:	440fffff 	.word	0x440fffff
 8007634:	7ff00000 	.word	0x7ff00000
 8007638:	3fdbffff 	.word	0x3fdbffff
 800763c:	3ff00000 	.word	0x3ff00000
 8007640:	3ff2ffff 	.word	0x3ff2ffff
 8007644:	40037fff 	.word	0x40037fff
 8007648:	3ff80000 	.word	0x3ff80000
 800764c:	bff00000 	.word	0xbff00000
 8007650:	08008580 	.word	0x08008580
 8007654:	08008560 	.word	0x08008560

08007658 <fabs>:
 8007658:	ec51 0b10 	vmov	r0, r1, d0
 800765c:	ee10 2a10 	vmov	r2, s0
 8007660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007664:	ec43 2b10 	vmov	d0, r2, r3
 8007668:	4770      	bx	lr

0800766a <atan2>:
 800766a:	f000 b85d 	b.w	8007728 <__ieee754_atan2>
	...

08007670 <sqrt>:
 8007670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007674:	ed2d 8b02 	vpush	{d8}
 8007678:	b08b      	sub	sp, #44	; 0x2c
 800767a:	ec55 4b10 	vmov	r4, r5, d0
 800767e:	f000 f931 	bl	80078e4 <__ieee754_sqrt>
 8007682:	4b26      	ldr	r3, [pc, #152]	; (800771c <sqrt+0xac>)
 8007684:	eeb0 8a40 	vmov.f32	s16, s0
 8007688:	eef0 8a60 	vmov.f32	s17, s1
 800768c:	f993 6000 	ldrsb.w	r6, [r3]
 8007690:	1c73      	adds	r3, r6, #1
 8007692:	d02a      	beq.n	80076ea <sqrt+0x7a>
 8007694:	4622      	mov	r2, r4
 8007696:	462b      	mov	r3, r5
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f9 fa46 	bl	8000b2c <__aeabi_dcmpun>
 80076a0:	4607      	mov	r7, r0
 80076a2:	bb10      	cbnz	r0, 80076ea <sqrt+0x7a>
 80076a4:	f04f 0800 	mov.w	r8, #0
 80076a8:	f04f 0900 	mov.w	r9, #0
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	4620      	mov	r0, r4
 80076b2:	4629      	mov	r1, r5
 80076b4:	f7f9 fa12 	bl	8000adc <__aeabi_dcmplt>
 80076b8:	b1b8      	cbz	r0, 80076ea <sqrt+0x7a>
 80076ba:	2301      	movs	r3, #1
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	4b18      	ldr	r3, [pc, #96]	; (8007720 <sqrt+0xb0>)
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	9708      	str	r7, [sp, #32]
 80076c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80076c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076cc:	b9b6      	cbnz	r6, 80076fc <sqrt+0x8c>
 80076ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80076d2:	4668      	mov	r0, sp
 80076d4:	f000 f9b6 	bl	8007a44 <matherr>
 80076d8:	b1d0      	cbz	r0, 8007710 <sqrt+0xa0>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	b11b      	cbz	r3, 80076e6 <sqrt+0x76>
 80076de:	f000 f9b3 	bl	8007a48 <__errno>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	6003      	str	r3, [r0, #0]
 80076e6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80076ea:	eeb0 0a48 	vmov.f32	s0, s16
 80076ee:	eef0 0a68 	vmov.f32	s1, s17
 80076f2:	b00b      	add	sp, #44	; 0x2c
 80076f4:	ecbd 8b02 	vpop	{d8}
 80076f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f9 f8a2 	bl	800084c <__aeabi_ddiv>
 8007708:	2e02      	cmp	r6, #2
 800770a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800770e:	d1e0      	bne.n	80076d2 <sqrt+0x62>
 8007710:	f000 f99a 	bl	8007a48 <__errno>
 8007714:	2321      	movs	r3, #33	; 0x21
 8007716:	6003      	str	r3, [r0, #0]
 8007718:	e7df      	b.n	80076da <sqrt+0x6a>
 800771a:	bf00      	nop
 800771c:	200000b0 	.word	0x200000b0
 8007720:	080085a0 	.word	0x080085a0
 8007724:	00000000 	.word	0x00000000

08007728 <__ieee754_atan2>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	ec57 6b11 	vmov	r6, r7, d1
 8007730:	4273      	negs	r3, r6
 8007732:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007736:	4333      	orrs	r3, r6
 8007738:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80078e0 <__ieee754_atan2+0x1b8>
 800773c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007740:	4573      	cmp	r3, lr
 8007742:	ec51 0b10 	vmov	r0, r1, d0
 8007746:	ee11 8a10 	vmov	r8, s2
 800774a:	d80a      	bhi.n	8007762 <__ieee754_atan2+0x3a>
 800774c:	4244      	negs	r4, r0
 800774e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007752:	4304      	orrs	r4, r0
 8007754:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007758:	4574      	cmp	r4, lr
 800775a:	468c      	mov	ip, r1
 800775c:	ee10 9a10 	vmov	r9, s0
 8007760:	d907      	bls.n	8007772 <__ieee754_atan2+0x4a>
 8007762:	4632      	mov	r2, r6
 8007764:	463b      	mov	r3, r7
 8007766:	f7f8 fd91 	bl	800028c <__adddf3>
 800776a:	ec41 0b10 	vmov	d0, r0, r1
 800776e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007772:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007776:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800777a:	4334      	orrs	r4, r6
 800777c:	d103      	bne.n	8007786 <__ieee754_atan2+0x5e>
 800777e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007782:	f7ff bdc9 	b.w	8007318 <atan>
 8007786:	17bc      	asrs	r4, r7, #30
 8007788:	f004 0402 	and.w	r4, r4, #2
 800778c:	ea53 0909 	orrs.w	r9, r3, r9
 8007790:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007794:	d107      	bne.n	80077a6 <__ieee754_atan2+0x7e>
 8007796:	2c02      	cmp	r4, #2
 8007798:	d073      	beq.n	8007882 <__ieee754_atan2+0x15a>
 800779a:	2c03      	cmp	r4, #3
 800779c:	d1e5      	bne.n	800776a <__ieee754_atan2+0x42>
 800779e:	a13e      	add	r1, pc, #248	; (adr r1, 8007898 <__ieee754_atan2+0x170>)
 80077a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a4:	e7e1      	b.n	800776a <__ieee754_atan2+0x42>
 80077a6:	ea52 0808 	orrs.w	r8, r2, r8
 80077aa:	d106      	bne.n	80077ba <__ieee754_atan2+0x92>
 80077ac:	f1bc 0f00 	cmp.w	ip, #0
 80077b0:	da6b      	bge.n	800788a <__ieee754_atan2+0x162>
 80077b2:	a13b      	add	r1, pc, #236	; (adr r1, 80078a0 <__ieee754_atan2+0x178>)
 80077b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b8:	e7d7      	b.n	800776a <__ieee754_atan2+0x42>
 80077ba:	4572      	cmp	r2, lr
 80077bc:	d120      	bne.n	8007800 <__ieee754_atan2+0xd8>
 80077be:	4293      	cmp	r3, r2
 80077c0:	d111      	bne.n	80077e6 <__ieee754_atan2+0xbe>
 80077c2:	2c02      	cmp	r4, #2
 80077c4:	d007      	beq.n	80077d6 <__ieee754_atan2+0xae>
 80077c6:	2c03      	cmp	r4, #3
 80077c8:	d009      	beq.n	80077de <__ieee754_atan2+0xb6>
 80077ca:	2c01      	cmp	r4, #1
 80077cc:	d155      	bne.n	800787a <__ieee754_atan2+0x152>
 80077ce:	a136      	add	r1, pc, #216	; (adr r1, 80078a8 <__ieee754_atan2+0x180>)
 80077d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d4:	e7c9      	b.n	800776a <__ieee754_atan2+0x42>
 80077d6:	a136      	add	r1, pc, #216	; (adr r1, 80078b0 <__ieee754_atan2+0x188>)
 80077d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077dc:	e7c5      	b.n	800776a <__ieee754_atan2+0x42>
 80077de:	a136      	add	r1, pc, #216	; (adr r1, 80078b8 <__ieee754_atan2+0x190>)
 80077e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077e4:	e7c1      	b.n	800776a <__ieee754_atan2+0x42>
 80077e6:	2c02      	cmp	r4, #2
 80077e8:	d04b      	beq.n	8007882 <__ieee754_atan2+0x15a>
 80077ea:	2c03      	cmp	r4, #3
 80077ec:	d0d7      	beq.n	800779e <__ieee754_atan2+0x76>
 80077ee:	2c01      	cmp	r4, #1
 80077f0:	f04f 0000 	mov.w	r0, #0
 80077f4:	d102      	bne.n	80077fc <__ieee754_atan2+0xd4>
 80077f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80077fa:	e7b6      	b.n	800776a <__ieee754_atan2+0x42>
 80077fc:	2100      	movs	r1, #0
 80077fe:	e7b4      	b.n	800776a <__ieee754_atan2+0x42>
 8007800:	4573      	cmp	r3, lr
 8007802:	d0d3      	beq.n	80077ac <__ieee754_atan2+0x84>
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	151b      	asrs	r3, r3, #20
 8007808:	2b3c      	cmp	r3, #60	; 0x3c
 800780a:	dc1e      	bgt.n	800784a <__ieee754_atan2+0x122>
 800780c:	2f00      	cmp	r7, #0
 800780e:	da01      	bge.n	8007814 <__ieee754_atan2+0xec>
 8007810:	333c      	adds	r3, #60	; 0x3c
 8007812:	db1e      	blt.n	8007852 <__ieee754_atan2+0x12a>
 8007814:	4632      	mov	r2, r6
 8007816:	463b      	mov	r3, r7
 8007818:	f7f9 f818 	bl	800084c <__aeabi_ddiv>
 800781c:	ec41 0b10 	vmov	d0, r0, r1
 8007820:	f7ff ff1a 	bl	8007658 <fabs>
 8007824:	f7ff fd78 	bl	8007318 <atan>
 8007828:	ec51 0b10 	vmov	r0, r1, d0
 800782c:	2c01      	cmp	r4, #1
 800782e:	d013      	beq.n	8007858 <__ieee754_atan2+0x130>
 8007830:	2c02      	cmp	r4, #2
 8007832:	d015      	beq.n	8007860 <__ieee754_atan2+0x138>
 8007834:	2c00      	cmp	r4, #0
 8007836:	d098      	beq.n	800776a <__ieee754_atan2+0x42>
 8007838:	a321      	add	r3, pc, #132	; (adr r3, 80078c0 <__ieee754_atan2+0x198>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fd23 	bl	8000288 <__aeabi_dsub>
 8007842:	a321      	add	r3, pc, #132	; (adr r3, 80078c8 <__ieee754_atan2+0x1a0>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	e014      	b.n	8007874 <__ieee754_atan2+0x14c>
 800784a:	a121      	add	r1, pc, #132	; (adr r1, 80078d0 <__ieee754_atan2+0x1a8>)
 800784c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007850:	e7ec      	b.n	800782c <__ieee754_atan2+0x104>
 8007852:	2000      	movs	r0, #0
 8007854:	2100      	movs	r1, #0
 8007856:	e7e9      	b.n	800782c <__ieee754_atan2+0x104>
 8007858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800785c:	4619      	mov	r1, r3
 800785e:	e784      	b.n	800776a <__ieee754_atan2+0x42>
 8007860:	a317      	add	r3, pc, #92	; (adr r3, 80078c0 <__ieee754_atan2+0x198>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fd0f 	bl	8000288 <__aeabi_dsub>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	a116      	add	r1, pc, #88	; (adr r1, 80078c8 <__ieee754_atan2+0x1a0>)
 8007870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007874:	f7f8 fd08 	bl	8000288 <__aeabi_dsub>
 8007878:	e777      	b.n	800776a <__ieee754_atan2+0x42>
 800787a:	a117      	add	r1, pc, #92	; (adr r1, 80078d8 <__ieee754_atan2+0x1b0>)
 800787c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007880:	e773      	b.n	800776a <__ieee754_atan2+0x42>
 8007882:	a111      	add	r1, pc, #68	; (adr r1, 80078c8 <__ieee754_atan2+0x1a0>)
 8007884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007888:	e76f      	b.n	800776a <__ieee754_atan2+0x42>
 800788a:	a111      	add	r1, pc, #68	; (adr r1, 80078d0 <__ieee754_atan2+0x1a8>)
 800788c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007890:	e76b      	b.n	800776a <__ieee754_atan2+0x42>
 8007892:	bf00      	nop
 8007894:	f3af 8000 	nop.w
 8007898:	54442d18 	.word	0x54442d18
 800789c:	c00921fb 	.word	0xc00921fb
 80078a0:	54442d18 	.word	0x54442d18
 80078a4:	bff921fb 	.word	0xbff921fb
 80078a8:	54442d18 	.word	0x54442d18
 80078ac:	bfe921fb 	.word	0xbfe921fb
 80078b0:	7f3321d2 	.word	0x7f3321d2
 80078b4:	4002d97c 	.word	0x4002d97c
 80078b8:	7f3321d2 	.word	0x7f3321d2
 80078bc:	c002d97c 	.word	0xc002d97c
 80078c0:	33145c07 	.word	0x33145c07
 80078c4:	3ca1a626 	.word	0x3ca1a626
 80078c8:	54442d18 	.word	0x54442d18
 80078cc:	400921fb 	.word	0x400921fb
 80078d0:	54442d18 	.word	0x54442d18
 80078d4:	3ff921fb 	.word	0x3ff921fb
 80078d8:	54442d18 	.word	0x54442d18
 80078dc:	3fe921fb 	.word	0x3fe921fb
 80078e0:	7ff00000 	.word	0x7ff00000

080078e4 <__ieee754_sqrt>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	4955      	ldr	r1, [pc, #340]	; (8007a40 <__ieee754_sqrt+0x15c>)
 80078ea:	ec55 4b10 	vmov	r4, r5, d0
 80078ee:	43a9      	bics	r1, r5
 80078f0:	462b      	mov	r3, r5
 80078f2:	462a      	mov	r2, r5
 80078f4:	d112      	bne.n	800791c <__ieee754_sqrt+0x38>
 80078f6:	ee10 2a10 	vmov	r2, s0
 80078fa:	ee10 0a10 	vmov	r0, s0
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	f7f8 fcbe 	bl	800028c <__adddf3>
 8007910:	4604      	mov	r4, r0
 8007912:	460d      	mov	r5, r1
 8007914:	ec45 4b10 	vmov	d0, r4, r5
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791c:	2d00      	cmp	r5, #0
 800791e:	ee10 0a10 	vmov	r0, s0
 8007922:	4621      	mov	r1, r4
 8007924:	dc0f      	bgt.n	8007946 <__ieee754_sqrt+0x62>
 8007926:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800792a:	4330      	orrs	r0, r6
 800792c:	d0f2      	beq.n	8007914 <__ieee754_sqrt+0x30>
 800792e:	b155      	cbz	r5, 8007946 <__ieee754_sqrt+0x62>
 8007930:	ee10 2a10 	vmov	r2, s0
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fca6 	bl	8000288 <__aeabi_dsub>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	f7f8 ff84 	bl	800084c <__aeabi_ddiv>
 8007944:	e7e4      	b.n	8007910 <__ieee754_sqrt+0x2c>
 8007946:	151b      	asrs	r3, r3, #20
 8007948:	d073      	beq.n	8007a32 <__ieee754_sqrt+0x14e>
 800794a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800794e:	07dd      	lsls	r5, r3, #31
 8007950:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007954:	bf48      	it	mi
 8007956:	0fc8      	lsrmi	r0, r1, #31
 8007958:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800795c:	bf44      	itt	mi
 800795e:	0049      	lslmi	r1, r1, #1
 8007960:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007964:	2500      	movs	r5, #0
 8007966:	1058      	asrs	r0, r3, #1
 8007968:	0fcb      	lsrs	r3, r1, #31
 800796a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800796e:	0049      	lsls	r1, r1, #1
 8007970:	2316      	movs	r3, #22
 8007972:	462c      	mov	r4, r5
 8007974:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007978:	19a7      	adds	r7, r4, r6
 800797a:	4297      	cmp	r7, r2
 800797c:	bfde      	ittt	le
 800797e:	19bc      	addle	r4, r7, r6
 8007980:	1bd2      	suble	r2, r2, r7
 8007982:	19ad      	addle	r5, r5, r6
 8007984:	0fcf      	lsrs	r7, r1, #31
 8007986:	3b01      	subs	r3, #1
 8007988:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800798c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007990:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007994:	d1f0      	bne.n	8007978 <__ieee754_sqrt+0x94>
 8007996:	f04f 0c20 	mov.w	ip, #32
 800799a:	469e      	mov	lr, r3
 800799c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80079a0:	42a2      	cmp	r2, r4
 80079a2:	eb06 070e 	add.w	r7, r6, lr
 80079a6:	dc02      	bgt.n	80079ae <__ieee754_sqrt+0xca>
 80079a8:	d112      	bne.n	80079d0 <__ieee754_sqrt+0xec>
 80079aa:	428f      	cmp	r7, r1
 80079ac:	d810      	bhi.n	80079d0 <__ieee754_sqrt+0xec>
 80079ae:	2f00      	cmp	r7, #0
 80079b0:	eb07 0e06 	add.w	lr, r7, r6
 80079b4:	da42      	bge.n	8007a3c <__ieee754_sqrt+0x158>
 80079b6:	f1be 0f00 	cmp.w	lr, #0
 80079ba:	db3f      	blt.n	8007a3c <__ieee754_sqrt+0x158>
 80079bc:	f104 0801 	add.w	r8, r4, #1
 80079c0:	1b12      	subs	r2, r2, r4
 80079c2:	428f      	cmp	r7, r1
 80079c4:	bf88      	it	hi
 80079c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80079ca:	1bc9      	subs	r1, r1, r7
 80079cc:	4433      	add	r3, r6
 80079ce:	4644      	mov	r4, r8
 80079d0:	0052      	lsls	r2, r2, #1
 80079d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80079d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80079da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80079e2:	d1dd      	bne.n	80079a0 <__ieee754_sqrt+0xbc>
 80079e4:	430a      	orrs	r2, r1
 80079e6:	d006      	beq.n	80079f6 <__ieee754_sqrt+0x112>
 80079e8:	1c5c      	adds	r4, r3, #1
 80079ea:	bf13      	iteet	ne
 80079ec:	3301      	addne	r3, #1
 80079ee:	3501      	addeq	r5, #1
 80079f0:	4663      	moveq	r3, ip
 80079f2:	f023 0301 	bicne.w	r3, r3, #1
 80079f6:	106a      	asrs	r2, r5, #1
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	07e9      	lsls	r1, r5, #31
 80079fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007a00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007a04:	bf48      	it	mi
 8007a06:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007a0a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007a0e:	461c      	mov	r4, r3
 8007a10:	e780      	b.n	8007914 <__ieee754_sqrt+0x30>
 8007a12:	0aca      	lsrs	r2, r1, #11
 8007a14:	3815      	subs	r0, #21
 8007a16:	0549      	lsls	r1, r1, #21
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	d0fa      	beq.n	8007a12 <__ieee754_sqrt+0x12e>
 8007a1c:	02d6      	lsls	r6, r2, #11
 8007a1e:	d50a      	bpl.n	8007a36 <__ieee754_sqrt+0x152>
 8007a20:	f1c3 0420 	rsb	r4, r3, #32
 8007a24:	fa21 f404 	lsr.w	r4, r1, r4
 8007a28:	1e5d      	subs	r5, r3, #1
 8007a2a:	4099      	lsls	r1, r3
 8007a2c:	4322      	orrs	r2, r4
 8007a2e:	1b43      	subs	r3, r0, r5
 8007a30:	e78b      	b.n	800794a <__ieee754_sqrt+0x66>
 8007a32:	4618      	mov	r0, r3
 8007a34:	e7f0      	b.n	8007a18 <__ieee754_sqrt+0x134>
 8007a36:	0052      	lsls	r2, r2, #1
 8007a38:	3301      	adds	r3, #1
 8007a3a:	e7ef      	b.n	8007a1c <__ieee754_sqrt+0x138>
 8007a3c:	46a0      	mov	r8, r4
 8007a3e:	e7bf      	b.n	80079c0 <__ieee754_sqrt+0xdc>
 8007a40:	7ff00000 	.word	0x7ff00000

08007a44 <matherr>:
 8007a44:	2000      	movs	r0, #0
 8007a46:	4770      	bx	lr

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200000b4 	.word	0x200000b4

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0d      	ldr	r6, [pc, #52]	; (8007a8c <__libc_init_array+0x38>)
 8007a58:	4c0d      	ldr	r4, [pc, #52]	; (8007a90 <__libc_init_array+0x3c>)
 8007a5a:	1ba4      	subs	r4, r4, r6
 8007a5c:	10a4      	asrs	r4, r4, #2
 8007a5e:	2500      	movs	r5, #0
 8007a60:	42a5      	cmp	r5, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	4e0b      	ldr	r6, [pc, #44]	; (8007a94 <__libc_init_array+0x40>)
 8007a66:	4c0c      	ldr	r4, [pc, #48]	; (8007a98 <__libc_init_array+0x44>)
 8007a68:	f000 fc26 	bl	80082b8 <_init>
 8007a6c:	1ba4      	subs	r4, r4, r6
 8007a6e:	10a4      	asrs	r4, r4, #2
 8007a70:	2500      	movs	r5, #0
 8007a72:	42a5      	cmp	r5, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a7c:	4798      	blx	r3
 8007a7e:	3501      	adds	r5, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a86:	4798      	blx	r3
 8007a88:	3501      	adds	r5, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	080085e0 	.word	0x080085e0
 8007a90:	080085e0 	.word	0x080085e0
 8007a94:	080085e0 	.word	0x080085e0
 8007a98:	080085e4 	.word	0x080085e4

08007a9c <memset>:
 8007a9c:	4402      	add	r2, r0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d100      	bne.n	8007aa6 <memset+0xa>
 8007aa4:	4770      	bx	lr
 8007aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aaa:	e7f9      	b.n	8007aa0 <memset+0x4>

08007aac <siprintf>:
 8007aac:	b40e      	push	{r1, r2, r3}
 8007aae:	b500      	push	{lr}
 8007ab0:	b09c      	sub	sp, #112	; 0x70
 8007ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab4:	9002      	str	r0, [sp, #8]
 8007ab6:	9006      	str	r0, [sp, #24]
 8007ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007abc:	4809      	ldr	r0, [pc, #36]	; (8007ae4 <siprintf+0x38>)
 8007abe:	9107      	str	r1, [sp, #28]
 8007ac0:	9104      	str	r1, [sp, #16]
 8007ac2:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <siprintf+0x3c>)
 8007ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac8:	9105      	str	r1, [sp, #20]
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	a902      	add	r1, sp, #8
 8007ad0:	f000 f866 	bl	8007ba0 <_svfiprintf_r>
 8007ad4:	9b02      	ldr	r3, [sp, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	b01c      	add	sp, #112	; 0x70
 8007adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ae0:	b003      	add	sp, #12
 8007ae2:	4770      	bx	lr
 8007ae4:	200000b4 	.word	0x200000b4
 8007ae8:	ffff0208 	.word	0xffff0208

08007aec <__ssputs_r>:
 8007aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	688e      	ldr	r6, [r1, #8]
 8007af2:	429e      	cmp	r6, r3
 8007af4:	4682      	mov	sl, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4690      	mov	r8, r2
 8007afa:	4699      	mov	r9, r3
 8007afc:	d837      	bhi.n	8007b6e <__ssputs_r+0x82>
 8007afe:	898a      	ldrh	r2, [r1, #12]
 8007b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b04:	d031      	beq.n	8007b6a <__ssputs_r+0x7e>
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	6909      	ldr	r1, [r1, #16]
 8007b0a:	1a6f      	subs	r7, r5, r1
 8007b0c:	6965      	ldr	r5, [r4, #20]
 8007b0e:	2302      	movs	r3, #2
 8007b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b14:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b18:	f109 0301 	add.w	r3, r9, #1
 8007b1c:	443b      	add	r3, r7
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	bf38      	it	cc
 8007b22:	461d      	movcc	r5, r3
 8007b24:	0553      	lsls	r3, r2, #21
 8007b26:	d530      	bpl.n	8007b8a <__ssputs_r+0x9e>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f000 fb2b 	bl	8008184 <_malloc_r>
 8007b2e:	4606      	mov	r6, r0
 8007b30:	b950      	cbnz	r0, 8007b48 <__ssputs_r+0x5c>
 8007b32:	230c      	movs	r3, #12
 8007b34:	f8ca 3000 	str.w	r3, [sl]
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	463a      	mov	r2, r7
 8007b4a:	6921      	ldr	r1, [r4, #16]
 8007b4c:	f000 faa8 	bl	80080a0 <memcpy>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	6126      	str	r6, [r4, #16]
 8007b5e:	6165      	str	r5, [r4, #20]
 8007b60:	443e      	add	r6, r7
 8007b62:	1bed      	subs	r5, r5, r7
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	60a5      	str	r5, [r4, #8]
 8007b68:	464e      	mov	r6, r9
 8007b6a:	454e      	cmp	r6, r9
 8007b6c:	d900      	bls.n	8007b70 <__ssputs_r+0x84>
 8007b6e:	464e      	mov	r6, r9
 8007b70:	4632      	mov	r2, r6
 8007b72:	4641      	mov	r1, r8
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	f000 fa9e 	bl	80080b6 <memmove>
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	1b9b      	subs	r3, r3, r6
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	441e      	add	r6, r3
 8007b84:	6026      	str	r6, [r4, #0]
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7dc      	b.n	8007b44 <__ssputs_r+0x58>
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	f000 fb54 	bl	8008238 <_realloc_r>
 8007b90:	4606      	mov	r6, r0
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d1e2      	bne.n	8007b5c <__ssputs_r+0x70>
 8007b96:	6921      	ldr	r1, [r4, #16]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	f000 faa5 	bl	80080e8 <_free_r>
 8007b9e:	e7c8      	b.n	8007b32 <__ssputs_r+0x46>

08007ba0 <_svfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	461d      	mov	r5, r3
 8007ba6:	898b      	ldrh	r3, [r1, #12]
 8007ba8:	061f      	lsls	r7, r3, #24
 8007baa:	b09d      	sub	sp, #116	; 0x74
 8007bac:	4680      	mov	r8, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d50f      	bpl.n	8007bd4 <_svfiprintf_r+0x34>
 8007bb4:	690b      	ldr	r3, [r1, #16]
 8007bb6:	b96b      	cbnz	r3, 8007bd4 <_svfiprintf_r+0x34>
 8007bb8:	2140      	movs	r1, #64	; 0x40
 8007bba:	f000 fae3 	bl	8008184 <_malloc_r>
 8007bbe:	6020      	str	r0, [r4, #0]
 8007bc0:	6120      	str	r0, [r4, #16]
 8007bc2:	b928      	cbnz	r0, 8007bd0 <_svfiprintf_r+0x30>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	f8c8 3000 	str.w	r3, [r8]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	e0c8      	b.n	8007d62 <_svfiprintf_r+0x1c2>
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	6163      	str	r3, [r4, #20]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bde:	2330      	movs	r3, #48	; 0x30
 8007be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be4:	9503      	str	r5, [sp, #12]
 8007be6:	f04f 0b01 	mov.w	fp, #1
 8007bea:	4637      	mov	r7, r6
 8007bec:	463d      	mov	r5, r7
 8007bee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bf2:	b10b      	cbz	r3, 8007bf8 <_svfiprintf_r+0x58>
 8007bf4:	2b25      	cmp	r3, #37	; 0x25
 8007bf6:	d13e      	bne.n	8007c76 <_svfiprintf_r+0xd6>
 8007bf8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bfc:	d00b      	beq.n	8007c16 <_svfiprintf_r+0x76>
 8007bfe:	4653      	mov	r3, sl
 8007c00:	4632      	mov	r2, r6
 8007c02:	4621      	mov	r1, r4
 8007c04:	4640      	mov	r0, r8
 8007c06:	f7ff ff71 	bl	8007aec <__ssputs_r>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f000 80a4 	beq.w	8007d58 <_svfiprintf_r+0x1b8>
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	4453      	add	r3, sl
 8007c14:	9309      	str	r3, [sp, #36]	; 0x24
 8007c16:	783b      	ldrb	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 809d 	beq.w	8007d58 <_svfiprintf_r+0x1b8>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295
 8007c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9307      	str	r3, [sp, #28]
 8007c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c30:	931a      	str	r3, [sp, #104]	; 0x68
 8007c32:	462f      	mov	r7, r5
 8007c34:	2205      	movs	r2, #5
 8007c36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c3a:	4850      	ldr	r0, [pc, #320]	; (8007d7c <_svfiprintf_r+0x1dc>)
 8007c3c:	f7f8 fad0 	bl	80001e0 <memchr>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	b9d0      	cbnz	r0, 8007c7a <_svfiprintf_r+0xda>
 8007c44:	06d9      	lsls	r1, r3, #27
 8007c46:	bf44      	itt	mi
 8007c48:	2220      	movmi	r2, #32
 8007c4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c4e:	071a      	lsls	r2, r3, #28
 8007c50:	bf44      	itt	mi
 8007c52:	222b      	movmi	r2, #43	; 0x2b
 8007c54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c58:	782a      	ldrb	r2, [r5, #0]
 8007c5a:	2a2a      	cmp	r2, #42	; 0x2a
 8007c5c:	d015      	beq.n	8007c8a <_svfiprintf_r+0xea>
 8007c5e:	9a07      	ldr	r2, [sp, #28]
 8007c60:	462f      	mov	r7, r5
 8007c62:	2000      	movs	r0, #0
 8007c64:	250a      	movs	r5, #10
 8007c66:	4639      	mov	r1, r7
 8007c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c6c:	3b30      	subs	r3, #48	; 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d94d      	bls.n	8007d0e <_svfiprintf_r+0x16e>
 8007c72:	b1b8      	cbz	r0, 8007ca4 <_svfiprintf_r+0x104>
 8007c74:	e00f      	b.n	8007c96 <_svfiprintf_r+0xf6>
 8007c76:	462f      	mov	r7, r5
 8007c78:	e7b8      	b.n	8007bec <_svfiprintf_r+0x4c>
 8007c7a:	4a40      	ldr	r2, [pc, #256]	; (8007d7c <_svfiprintf_r+0x1dc>)
 8007c7c:	1a80      	subs	r0, r0, r2
 8007c7e:	fa0b f000 	lsl.w	r0, fp, r0
 8007c82:	4318      	orrs	r0, r3
 8007c84:	9004      	str	r0, [sp, #16]
 8007c86:	463d      	mov	r5, r7
 8007c88:	e7d3      	b.n	8007c32 <_svfiprintf_r+0x92>
 8007c8a:	9a03      	ldr	r2, [sp, #12]
 8007c8c:	1d11      	adds	r1, r2, #4
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	9103      	str	r1, [sp, #12]
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	db01      	blt.n	8007c9a <_svfiprintf_r+0xfa>
 8007c96:	9207      	str	r2, [sp, #28]
 8007c98:	e004      	b.n	8007ca4 <_svfiprintf_r+0x104>
 8007c9a:	4252      	negs	r2, r2
 8007c9c:	f043 0302 	orr.w	r3, r3, #2
 8007ca0:	9207      	str	r2, [sp, #28]
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	783b      	ldrb	r3, [r7, #0]
 8007ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca8:	d10c      	bne.n	8007cc4 <_svfiprintf_r+0x124>
 8007caa:	787b      	ldrb	r3, [r7, #1]
 8007cac:	2b2a      	cmp	r3, #42	; 0x2a
 8007cae:	d133      	bne.n	8007d18 <_svfiprintf_r+0x178>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	1d1a      	adds	r2, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfb8      	it	lt
 8007cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc0:	3702      	adds	r7, #2
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	4d2e      	ldr	r5, [pc, #184]	; (8007d80 <_svfiprintf_r+0x1e0>)
 8007cc6:	7839      	ldrb	r1, [r7, #0]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7f8 fa88 	bl	80001e0 <memchr>
 8007cd0:	b138      	cbz	r0, 8007ce2 <_svfiprintf_r+0x142>
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	1b40      	subs	r0, r0, r5
 8007cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	4303      	orrs	r3, r0
 8007cde:	3701      	adds	r7, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	7839      	ldrb	r1, [r7, #0]
 8007ce4:	4827      	ldr	r0, [pc, #156]	; (8007d84 <_svfiprintf_r+0x1e4>)
 8007ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cea:	2206      	movs	r2, #6
 8007cec:	1c7e      	adds	r6, r7, #1
 8007cee:	f7f8 fa77 	bl	80001e0 <memchr>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d038      	beq.n	8007d68 <_svfiprintf_r+0x1c8>
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <_svfiprintf_r+0x1e8>)
 8007cf8:	bb13      	cbnz	r3, 8007d40 <_svfiprintf_r+0x1a0>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	3308      	adds	r3, #8
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	444b      	add	r3, r9
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	e76d      	b.n	8007bea <_svfiprintf_r+0x4a>
 8007d0e:	fb05 3202 	mla	r2, r5, r2, r3
 8007d12:	2001      	movs	r0, #1
 8007d14:	460f      	mov	r7, r1
 8007d16:	e7a6      	b.n	8007c66 <_svfiprintf_r+0xc6>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	3701      	adds	r7, #1
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	250a      	movs	r5, #10
 8007d22:	4638      	mov	r0, r7
 8007d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d28:	3a30      	subs	r2, #48	; 0x30
 8007d2a:	2a09      	cmp	r2, #9
 8007d2c:	d903      	bls.n	8007d36 <_svfiprintf_r+0x196>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0c8      	beq.n	8007cc4 <_svfiprintf_r+0x124>
 8007d32:	9105      	str	r1, [sp, #20]
 8007d34:	e7c6      	b.n	8007cc4 <_svfiprintf_r+0x124>
 8007d36:	fb05 2101 	mla	r1, r5, r1, r2
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	e7f0      	b.n	8007d22 <_svfiprintf_r+0x182>
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4622      	mov	r2, r4
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <_svfiprintf_r+0x1ec>)
 8007d48:	a904      	add	r1, sp, #16
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f3af 8000 	nop.w
 8007d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d54:	4681      	mov	r9, r0
 8007d56:	d1d6      	bne.n	8007d06 <_svfiprintf_r+0x166>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	065b      	lsls	r3, r3, #25
 8007d5c:	f53f af35 	bmi.w	8007bca <_svfiprintf_r+0x2a>
 8007d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d62:	b01d      	add	sp, #116	; 0x74
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <_svfiprintf_r+0x1ec>)
 8007d70:	a904      	add	r1, sp, #16
 8007d72:	4640      	mov	r0, r8
 8007d74:	f000 f882 	bl	8007e7c <_printf_i>
 8007d78:	e7ea      	b.n	8007d50 <_svfiprintf_r+0x1b0>
 8007d7a:	bf00      	nop
 8007d7c:	080085a5 	.word	0x080085a5
 8007d80:	080085ab 	.word	0x080085ab
 8007d84:	080085af 	.word	0x080085af
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	08007aed 	.word	0x08007aed

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4691      	mov	r9, r2
 8007d96:	461f      	mov	r7, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfb8      	it	lt
 8007da4:	4613      	movlt	r3, r2
 8007da6:	f8c9 3000 	str.w	r3, [r9]
 8007daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dae:	4606      	mov	r6, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	b112      	cbz	r2, 8007dba <_printf_common+0x2a>
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c9 3000 	str.w	r3, [r9]
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	0699      	lsls	r1, r3, #26
 8007dbe:	bf42      	ittt	mi
 8007dc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007dc4:	3302      	addmi	r3, #2
 8007dc6:	f8c9 3000 	strmi.w	r3, [r9]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d107      	bne.n	8007de2 <_printf_common+0x52>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	dc28      	bgt.n	8007e34 <_printf_common+0xa4>
 8007de2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	3300      	adds	r3, #0
 8007dea:	bf18      	it	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	0692      	lsls	r2, r2, #26
 8007df0:	d42d      	bmi.n	8007e4e <_printf_common+0xbe>
 8007df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df6:	4639      	mov	r1, r7
 8007df8:	4630      	mov	r0, r6
 8007dfa:	47c0      	blx	r8
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d020      	beq.n	8007e42 <_printf_common+0xb2>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	68e5      	ldr	r5, [r4, #12]
 8007e04:	f8d9 2000 	ldr.w	r2, [r9]
 8007e08:	f003 0306 	and.w	r3, r3, #6
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	bf08      	it	eq
 8007e10:	1aad      	subeq	r5, r5, r2
 8007e12:	68a3      	ldr	r3, [r4, #8]
 8007e14:	6922      	ldr	r2, [r4, #16]
 8007e16:	bf0c      	ite	eq
 8007e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e1c:	2500      	movne	r5, #0
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	bfc4      	itt	gt
 8007e22:	1a9b      	subgt	r3, r3, r2
 8007e24:	18ed      	addgt	r5, r5, r3
 8007e26:	f04f 0900 	mov.w	r9, #0
 8007e2a:	341a      	adds	r4, #26
 8007e2c:	454d      	cmp	r5, r9
 8007e2e:	d11a      	bne.n	8007e66 <_printf_common+0xd6>
 8007e30:	2000      	movs	r0, #0
 8007e32:	e008      	b.n	8007e46 <_printf_common+0xb6>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4652      	mov	r2, sl
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	47c0      	blx	r8
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d103      	bne.n	8007e4a <_printf_common+0xba>
 8007e42:	f04f 30ff 	mov.w	r0, #4294967295
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	e7c3      	b.n	8007dd6 <_printf_common+0x46>
 8007e4e:	18e1      	adds	r1, r4, r3
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	2030      	movs	r0, #48	; 0x30
 8007e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e58:	4422      	add	r2, r4
 8007e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e62:	3302      	adds	r3, #2
 8007e64:	e7c5      	b.n	8007df2 <_printf_common+0x62>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	47c0      	blx	r8
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0e6      	beq.n	8007e42 <_printf_common+0xb2>
 8007e74:	f109 0901 	add.w	r9, r9, #1
 8007e78:	e7d8      	b.n	8007e2c <_printf_common+0x9c>
	...

08007e7c <_printf_i>:
 8007e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e84:	460c      	mov	r4, r1
 8007e86:	7e09      	ldrb	r1, [r1, #24]
 8007e88:	b085      	sub	sp, #20
 8007e8a:	296e      	cmp	r1, #110	; 0x6e
 8007e8c:	4617      	mov	r7, r2
 8007e8e:	4606      	mov	r6, r0
 8007e90:	4698      	mov	r8, r3
 8007e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e94:	f000 80b3 	beq.w	8007ffe <_printf_i+0x182>
 8007e98:	d822      	bhi.n	8007ee0 <_printf_i+0x64>
 8007e9a:	2963      	cmp	r1, #99	; 0x63
 8007e9c:	d036      	beq.n	8007f0c <_printf_i+0x90>
 8007e9e:	d80a      	bhi.n	8007eb6 <_printf_i+0x3a>
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	f000 80b9 	beq.w	8008018 <_printf_i+0x19c>
 8007ea6:	2958      	cmp	r1, #88	; 0x58
 8007ea8:	f000 8083 	beq.w	8007fb2 <_printf_i+0x136>
 8007eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007eb4:	e032      	b.n	8007f1c <_printf_i+0xa0>
 8007eb6:	2964      	cmp	r1, #100	; 0x64
 8007eb8:	d001      	beq.n	8007ebe <_printf_i+0x42>
 8007eba:	2969      	cmp	r1, #105	; 0x69
 8007ebc:	d1f6      	bne.n	8007eac <_printf_i+0x30>
 8007ebe:	6820      	ldr	r0, [r4, #0]
 8007ec0:	6813      	ldr	r3, [r2, #0]
 8007ec2:	0605      	lsls	r5, r0, #24
 8007ec4:	f103 0104 	add.w	r1, r3, #4
 8007ec8:	d52a      	bpl.n	8007f20 <_printf_i+0xa4>
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da03      	bge.n	8007eda <_printf_i+0x5e>
 8007ed2:	222d      	movs	r2, #45	; 0x2d
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eda:	486f      	ldr	r0, [pc, #444]	; (8008098 <_printf_i+0x21c>)
 8007edc:	220a      	movs	r2, #10
 8007ede:	e039      	b.n	8007f54 <_printf_i+0xd8>
 8007ee0:	2973      	cmp	r1, #115	; 0x73
 8007ee2:	f000 809d 	beq.w	8008020 <_printf_i+0x1a4>
 8007ee6:	d808      	bhi.n	8007efa <_printf_i+0x7e>
 8007ee8:	296f      	cmp	r1, #111	; 0x6f
 8007eea:	d020      	beq.n	8007f2e <_printf_i+0xb2>
 8007eec:	2970      	cmp	r1, #112	; 0x70
 8007eee:	d1dd      	bne.n	8007eac <_printf_i+0x30>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	f043 0320 	orr.w	r3, r3, #32
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	e003      	b.n	8007f02 <_printf_i+0x86>
 8007efa:	2975      	cmp	r1, #117	; 0x75
 8007efc:	d017      	beq.n	8007f2e <_printf_i+0xb2>
 8007efe:	2978      	cmp	r1, #120	; 0x78
 8007f00:	d1d4      	bne.n	8007eac <_printf_i+0x30>
 8007f02:	2378      	movs	r3, #120	; 0x78
 8007f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f08:	4864      	ldr	r0, [pc, #400]	; (800809c <_printf_i+0x220>)
 8007f0a:	e055      	b.n	8007fb8 <_printf_i+0x13c>
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	1d19      	adds	r1, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6011      	str	r1, [r2, #0]
 8007f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e08c      	b.n	800803a <_printf_i+0x1be>
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6011      	str	r1, [r2, #0]
 8007f24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f28:	bf18      	it	ne
 8007f2a:	b21b      	sxthne	r3, r3
 8007f2c:	e7cf      	b.n	8007ece <_printf_i+0x52>
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6010      	str	r0, [r2, #0]
 8007f36:	0628      	lsls	r0, r5, #24
 8007f38:	d501      	bpl.n	8007f3e <_printf_i+0xc2>
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	e002      	b.n	8007f44 <_printf_i+0xc8>
 8007f3e:	0668      	lsls	r0, r5, #25
 8007f40:	d5fb      	bpl.n	8007f3a <_printf_i+0xbe>
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	4854      	ldr	r0, [pc, #336]	; (8008098 <_printf_i+0x21c>)
 8007f46:	296f      	cmp	r1, #111	; 0x6f
 8007f48:	bf14      	ite	ne
 8007f4a:	220a      	movne	r2, #10
 8007f4c:	2208      	moveq	r2, #8
 8007f4e:	2100      	movs	r1, #0
 8007f50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f54:	6865      	ldr	r5, [r4, #4]
 8007f56:	60a5      	str	r5, [r4, #8]
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	f2c0 8095 	blt.w	8008088 <_printf_i+0x20c>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	f021 0104 	bic.w	r1, r1, #4
 8007f64:	6021      	str	r1, [r4, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d13d      	bne.n	8007fe6 <_printf_i+0x16a>
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	f040 808e 	bne.w	800808c <_printf_i+0x210>
 8007f70:	4665      	mov	r5, ip
 8007f72:	2a08      	cmp	r2, #8
 8007f74:	d10b      	bne.n	8007f8e <_printf_i+0x112>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	07db      	lsls	r3, r3, #31
 8007f7a:	d508      	bpl.n	8007f8e <_printf_i+0x112>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bfde      	ittt	le
 8007f84:	2330      	movle	r3, #48	; 0x30
 8007f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f8e:	ebac 0305 	sub.w	r3, ip, r5
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	f8cd 8000 	str.w	r8, [sp]
 8007f98:	463b      	mov	r3, r7
 8007f9a:	aa03      	add	r2, sp, #12
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff fef6 	bl	8007d90 <_printf_common>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d14d      	bne.n	8008044 <_printf_i+0x1c8>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	b005      	add	sp, #20
 8007fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	4839      	ldr	r0, [pc, #228]	; (8008098 <_printf_i+0x21c>)
 8007fb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	6821      	ldr	r1, [r4, #0]
 8007fbc:	1d1d      	adds	r5, r3, #4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6015      	str	r5, [r2, #0]
 8007fc2:	060a      	lsls	r2, r1, #24
 8007fc4:	d50b      	bpl.n	8007fde <_printf_i+0x162>
 8007fc6:	07ca      	lsls	r2, r1, #31
 8007fc8:	bf44      	itt	mi
 8007fca:	f041 0120 	orrmi.w	r1, r1, #32
 8007fce:	6021      	strmi	r1, [r4, #0]
 8007fd0:	b91b      	cbnz	r3, 8007fda <_printf_i+0x15e>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	f022 0220 	bic.w	r2, r2, #32
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	e7b7      	b.n	8007f4e <_printf_i+0xd2>
 8007fde:	064d      	lsls	r5, r1, #25
 8007fe0:	bf48      	it	mi
 8007fe2:	b29b      	uxthmi	r3, r3
 8007fe4:	e7ef      	b.n	8007fc6 <_printf_i+0x14a>
 8007fe6:	4665      	mov	r5, ip
 8007fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fec:	fb02 3311 	mls	r3, r2, r1, r3
 8007ff0:	5cc3      	ldrb	r3, [r0, r3]
 8007ff2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d1f5      	bne.n	8007fe8 <_printf_i+0x16c>
 8007ffc:	e7b9      	b.n	8007f72 <_printf_i+0xf6>
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	6825      	ldr	r5, [r4, #0]
 8008002:	6961      	ldr	r1, [r4, #20]
 8008004:	1d18      	adds	r0, r3, #4
 8008006:	6010      	str	r0, [r2, #0]
 8008008:	0628      	lsls	r0, r5, #24
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	d501      	bpl.n	8008012 <_printf_i+0x196>
 800800e:	6019      	str	r1, [r3, #0]
 8008010:	e002      	b.n	8008018 <_printf_i+0x19c>
 8008012:	066a      	lsls	r2, r5, #25
 8008014:	d5fb      	bpl.n	800800e <_printf_i+0x192>
 8008016:	8019      	strh	r1, [r3, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	4665      	mov	r5, ip
 800801e:	e7b9      	b.n	8007f94 <_printf_i+0x118>
 8008020:	6813      	ldr	r3, [r2, #0]
 8008022:	1d19      	adds	r1, r3, #4
 8008024:	6011      	str	r1, [r2, #0]
 8008026:	681d      	ldr	r5, [r3, #0]
 8008028:	6862      	ldr	r2, [r4, #4]
 800802a:	2100      	movs	r1, #0
 800802c:	4628      	mov	r0, r5
 800802e:	f7f8 f8d7 	bl	80001e0 <memchr>
 8008032:	b108      	cbz	r0, 8008038 <_printf_i+0x1bc>
 8008034:	1b40      	subs	r0, r0, r5
 8008036:	6060      	str	r0, [r4, #4]
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	2300      	movs	r3, #0
 800803e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008042:	e7a7      	b.n	8007f94 <_printf_i+0x118>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	462a      	mov	r2, r5
 8008048:	4639      	mov	r1, r7
 800804a:	4630      	mov	r0, r6
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d0aa      	beq.n	8007fa8 <_printf_i+0x12c>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	079b      	lsls	r3, r3, #30
 8008056:	d413      	bmi.n	8008080 <_printf_i+0x204>
 8008058:	68e0      	ldr	r0, [r4, #12]
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	4298      	cmp	r0, r3
 800805e:	bfb8      	it	lt
 8008060:	4618      	movlt	r0, r3
 8008062:	e7a3      	b.n	8007fac <_printf_i+0x130>
 8008064:	2301      	movs	r3, #1
 8008066:	464a      	mov	r2, r9
 8008068:	4639      	mov	r1, r7
 800806a:	4630      	mov	r0, r6
 800806c:	47c0      	blx	r8
 800806e:	3001      	adds	r0, #1
 8008070:	d09a      	beq.n	8007fa8 <_printf_i+0x12c>
 8008072:	3501      	adds	r5, #1
 8008074:	68e3      	ldr	r3, [r4, #12]
 8008076:	9a03      	ldr	r2, [sp, #12]
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	42ab      	cmp	r3, r5
 800807c:	dcf2      	bgt.n	8008064 <_printf_i+0x1e8>
 800807e:	e7eb      	b.n	8008058 <_printf_i+0x1dc>
 8008080:	2500      	movs	r5, #0
 8008082:	f104 0919 	add.w	r9, r4, #25
 8008086:	e7f5      	b.n	8008074 <_printf_i+0x1f8>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1ac      	bne.n	8007fe6 <_printf_i+0x16a>
 800808c:	7803      	ldrb	r3, [r0, #0]
 800808e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008096:	e76c      	b.n	8007f72 <_printf_i+0xf6>
 8008098:	080085b6 	.word	0x080085b6
 800809c:	080085c7 	.word	0x080085c7

080080a0 <memcpy>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	1e43      	subs	r3, r0, #1
 80080a4:	440a      	add	r2, r1
 80080a6:	4291      	cmp	r1, r2
 80080a8:	d100      	bne.n	80080ac <memcpy+0xc>
 80080aa:	bd10      	pop	{r4, pc}
 80080ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b4:	e7f7      	b.n	80080a6 <memcpy+0x6>

080080b6 <memmove>:
 80080b6:	4288      	cmp	r0, r1
 80080b8:	b510      	push	{r4, lr}
 80080ba:	eb01 0302 	add.w	r3, r1, r2
 80080be:	d807      	bhi.n	80080d0 <memmove+0x1a>
 80080c0:	1e42      	subs	r2, r0, #1
 80080c2:	4299      	cmp	r1, r3
 80080c4:	d00a      	beq.n	80080dc <memmove+0x26>
 80080c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080ce:	e7f8      	b.n	80080c2 <memmove+0xc>
 80080d0:	4283      	cmp	r3, r0
 80080d2:	d9f5      	bls.n	80080c0 <memmove+0xa>
 80080d4:	1881      	adds	r1, r0, r2
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	42d3      	cmn	r3, r2
 80080da:	d100      	bne.n	80080de <memmove+0x28>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080e6:	e7f7      	b.n	80080d8 <memmove+0x22>

080080e8 <_free_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4605      	mov	r5, r0
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d045      	beq.n	800817c <_free_r+0x94>
 80080f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f4:	1f0c      	subs	r4, r1, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfb8      	it	lt
 80080fa:	18e4      	addlt	r4, r4, r3
 80080fc:	f000 f8d2 	bl	80082a4 <__malloc_lock>
 8008100:	4a1f      	ldr	r2, [pc, #124]	; (8008180 <_free_r+0x98>)
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	4610      	mov	r0, r2
 8008106:	b933      	cbnz	r3, 8008116 <_free_r+0x2e>
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	6014      	str	r4, [r2, #0]
 800810c:	4628      	mov	r0, r5
 800810e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008112:	f000 b8c8 	b.w	80082a6 <__malloc_unlock>
 8008116:	42a3      	cmp	r3, r4
 8008118:	d90c      	bls.n	8008134 <_free_r+0x4c>
 800811a:	6821      	ldr	r1, [r4, #0]
 800811c:	1862      	adds	r2, r4, r1
 800811e:	4293      	cmp	r3, r2
 8008120:	bf04      	itt	eq
 8008122:	681a      	ldreq	r2, [r3, #0]
 8008124:	685b      	ldreq	r3, [r3, #4]
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	bf04      	itt	eq
 800812a:	1852      	addeq	r2, r2, r1
 800812c:	6022      	streq	r2, [r4, #0]
 800812e:	6004      	str	r4, [r0, #0]
 8008130:	e7ec      	b.n	800810c <_free_r+0x24>
 8008132:	4613      	mov	r3, r2
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	b10a      	cbz	r2, 800813c <_free_r+0x54>
 8008138:	42a2      	cmp	r2, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x4a>
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	1858      	adds	r0, r3, r1
 8008140:	42a0      	cmp	r0, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x74>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	4401      	add	r1, r0
 8008148:	1858      	adds	r0, r3, r1
 800814a:	4282      	cmp	r2, r0
 800814c:	6019      	str	r1, [r3, #0]
 800814e:	d1dd      	bne.n	800810c <_free_r+0x24>
 8008150:	6810      	ldr	r0, [r2, #0]
 8008152:	6852      	ldr	r2, [r2, #4]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	4401      	add	r1, r0
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	e7d7      	b.n	800810c <_free_r+0x24>
 800815c:	d902      	bls.n	8008164 <_free_r+0x7c>
 800815e:	230c      	movs	r3, #12
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	e7d3      	b.n	800810c <_free_r+0x24>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428a      	cmp	r2, r1
 800816a:	bf04      	itt	eq
 800816c:	6811      	ldreq	r1, [r2, #0]
 800816e:	6852      	ldreq	r2, [r2, #4]
 8008170:	6062      	str	r2, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1809      	addeq	r1, r1, r0
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	605c      	str	r4, [r3, #4]
 800817a:	e7c7      	b.n	800810c <_free_r+0x24>
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	200001a0 	.word	0x200001a0

08008184 <_malloc_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	1ccd      	adds	r5, r1, #3
 8008188:	f025 0503 	bic.w	r5, r5, #3
 800818c:	3508      	adds	r5, #8
 800818e:	2d0c      	cmp	r5, #12
 8008190:	bf38      	it	cc
 8008192:	250c      	movcc	r5, #12
 8008194:	2d00      	cmp	r5, #0
 8008196:	4606      	mov	r6, r0
 8008198:	db01      	blt.n	800819e <_malloc_r+0x1a>
 800819a:	42a9      	cmp	r1, r5
 800819c:	d903      	bls.n	80081a6 <_malloc_r+0x22>
 800819e:	230c      	movs	r3, #12
 80081a0:	6033      	str	r3, [r6, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	f000 f87d 	bl	80082a4 <__malloc_lock>
 80081aa:	4a21      	ldr	r2, [pc, #132]	; (8008230 <_malloc_r+0xac>)
 80081ac:	6814      	ldr	r4, [r2, #0]
 80081ae:	4621      	mov	r1, r4
 80081b0:	b991      	cbnz	r1, 80081d8 <_malloc_r+0x54>
 80081b2:	4c20      	ldr	r4, [pc, #128]	; (8008234 <_malloc_r+0xb0>)
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	b91b      	cbnz	r3, 80081c0 <_malloc_r+0x3c>
 80081b8:	4630      	mov	r0, r6
 80081ba:	f000 f863 	bl	8008284 <_sbrk_r>
 80081be:	6020      	str	r0, [r4, #0]
 80081c0:	4629      	mov	r1, r5
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 f85e 	bl	8008284 <_sbrk_r>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d124      	bne.n	8008216 <_malloc_r+0x92>
 80081cc:	230c      	movs	r3, #12
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	4630      	mov	r0, r6
 80081d2:	f000 f868 	bl	80082a6 <__malloc_unlock>
 80081d6:	e7e4      	b.n	80081a2 <_malloc_r+0x1e>
 80081d8:	680b      	ldr	r3, [r1, #0]
 80081da:	1b5b      	subs	r3, r3, r5
 80081dc:	d418      	bmi.n	8008210 <_malloc_r+0x8c>
 80081de:	2b0b      	cmp	r3, #11
 80081e0:	d90f      	bls.n	8008202 <_malloc_r+0x7e>
 80081e2:	600b      	str	r3, [r1, #0]
 80081e4:	50cd      	str	r5, [r1, r3]
 80081e6:	18cc      	adds	r4, r1, r3
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f85c 	bl	80082a6 <__malloc_unlock>
 80081ee:	f104 000b 	add.w	r0, r4, #11
 80081f2:	1d23      	adds	r3, r4, #4
 80081f4:	f020 0007 	bic.w	r0, r0, #7
 80081f8:	1ac3      	subs	r3, r0, r3
 80081fa:	d0d3      	beq.n	80081a4 <_malloc_r+0x20>
 80081fc:	425a      	negs	r2, r3
 80081fe:	50e2      	str	r2, [r4, r3]
 8008200:	e7d0      	b.n	80081a4 <_malloc_r+0x20>
 8008202:	428c      	cmp	r4, r1
 8008204:	684b      	ldr	r3, [r1, #4]
 8008206:	bf16      	itet	ne
 8008208:	6063      	strne	r3, [r4, #4]
 800820a:	6013      	streq	r3, [r2, #0]
 800820c:	460c      	movne	r4, r1
 800820e:	e7eb      	b.n	80081e8 <_malloc_r+0x64>
 8008210:	460c      	mov	r4, r1
 8008212:	6849      	ldr	r1, [r1, #4]
 8008214:	e7cc      	b.n	80081b0 <_malloc_r+0x2c>
 8008216:	1cc4      	adds	r4, r0, #3
 8008218:	f024 0403 	bic.w	r4, r4, #3
 800821c:	42a0      	cmp	r0, r4
 800821e:	d005      	beq.n	800822c <_malloc_r+0xa8>
 8008220:	1a21      	subs	r1, r4, r0
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f82e 	bl	8008284 <_sbrk_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d0cf      	beq.n	80081cc <_malloc_r+0x48>
 800822c:	6025      	str	r5, [r4, #0]
 800822e:	e7db      	b.n	80081e8 <_malloc_r+0x64>
 8008230:	200001a0 	.word	0x200001a0
 8008234:	200001a4 	.word	0x200001a4

08008238 <_realloc_r>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	4607      	mov	r7, r0
 800823c:	4614      	mov	r4, r2
 800823e:	460e      	mov	r6, r1
 8008240:	b921      	cbnz	r1, 800824c <_realloc_r+0x14>
 8008242:	4611      	mov	r1, r2
 8008244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008248:	f7ff bf9c 	b.w	8008184 <_malloc_r>
 800824c:	b922      	cbnz	r2, 8008258 <_realloc_r+0x20>
 800824e:	f7ff ff4b 	bl	80080e8 <_free_r>
 8008252:	4625      	mov	r5, r4
 8008254:	4628      	mov	r0, r5
 8008256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008258:	f000 f826 	bl	80082a8 <_malloc_usable_size_r>
 800825c:	42a0      	cmp	r0, r4
 800825e:	d20f      	bcs.n	8008280 <_realloc_r+0x48>
 8008260:	4621      	mov	r1, r4
 8008262:	4638      	mov	r0, r7
 8008264:	f7ff ff8e 	bl	8008184 <_malloc_r>
 8008268:	4605      	mov	r5, r0
 800826a:	2800      	cmp	r0, #0
 800826c:	d0f2      	beq.n	8008254 <_realloc_r+0x1c>
 800826e:	4631      	mov	r1, r6
 8008270:	4622      	mov	r2, r4
 8008272:	f7ff ff15 	bl	80080a0 <memcpy>
 8008276:	4631      	mov	r1, r6
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff ff35 	bl	80080e8 <_free_r>
 800827e:	e7e9      	b.n	8008254 <_realloc_r+0x1c>
 8008280:	4635      	mov	r5, r6
 8008282:	e7e7      	b.n	8008254 <_realloc_r+0x1c>

08008284 <_sbrk_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4c06      	ldr	r4, [pc, #24]	; (80082a0 <_sbrk_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4605      	mov	r5, r0
 800828c:	4608      	mov	r0, r1
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	f7fe ffd6 	bl	8007240 <_sbrk>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_sbrk_r+0x1a>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	b103      	cbz	r3, 800829e <_sbrk_r+0x1a>
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	20000498 	.word	0x20000498

080082a4 <__malloc_lock>:
 80082a4:	4770      	bx	lr

080082a6 <__malloc_unlock>:
 80082a6:	4770      	bx	lr

080082a8 <_malloc_usable_size_r>:
 80082a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ac:	1f18      	subs	r0, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfbc      	itt	lt
 80082b2:	580b      	ldrlt	r3, [r1, r0]
 80082b4:	18c0      	addlt	r0, r0, r3
 80082b6:	4770      	bx	lr

080082b8 <_init>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

080082c4 <_fini>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr
