
Software_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002794  08002794  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800279c  0800279c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080027a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000048  080027ec  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080027ec  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a126  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001744  00000000  00000000  0002a19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022370  00000000  00000000  0002cb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000771f  00000000  00000000  0004ef00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c77f4  00000000  00000000  0005661f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011de13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  0011de90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002760 	.word	0x08002760

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08002760 	.word	0x08002760

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 f820 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000044 	.word	0x20000044
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	200000fc 	.word	0x200000fc

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000fc 	.word	0x200000fc

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d00b      	beq.n	800086e <HAL_GPIO_Init+0x5a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d007      	beq.n	800086e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000862:	2b11      	cmp	r3, #17
 8000864:	d003      	beq.n	800086e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b12      	cmp	r3, #18
 800086c:	d130      	bne.n	80008d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a4:	2201      	movs	r2, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	091b      	lsrs	r3, r3, #4
 80008ba:	f003 0201 	and.w	r2, r3, #1
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0xfc>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d123      	bne.n	8000958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	69b9      	ldr	r1, [r7, #24]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691a      	ldr	r2, [r3, #16]
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b94:	e003      	b.n	8000b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	619a      	str	r2, [r3, #24]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e25b      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d075      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bca:	4ba3      	ldr	r3, [pc, #652]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d00c      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bd6:	4ba0      	ldr	r3, [pc, #640]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d112      	bne.n	8000c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be2:	4b9d      	ldr	r3, [pc, #628]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bee:	d10b      	bne.n	8000c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf0:	4b99      	ldr	r3, [pc, #612]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d05b      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x108>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d157      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e236      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c10:	d106      	bne.n	8000c20 <HAL_RCC_OscConfig+0x74>
 8000c12:	4b91      	ldr	r3, [pc, #580]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a90      	ldr	r2, [pc, #576]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e01d      	b.n	8000c5c <HAL_RCC_OscConfig+0xb0>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x98>
 8000c2a:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a8a      	ldr	r2, [pc, #552]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b88      	ldr	r3, [pc, #544]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a87      	ldr	r2, [pc, #540]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e00b      	b.n	8000c5c <HAL_RCC_OscConfig+0xb0>
 8000c44:	4b84      	ldr	r3, [pc, #528]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a83      	ldr	r2, [pc, #524]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a80      	ldr	r2, [pc, #512]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fc96 	bl	8000594 <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fc92 	bl	8000594 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	; 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e1fb      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4b76      	ldr	r3, [pc, #472]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f0      	beq.n	8000c6c <HAL_RCC_OscConfig+0xc0>
 8000c8a:	e014      	b.n	8000cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8c:	f7ff fc82 	bl	8000594 <HAL_GetTick>
 8000c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c94:	f7ff fc7e 	bl	8000594 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b64      	cmp	r3, #100	; 0x64
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e1e7      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	4b6c      	ldr	r3, [pc, #432]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f0      	bne.n	8000c94 <HAL_RCC_OscConfig+0xe8>
 8000cb2:	e000      	b.n	8000cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d063      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cc2:	4b65      	ldr	r3, [pc, #404]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cce:	4b62      	ldr	r3, [pc, #392]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d11c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cda:	4b5f      	ldr	r3, [pc, #380]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d116      	bne.n	8000d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <HAL_RCC_OscConfig+0x152>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e1bb      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfe:	4b56      	ldr	r3, [pc, #344]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4952      	ldr	r1, [pc, #328]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	e03a      	b.n	8000d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d020      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d1c:	4b4f      	ldr	r3, [pc, #316]	; (8000e5c <HAL_RCC_OscConfig+0x2b0>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d22:	f7ff fc37 	bl	8000594 <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fc33 	bl	8000594 <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e19c      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f0      	beq.n	8000d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4940      	ldr	r1, [pc, #256]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
 8000d5c:	e015      	b.n	8000d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_RCC_OscConfig+0x2b0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d64:	f7ff fc16 	bl	8000594 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fc12 	bl	8000594 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e17b      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d030      	beq.n	8000df8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d016      	beq.n	8000dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <HAL_RCC_OscConfig+0x2b4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000da4:	f7ff fbf6 	bl	8000594 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fbf2 	bl	8000594 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e15b      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x200>
 8000dca:	e015      	b.n	8000df8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <HAL_RCC_OscConfig+0x2b4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fbdf 	bl	8000594 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dda:	f7ff fbdb 	bl	8000594 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e144      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f0      	bne.n	8000dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80a0 	beq.w	8000f46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_RCC_OscConfig+0x2b8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d121      	bne.n	8000e86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_RCC_OscConfig+0x2b8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_RCC_OscConfig+0x2b8>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fba1 	bl	8000594 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e011      	b.n	8000e7a <HAL_RCC_OscConfig+0x2ce>
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	42470000 	.word	0x42470000
 8000e60:	42470e80 	.word	0x42470e80
 8000e64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e68:	f7ff fb94 	bl	8000594 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e0fd      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7a:	4b81      	ldr	r3, [pc, #516]	; (8001080 <HAL_RCC_OscConfig+0x4d4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d106      	bne.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
 8000e8e:	4b7d      	ldr	r3, [pc, #500]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a7c      	ldr	r2, [pc, #496]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9a:	e01c      	b.n	8000ed6 <HAL_RCC_OscConfig+0x32a>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x312>
 8000ea4:	4b77      	ldr	r3, [pc, #476]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	4a76      	ldr	r2, [pc, #472]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb0:	4b74      	ldr	r3, [pc, #464]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	4a73      	ldr	r2, [pc, #460]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebc:	e00b      	b.n	8000ed6 <HAL_RCC_OscConfig+0x32a>
 8000ebe:	4b71      	ldr	r3, [pc, #452]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	4a70      	ldr	r2, [pc, #448]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eca:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	4a6d      	ldr	r2, [pc, #436]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d015      	beq.n	8000f0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ede:	f7ff fb59 	bl	8000594 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	e00a      	b.n	8000efc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fb55 	bl	8000594 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e0bc      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	4b61      	ldr	r3, [pc, #388]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0ee      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x33a>
 8000f08:	e014      	b.n	8000f34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb43 	bl	8000594 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f12:	f7ff fb3f 	bl	8000594 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0a6      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1ee      	bne.n	8000f12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3a:	4b52      	ldr	r3, [pc, #328]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a51      	ldr	r2, [pc, #324]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8092 	beq.w	8001074 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d05c      	beq.n	8001016 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d141      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f64:	4b48      	ldr	r3, [pc, #288]	; (8001088 <HAL_RCC_OscConfig+0x4dc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb13 	bl	8000594 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fb0f 	bl	8000594 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e078      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69da      	ldr	r2, [r3, #28]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	019b      	lsls	r3, r3, #6
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	061b      	lsls	r3, r3, #24
 8000fb4:	4933      	ldr	r1, [pc, #204]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_RCC_OscConfig+0x4dc>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fae8 	bl	8000594 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fae4 	bl	8000594 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e04d      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
 8000fe6:	e045      	b.n	8001074 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_RCC_OscConfig+0x4dc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fad1 	bl	8000594 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff facd 	bl	8000594 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e036      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x44a>
 8001014:	e02e      	b.n	8001074 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e029      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_RCC_OscConfig+0x4d8>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	429a      	cmp	r2, r3
 8001034:	d11c      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001040:	429a      	cmp	r2, r3
 8001042:	d115      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800104a:	4013      	ands	r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001050:	4293      	cmp	r3, r2
 8001052:	d10d      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800105e:	429a      	cmp	r2, r3
 8001060:	d106      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40007000 	.word	0x40007000
 8001084:	40023800 	.word	0x40023800
 8001088:	42470060 	.word	0x42470060

0800108c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0cc      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d90c      	bls.n	80010c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b65      	ldr	r3, [pc, #404]	; (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b6:	4b63      	ldr	r3, [pc, #396]	; (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0b8      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e0:	4b59      	ldr	r3, [pc, #356]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f8:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001104:	4b50      	ldr	r3, [pc, #320]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	494d      	ldr	r1, [pc, #308]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d044      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d107      	bne.n	800113a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d119      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e07f      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d003      	beq.n	800114a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001146:	2b03      	cmp	r3, #3
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e06f      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e067      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4934      	ldr	r1, [pc, #208]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fa0a 	bl	8000594 <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fa06 	bl	8000594 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e04f      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d20c      	bcs.n	80011d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e032      	b.n	800123a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4916      	ldr	r1, [pc, #88]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	490e      	ldr	r1, [pc, #56]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	4313      	orrs	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001212:	f000 f821 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 8001216:	4601      	mov	r1, r0
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	fa21 f303 	lsr.w	r3, r1, r3
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f96a 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00
 8001248:	40023800 	.word	0x40023800
 800124c:	08002784 	.word	0x08002784
 8001250:	20000044 	.word	0x20000044
 8001254:	20000000 	.word	0x20000000

08001258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d007      	beq.n	800128a <HAL_RCC_GetSysClockFreq+0x32>
 800127a:	2b08      	cmp	r3, #8
 800127c:	d008      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x38>
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80b4 	bne.w	80013ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001284:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001286:	60bb      	str	r3, [r7, #8]
       break;
 8001288:	e0b3      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800128a:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800128c:	60bb      	str	r3, [r7, #8]
      break;
 800128e:	e0b0      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001290:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001298:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800129a:	4b58      	ldr	r3, [pc, #352]	; (80013fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04a      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	099b      	lsrs	r3, r3, #6
 80012ac:	f04f 0400 	mov.w	r4, #0
 80012b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	ea03 0501 	and.w	r5, r3, r1
 80012bc:	ea04 0602 	and.w	r6, r4, r2
 80012c0:	4629      	mov	r1, r5
 80012c2:	4632      	mov	r2, r6
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	f04f 0400 	mov.w	r4, #0
 80012cc:	0154      	lsls	r4, r2, #5
 80012ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012d2:	014b      	lsls	r3, r1, #5
 80012d4:	4619      	mov	r1, r3
 80012d6:	4622      	mov	r2, r4
 80012d8:	1b49      	subs	r1, r1, r5
 80012da:	eb62 0206 	sbc.w	r2, r2, r6
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	f04f 0400 	mov.w	r4, #0
 80012e6:	0194      	lsls	r4, r2, #6
 80012e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012ec:	018b      	lsls	r3, r1, #6
 80012ee:	1a5b      	subs	r3, r3, r1
 80012f0:	eb64 0402 	sbc.w	r4, r4, r2
 80012f4:	f04f 0100 	mov.w	r1, #0
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	00e2      	lsls	r2, r4, #3
 80012fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001302:	00d9      	lsls	r1, r3, #3
 8001304:	460b      	mov	r3, r1
 8001306:	4614      	mov	r4, r2
 8001308:	195b      	adds	r3, r3, r5
 800130a:	eb44 0406 	adc.w	r4, r4, r6
 800130e:	f04f 0100 	mov.w	r1, #0
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	0262      	lsls	r2, r4, #9
 8001318:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800131c:	0259      	lsls	r1, r3, #9
 800131e:	460b      	mov	r3, r1
 8001320:	4614      	mov	r4, r2
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f04f 0400 	mov.w	r4, #0
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	f7fe ff4a 	bl	80001c8 <__aeabi_uldivmod>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e049      	b.n	80013d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	f04f 0400 	mov.w	r4, #0
 8001346:	f240 11ff 	movw	r1, #511	; 0x1ff
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	ea03 0501 	and.w	r5, r3, r1
 8001352:	ea04 0602 	and.w	r6, r4, r2
 8001356:	4629      	mov	r1, r5
 8001358:	4632      	mov	r2, r6
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	f04f 0400 	mov.w	r4, #0
 8001362:	0154      	lsls	r4, r2, #5
 8001364:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001368:	014b      	lsls	r3, r1, #5
 800136a:	4619      	mov	r1, r3
 800136c:	4622      	mov	r2, r4
 800136e:	1b49      	subs	r1, r1, r5
 8001370:	eb62 0206 	sbc.w	r2, r2, r6
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	f04f 0400 	mov.w	r4, #0
 800137c:	0194      	lsls	r4, r2, #6
 800137e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001382:	018b      	lsls	r3, r1, #6
 8001384:	1a5b      	subs	r3, r3, r1
 8001386:	eb64 0402 	sbc.w	r4, r4, r2
 800138a:	f04f 0100 	mov.w	r1, #0
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	00e2      	lsls	r2, r4, #3
 8001394:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001398:	00d9      	lsls	r1, r3, #3
 800139a:	460b      	mov	r3, r1
 800139c:	4614      	mov	r4, r2
 800139e:	195b      	adds	r3, r3, r5
 80013a0:	eb44 0406 	adc.w	r4, r4, r6
 80013a4:	f04f 0100 	mov.w	r1, #0
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	02a2      	lsls	r2, r4, #10
 80013ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013b2:	0299      	lsls	r1, r3, #10
 80013b4:	460b      	mov	r3, r1
 80013b6:	4614      	mov	r4, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0400 	mov.w	r4, #0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4623      	mov	r3, r4
 80013c6:	f7fe feff 	bl	80001c8 <__aeabi_uldivmod>
 80013ca:	4603      	mov	r3, r0
 80013cc:	460c      	mov	r4, r1
 80013ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	3301      	adds	r3, #1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	60bb      	str	r3, [r7, #8]
      break;
 80013ea:	e002      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013ee:	60bb      	str	r3, [r7, #8]
      break;
 80013f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f2:	68bb      	ldr	r3, [r7, #8]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	00f42400 	.word	0x00f42400
 8001404:	007a1200 	.word	0x007a1200

08001408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e01d      	b.n	8001456 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d106      	bne.n	8001434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f001 f8ae 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3304      	adds	r3, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f000 fa26 	bl	8001898 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a1a      	ldr	r2, [r3, #32]
 800147c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <HAL_TIM_Base_Stop_IT+0x48>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a1a      	ldr	r2, [r3, #32]
 800148c:	f240 4344 	movw	r3, #1092	; 0x444
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <HAL_TIM_Base_Stop_IT+0x48>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d122      	bne.n	8001510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d11b      	bne.n	8001510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0202 	mvn.w	r2, #2
 80014e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f9af 	bl	800185a <HAL_TIM_IC_CaptureCallback>
 80014fc:	e005      	b.n	800150a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f9a1 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f9b2 	bl	800186e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b04      	cmp	r3, #4
 800151c:	d122      	bne.n	8001564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b04      	cmp	r3, #4
 800152a:	d11b      	bne.n	8001564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f06f 0204 	mvn.w	r2, #4
 8001534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2202      	movs	r2, #2
 800153a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f985 	bl	800185a <HAL_TIM_IC_CaptureCallback>
 8001550:	e005      	b.n	800155e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f977 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f988 	bl	800186e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b08      	cmp	r3, #8
 8001570:	d122      	bne.n	80015b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b08      	cmp	r3, #8
 800157e:	d11b      	bne.n	80015b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f06f 0208 	mvn.w	r2, #8
 8001588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2204      	movs	r2, #4
 800158e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f95b 	bl	800185a <HAL_TIM_IC_CaptureCallback>
 80015a4:	e005      	b.n	80015b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f94d 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f95e 	bl	800186e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d122      	bne.n	800160c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d11b      	bne.n	800160c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f06f 0210 	mvn.w	r2, #16
 80015dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2208      	movs	r2, #8
 80015e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f931 	bl	800185a <HAL_TIM_IC_CaptureCallback>
 80015f8:	e005      	b.n	8001606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f923 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f934 	bl	800186e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10e      	bne.n	8001638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b01      	cmp	r3, #1
 8001626:	d107      	bne.n	8001638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f06f 0201 	mvn.w	r2, #1
 8001630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8fd 	bl	8001832 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	2b80      	cmp	r3, #128	; 0x80
 8001644:	d10e      	bne.n	8001664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001650:	2b80      	cmp	r3, #128	; 0x80
 8001652:	d107      	bne.n	8001664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800165c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fada 	bl	8001c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	2b40      	cmp	r3, #64	; 0x40
 8001670:	d10e      	bne.n	8001690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167c:	2b40      	cmp	r3, #64	; 0x40
 800167e:	d107      	bne.n	8001690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f8f9 	bl	8001882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b20      	cmp	r3, #32
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d107      	bne.n	80016bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0220 	mvn.w	r2, #32
 80016b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 faa4 	bl	8001c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_TIM_ConfigClockSource+0x18>
 80016d8:	2302      	movs	r3, #2
 80016da:	e0a6      	b.n	800182a <HAL_TIM_ConfigClockSource+0x166>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001702:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b40      	cmp	r3, #64	; 0x40
 8001712:	d067      	beq.n	80017e4 <HAL_TIM_ConfigClockSource+0x120>
 8001714:	2b40      	cmp	r3, #64	; 0x40
 8001716:	d80b      	bhi.n	8001730 <HAL_TIM_ConfigClockSource+0x6c>
 8001718:	2b10      	cmp	r3, #16
 800171a:	d073      	beq.n	8001804 <HAL_TIM_ConfigClockSource+0x140>
 800171c:	2b10      	cmp	r3, #16
 800171e:	d802      	bhi.n	8001726 <HAL_TIM_ConfigClockSource+0x62>
 8001720:	2b00      	cmp	r3, #0
 8001722:	d06f      	beq.n	8001804 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001724:	e078      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001726:	2b20      	cmp	r3, #32
 8001728:	d06c      	beq.n	8001804 <HAL_TIM_ConfigClockSource+0x140>
 800172a:	2b30      	cmp	r3, #48	; 0x30
 800172c:	d06a      	beq.n	8001804 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800172e:	e073      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001730:	2b70      	cmp	r3, #112	; 0x70
 8001732:	d00d      	beq.n	8001750 <HAL_TIM_ConfigClockSource+0x8c>
 8001734:	2b70      	cmp	r3, #112	; 0x70
 8001736:	d804      	bhi.n	8001742 <HAL_TIM_ConfigClockSource+0x7e>
 8001738:	2b50      	cmp	r3, #80	; 0x50
 800173a:	d033      	beq.n	80017a4 <HAL_TIM_ConfigClockSource+0xe0>
 800173c:	2b60      	cmp	r3, #96	; 0x60
 800173e:	d041      	beq.n	80017c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001740:	e06a      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001746:	d066      	beq.n	8001816 <HAL_TIM_ConfigClockSource+0x152>
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174c:	d017      	beq.n	800177e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800174e:	e063      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f000 f9b4 	bl	8001acc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001772:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	609a      	str	r2, [r3, #8]
      break;
 800177c:	e04c      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f000 f99d 	bl	8001acc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017a0:	609a      	str	r2, [r3, #8]
      break;
 80017a2:	e039      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f000 f911 	bl	80019d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2150      	movs	r1, #80	; 0x50
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f96a 	bl	8001a96 <TIM_ITRx_SetConfig>
      break;
 80017c2:	e029      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	461a      	mov	r2, r3
 80017d2:	f000 f930 	bl	8001a36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2160      	movs	r1, #96	; 0x60
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f95a 	bl	8001a96 <TIM_ITRx_SetConfig>
      break;
 80017e2:	e019      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f000 f8f1 	bl	80019d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2140      	movs	r1, #64	; 0x40
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f94a 	bl	8001a96 <TIM_ITRx_SetConfig>
      break;
 8001802:	e009      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f000 f941 	bl	8001a96 <TIM_ITRx_SetConfig>
      break;
 8001814:	e000      	b.n	8001818 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <TIM_Base_SetConfig+0x114>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <TIM_Base_SetConfig+0x40>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b6:	d00f      	beq.n	80018d8 <TIM_Base_SetConfig+0x40>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <TIM_Base_SetConfig+0x118>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00b      	beq.n	80018d8 <TIM_Base_SetConfig+0x40>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <TIM_Base_SetConfig+0x11c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <TIM_Base_SetConfig+0x40>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3b      	ldr	r2, [pc, #236]	; (80019b8 <TIM_Base_SetConfig+0x120>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d003      	beq.n	80018d8 <TIM_Base_SetConfig+0x40>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3a      	ldr	r2, [pc, #232]	; (80019bc <TIM_Base_SetConfig+0x124>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d108      	bne.n	80018ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <TIM_Base_SetConfig+0x114>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d02b      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d027      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a2c      	ldr	r2, [pc, #176]	; (80019b0 <TIM_Base_SetConfig+0x118>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d023      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <TIM_Base_SetConfig+0x11c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a2a      	ldr	r2, [pc, #168]	; (80019b8 <TIM_Base_SetConfig+0x120>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01b      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a29      	ldr	r2, [pc, #164]	; (80019bc <TIM_Base_SetConfig+0x124>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d017      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <TIM_Base_SetConfig+0x128>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <TIM_Base_SetConfig+0x12c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00f      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <TIM_Base_SetConfig+0x130>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00b      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a25      	ldr	r2, [pc, #148]	; (80019cc <TIM_Base_SetConfig+0x134>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <TIM_Base_SetConfig+0x138>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d003      	beq.n	800194a <TIM_Base_SetConfig+0xb2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <TIM_Base_SetConfig+0x13c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d108      	bne.n	800195c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <TIM_Base_SetConfig+0x114>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d003      	beq.n	8001990 <TIM_Base_SetConfig+0xf8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <TIM_Base_SetConfig+0x124>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d103      	bne.n	8001998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	615a      	str	r2, [r3, #20]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40000800 	.word	0x40000800
 80019b8:	40000c00 	.word	0x40000c00
 80019bc:	40010400 	.word	0x40010400
 80019c0:	40014000 	.word	0x40014000
 80019c4:	40014400 	.word	0x40014400
 80019c8:	40014800 	.word	0x40014800
 80019cc:	40001800 	.word	0x40001800
 80019d0:	40001c00 	.word	0x40001c00
 80019d4:	40002000 	.word	0x40002000

080019d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f023 0201 	bic.w	r2, r3, #1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f023 030a 	bic.w	r3, r3, #10
 8001a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	621a      	str	r2, [r3, #32]
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b087      	sub	sp, #28
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	f023 0210 	bic.w	r2, r3, #16
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	031b      	lsls	r3, r3, #12
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	621a      	str	r2, [r3, #32]
}
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f043 0307 	orr.w	r3, r3, #7
 8001ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	021a      	lsls	r2, r3, #8
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	609a      	str	r2, [r3, #8]
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e05a      	b.n	8001bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d01d      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d018      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00e      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10c      	bne.n	8001bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40000c00 	.word	0x40000c00
 8001bf8:	40010400 	.word	0x40010400
 8001bfc:	40014000 	.word	0x40014000
 8001c00:	40001800 	.word	0x40001800

08001c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_ZN4UARTC1EP12GPIO_TypeDefmS1_m>:
}




UART::UART(GPIO_TypeDef *TxPort,uint32_t TxPinn,GPIO_TypeDef *RxPort,uint32_t RxPinn)
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
:Tx(TxPort),Rx(RxPort),TxPin(TxPinn),RxPin(RxPinn),startBit(0),stopBit(1)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	741a      	strb	r2, [r3, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	745a      	strb	r2, [r3, #17]
{
	  HAL_TIM_Base_Stop_IT(&htim2);
 8001c5e:	4856      	ldr	r0, [pc, #344]	; (8001db8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x18c>)
 8001c60:	f7ff fbfd 	bl	800145e <HAL_TIM_Base_Stop_IT>
	  if(TxPort==GPIOA || RxPort==GPIOA  )
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4a55      	ldr	r2, [pc, #340]	; (8001dbc <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x190>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x48>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x190>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10e      	bne.n	8001c92 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x66>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	e05a      	b.n	8001d48 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x11c>
	  else if(TxPort==GPIOB || RxPort==GPIOB  )
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4a4b      	ldr	r2, [pc, #300]	; (8001dc4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x198>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x76>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x198>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10e      	bne.n	8001cc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x94>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	e043      	b.n	8001d48 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x11c>
	  else if(TxPort==GPIOC || RxPort==GPIOC  )
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4a41      	ldr	r2, [pc, #260]	; (8001dc8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x19c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0xa4>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x19c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d10e      	bne.n	8001cee <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0xc2>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a39      	ldr	r2, [pc, #228]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	e02c      	b.n	8001d48 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x11c>
	  else if(TxPort==GPIOD || RxPort==GPIOD  )
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4a36      	ldr	r2, [pc, #216]	; (8001dcc <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0xd2>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10e      	bne.n	8001d1c <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0xf0>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a2e      	ldr	r2, [pc, #184]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	e015      	b.n	8001d48 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x11c>
	  else if(TxPort==GPIOE || RxPort==GPIOE  )
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x100>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d10d      	bne.n	8001d48 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x11c>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x194>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]



	  HAL_GPIO_WritePin(TxPort, TxPinn|RxPinn, GPIO_PIN_RESET);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	68b8      	ldr	r0, [r7, #8]
 8001d5a:	f7fe ff0d 	bl	8000b78 <HAL_GPIO_WritePin>

	  TxPinInit.Pin = TxPinn;
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a8>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6013      	str	r3, [r2, #0]
	  TxPinInit.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a8>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	605a      	str	r2, [r3, #4]
	  TxPinInit.Pull = GPIO_NOPULL;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
	  TxPinInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a8>)
 8001d72:	2203      	movs	r2, #3
 8001d74:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(TxPort, &TxPinInit);
 8001d76:	4917      	ldr	r1, [pc, #92]	; (8001dd4 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1a8>)
 8001d78:	68b8      	ldr	r0, [r7, #8]
 8001d7a:	f7fe fd4b 	bl	8000814 <HAL_GPIO_Init>

	  HAL_GPIO_WritePin(TxPort, TxPinn, GPIO_PIN_SET);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2201      	movs	r2, #1
 8001d84:	4619      	mov	r1, r3
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f7fe fef6 	bl	8000b78 <HAL_GPIO_WritePin>

	  RxPinInit.Pin =RxPinn;
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1ac>)
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	6013      	str	r3, [r2, #0]
	  RxPinInit.Mode = GPIO_MODE_INPUT;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1ac>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
	  RxPinInit.Pull = GPIO_NOPULL;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1ac>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
	  RxPinInit.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1ac>)
 8001da0:	2203      	movs	r2, #3
 8001da2:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(RxPort, &RxPinInit);
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <_ZN4UARTC1EP12GPIO_TypeDefmS1_m+0x1ac>)
 8001da6:	6838      	ldr	r0, [r7, #0]
 8001da8:	f7fe fd34 	bl	8000814 <HAL_GPIO_Init>



}
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200000bc 	.word	0x200000bc
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	20000064 	.word	0x20000064
 8001dd8:	20000078 	.word	0x20000078

08001ddc <_ZN4UART11setBaudRateEm>:
}



void UART::setBaudRate(uint32_t baudRate)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	uint8_t coffSelection=0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
	if(baudRate<=9600)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001df0:	d802      	bhi.n	8001df8 <_ZN4UART11setBaudRateEm+0x1c>
		coffSelection=0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e01a      	b.n	8001e2e <_ZN4UART11setBaudRateEm+0x52>
	else if(baudRate<=38400)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8001dfe:	d802      	bhi.n	8001e06 <_ZN4UART11setBaudRateEm+0x2a>
		coffSelection=1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e013      	b.n	8001e2e <_ZN4UART11setBaudRateEm+0x52>
	else if(baudRate<=57600)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8001e0c:	d802      	bhi.n	8001e14 <_ZN4UART11setBaudRateEm+0x38>
		coffSelection=2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e00c      	b.n	8001e2e <_ZN4UART11setBaudRateEm+0x52>
	else if(baudRate<=115200)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8001e1a:	d802      	bhi.n	8001e22 <_ZN4UART11setBaudRateEm+0x46>
		coffSelection=3;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e005      	b.n	8001e2e <_ZN4UART11setBaudRateEm+0x52>
	else if(baudRate<=230400)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
 8001e28:	d801      	bhi.n	8001e2e <_ZN4UART11setBaudRateEm+0x52>
		coffSelection=4;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	73fb      	strb	r3, [r7, #15]

	WriteCoefficient1=cofficients[coffSelection][0];
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <_ZN4UART11setBaudRateEm+0x138>)
 8001e32:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <_ZN4UART11setBaudRateEm+0x13c>)
 8001e38:	801a      	strh	r2, [r3, #0]
	WriteCoefficient2=cofficients[coffSelection][1];
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4a35      	ldr	r2, [pc, #212]	; (8001f14 <_ZN4UART11setBaudRateEm+0x138>)
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	885a      	ldrh	r2, [r3, #2]
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <_ZN4UART11setBaudRateEm+0x140>)
 8001e46:	801a      	strh	r2, [r3, #0]
	ReadCoefficient1 =cofficients[coffSelection][2];
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <_ZN4UART11setBaudRateEm+0x138>)
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	889a      	ldrh	r2, [r3, #4]
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <_ZN4UART11setBaudRateEm+0x144>)
 8001e54:	801a      	strh	r2, [r3, #0]
	ReadCoefficient2 =cofficients[coffSelection][3];
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <_ZN4UART11setBaudRateEm+0x138>)
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	88da      	ldrh	r2, [r3, #6]
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <_ZN4UART11setBaudRateEm+0x148>)
 8001e62:	801a      	strh	r2, [r3, #0]

	systemClockFrequency= HAL_RCC_GetSysClockFreq();
 8001e64:	f7ff f9f8 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <_ZN4UART11setBaudRateEm+0x14c>)
 8001e6c:	601a      	str	r2, [r3, #0]

    delayTime=     ( systemClockFrequency/100000000)*WriteCoefficient1 /(baudRate/9600);
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <_ZN4UART11setBaudRateEm+0x14c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <_ZN4UART11setBaudRateEm+0x150>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0e5b      	lsrs	r3, r3, #25
 8001e7a:	4a27      	ldr	r2, [pc, #156]	; (8001f18 <_ZN4UART11setBaudRateEm+0x13c>)
 8001e7c:	8812      	ldrh	r2, [r2, #0]
 8001e7e:	fb02 f203 	mul.w	r2, r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	492a      	ldr	r1, [pc, #168]	; (8001f30 <_ZN4UART11setBaudRateEm+0x154>)
 8001e86:	fba1 1303 	umull	r1, r3, r1, r3
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <_ZN4UART11setBaudRateEm+0x158>)
 8001e92:	6013      	str	r3, [r2, #0]
    delayTimeStart=( systemClockFrequency/100000000)*WriteCoefficient2 /(baudRate/9600);
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <_ZN4UART11setBaudRateEm+0x14c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <_ZN4UART11setBaudRateEm+0x150>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0e5b      	lsrs	r3, r3, #25
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <_ZN4UART11setBaudRateEm+0x140>)
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	fb02 f203 	mul.w	r2, r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4921      	ldr	r1, [pc, #132]	; (8001f30 <_ZN4UART11setBaudRateEm+0x154>)
 8001eac:	fba1 1303 	umull	r1, r3, r1, r3
 8001eb0:	0a9b      	lsrs	r3, r3, #10
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <_ZN4UART11setBaudRateEm+0x15c>)
 8001eb8:	6013      	str	r3, [r2, #0]

    ReaddelayTime     = ( systemClockFrequency/100000000)*ReadCoefficient1 /(baudRate/9600);
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <_ZN4UART11setBaudRateEm+0x14c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <_ZN4UART11setBaudRateEm+0x150>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0e5b      	lsrs	r3, r3, #25
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <_ZN4UART11setBaudRateEm+0x144>)
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	fb02 f203 	mul.w	r2, r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	4917      	ldr	r1, [pc, #92]	; (8001f30 <_ZN4UART11setBaudRateEm+0x154>)
 8001ed2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <_ZN4UART11setBaudRateEm+0x160>)
 8001ede:	6013      	str	r3, [r2, #0]
    ReaddelayTimeStart= ( systemClockFrequency/100000000)*ReadCoefficient2 /(baudRate/9600);
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_ZN4UART11setBaudRateEm+0x14c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <_ZN4UART11setBaudRateEm+0x150>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0e5b      	lsrs	r3, r3, #25
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <_ZN4UART11setBaudRateEm+0x148>)
 8001eee:	8812      	ldrh	r2, [r2, #0]
 8001ef0:	fb02 f203 	mul.w	r2, r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	490e      	ldr	r1, [pc, #56]	; (8001f30 <_ZN4UART11setBaudRateEm+0x154>)
 8001ef8:	fba1 1303 	umull	r1, r3, r1, r3
 8001efc:	0a9b      	lsrs	r3, r3, #10
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <_ZN4UART11setBaudRateEm+0x164>)
 8001f04:	6013      	str	r3, [r2, #0]
    debug=1;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <_ZN4UART11setBaudRateEm+0x168>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000038 	.word	0x20000038
 8001f1c:	2000003a 	.word	0x2000003a
 8001f20:	2000003c 	.word	0x2000003c
 8001f24:	2000003e 	.word	0x2000003e
 8001f28:	20000098 	.word	0x20000098
 8001f2c:	55e63b89 	.word	0x55e63b89
 8001f30:	1b4e81b5 	.word	0x1b4e81b5
 8001f34:	20000030 	.word	0x20000030
 8001f38:	20000090 	.word	0x20000090
 8001f3c:	20000034 	.word	0x20000034
 8001f40:	20000094 	.word	0x20000094
 8001f44:	2000009c 	.word	0x2000009c

08001f48 <_ZN4UART5delayEv>:
   }

}

void UART::delay()
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
   uint32_t delayCounter=0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
   while(delayCounter<delayTime)
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_ZN4UART5delayEv+0x2c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d203      	bcs.n	8001f66 <_ZN4UART5delayEv+0x1e>
   {
	   delayCounter++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
   while(delayCounter<delayTime)
 8001f64:	e7f6      	b.n	8001f54 <_ZN4UART5delayEv+0xc>

   }

}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000030 	.word	0x20000030

08001f78 <_ZN4UART11delay_startEv>:

void UART::delay_start()
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
   uint32_t delayCounter=0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
   while(delayCounter<delayTimeStart)
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_ZN4UART11delay_startEv+0x2c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d203      	bcs.n	8001f96 <_ZN4UART11delay_startEv+0x1e>
   {
	   delayCounter++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
   while(delayCounter<delayTimeStart)
 8001f94:	e7f6      	b.n	8001f84 <_ZN4UART11delay_startEv+0xc>

   }

}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000090 	.word	0x20000090

08001fa8 <_ZN4UART9readDelayEv>:

void UART::readDelay()
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
   uint32_t delayCounter=0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
   while(delayCounter<ReaddelayTime)
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_ZN4UART9readDelayEv+0x2c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d203      	bcs.n	8001fc6 <_ZN4UART9readDelayEv+0x1e>
   {
	   delayCounter++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
   while(delayCounter<ReaddelayTime)
 8001fc4:	e7f6      	b.n	8001fb4 <_ZN4UART9readDelayEv+0xc>

   }

}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000034 	.word	0x20000034

08001fd8 <_ZN4UART16firstSampleDelayEv>:

}


void UART::firstSampleDelay()
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
   uint32_t delayCounter=0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
   uint32_t delayTimeFirst=ReaddelayTimeStart/2;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <_ZN4UART16firstSampleDelayEv+0x30>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]

   while(delayCounter<delayTimeFirst)
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d203      	bcs.n	8001ffc <_ZN4UART16firstSampleDelayEv+0x24>
   {
	   delayCounter++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
   while(delayCounter<delayTimeFirst)
 8001ffa:	e7f7      	b.n	8001fec <_ZN4UART16firstSampleDelayEv+0x14>

   }

}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000094 	.word	0x20000094

0800200c <_ZN4UART4IDLEEv>:
void UART::IDLE()
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    Tx->BSRR = TxPin  ;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6892      	ldr	r2, [r2, #8]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_ZN4UART14startConditionEv>:

void UART::startCondition()
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	Tx->BSRR = (uint32_t)TxPin << 16U ;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0412      	lsls	r2, r2, #16
 800203c:	619a      	str	r2, [r3, #24]
	delay_start();
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff9a 	bl	8001f78 <_ZN4UART11delay_startEv>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZN4UART13stopConditionEv>:

void UART::stopCondition()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    Tx->BSRR = TxPin  ;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	619a      	str	r2, [r3, #24]
    delay();
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff72 	bl	8001f48 <_ZN4UART5delayEv>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZN4UART8sendDataEh>:

void UART::sendData(uint8_t value)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
     for(int i=0;i<8;i++)
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b07      	cmp	r3, #7
 8002080:	dc1a      	bgt.n	80020b8 <_ZN4UART8sendDataEh+0x4c>
     {
    	 if( (value>>i) & 0x01  )
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	fa42 f303 	asr.w	r3, r2, r3
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <_ZN4UART8sendDataEh+0x32>
    		 Tx->BSRR = TxPin  ;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6892      	ldr	r2, [r2, #8]
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	e005      	b.n	80020aa <_ZN4UART8sendDataEh+0x3e>
    	 else
    		 Tx->BSRR = (uint32_t)TxPin << 16U ;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0412      	lsls	r2, r2, #16
 80020a8:	619a      	str	r2, [r3, #24]

    	 delay();
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff4c 	bl	8001f48 <_ZN4UART5delayEv>
     for(int i=0;i<8;i++)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e7e1      	b.n	800207c <_ZN4UART8sendDataEh+0x10>



     }
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_ZN4UART13Uart_TransmitEPhm>:

void UART::Uart_Transmit(uint8_t *sendArray,uint32_t dataSize)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	for(int i=0;i<dataSize;i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d911      	bls.n	80020fc <_ZN4UART13Uart_TransmitEPhm+0x3c>
	{
		startCondition();
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff ffa6 	bl	800202a <_ZN4UART14startConditionEv>
		sendData(sendArray[i]);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4619      	mov	r1, r3
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff ffbf 	bl	800206c <_ZN4UART8sendDataEh>
		stopCondition();
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff ffac 	bl	800204c <_ZN4UART13stopConditionEv>
	for(int i=0;i<dataSize;i++)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e7e9      	b.n	80020d0 <_ZN4UART13Uart_TransmitEPhm+0x10>

	}
	IDLE();
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff ff85 	bl	800200c <_ZN4UART4IDLEEv>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_ZN4UART11receiveByteEv>:

uint8_t UART::receiveByte()
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
	 uint8_t data=0;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
	 delay();
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff16 	bl	8001f48 <_ZN4UART5delayEv>
     for(int i=0;i<8;i++)
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b07      	cmp	r3, #7
 8002124:	dc1d      	bgt.n	8002162 <_ZN4UART11receiveByteEv+0x58>
     {
    	 data |= (HAL_GPIO_ReadPin(Rx, RxPin)<<7);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f7fe fd08 	bl	8000b48 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	01db      	lsls	r3, r3, #7
 800213c:	b25a      	sxtb	r2, r3
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4313      	orrs	r3, r2
 8002144:	b25b      	sxtb	r3, r3
 8002146:	73fb      	strb	r3, [r7, #15]

    	 if(i!=7)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b07      	cmp	r3, #7
 800214c:	d005      	beq.n	800215a <_ZN4UART11receiveByteEv+0x50>
    	 {	 data=data>>1; readDelay();}
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	105b      	asrs	r3, r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff27 	bl	8001fa8 <_ZN4UART9readDelayEv>
     for(int i=0;i<8;i++)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	e7de      	b.n	8002120 <_ZN4UART11receiveByteEv+0x16>
     }




     return data;
 8002162:	7bfb      	ldrb	r3, [r7, #15]

}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZN4UART12Uart_ReceiveEPhht>:
void UART::Uart_Receive(uint8_t *receiveArray,uint8_t receiveSize,uint16_t timeOut)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	460b      	mov	r3, r1
 800217c:	71fb      	strb	r3, [r7, #7]
 800217e:	4613      	mov	r3, r2
 8002180:	80bb      	strh	r3, [r7, #4]
	 miliseconds=0;
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <_ZN4UART12Uart_ReceiveEPhht+0x140>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
	 uint8_t state=0;
 8002188:	2300      	movs	r3, #0
 800218a:	75fb      	strb	r3, [r7, #23]
	 uint8_t count=0;
 800218c:	2300      	movs	r3, #0
 800218e:	75bb      	strb	r3, [r7, #22]
	 bool startCame=0;
 8002190:	2300      	movs	r3, #0
 8002192:	753b      	strb	r3, [r7, #20]
	 bool findStartCondition=0;
 8002194:	2300      	movs	r3, #0
 8002196:	757b      	strb	r3, [r7, #21]

	 while(miliseconds<timeOut)
 8002198:	88ba      	ldrh	r2, [r7, #4]
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <_ZN4UART12Uart_ReceiveEPhht+0x140>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d97c      	bls.n	800229c <_ZN4UART12Uart_ReceiveEPhht+0x130>
	 {
		 if( (Rx->IDR & RxPin) && state == IDLEState  )
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <_ZN4UART12Uart_ReceiveEPhht+0x50>
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <_ZN4UART12Uart_ReceiveEPhht+0x50>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <_ZN4UART12Uart_ReceiveEPhht+0x52>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <_ZN4UART12Uart_ReceiveEPhht+0x5c>
			 state=IDLEState;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e007      	b.n	80021d8 <_ZN4UART12Uart_ReceiveEPhht+0x6c>
		 else if( !findStartCondition )
 80021c8:	7d7b      	ldrb	r3, [r7, #21]
 80021ca:	f083 0301 	eor.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <_ZN4UART12Uart_ReceiveEPhht+0x6c>
		 {
			 state=startConditionState;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]

		 }

		 switch(state)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d024      	beq.n	8002228 <_ZN4UART12Uart_ReceiveEPhht+0xbc>
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d037      	beq.n	8002252 <_ZN4UART12Uart_ReceiveEPhht+0xe6>
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d159      	bne.n	800229a <_ZN4UART12Uart_ReceiveEPhht+0x12e>
		 {
		 	 case startConditionState:
		 		 firstSampleDelay();
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff fef6 	bl	8001fd8 <_ZN4UART16firstSampleDelayEv>
		 		 if(HAL_GPIO_ReadPin(Rx, RxPin) == startBit)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7fe fca5 	bl	8000b48 <HAL_GPIO_ReadPin>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	7c1b      	ldrb	r3, [r3, #16]
 8002206:	429a      	cmp	r2, r3
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <_ZN4UART12Uart_ReceiveEPhht+0xb6>
		 		 { state=receiveData; findStartCondition=1; startCame=1;}
 8002214:	2302      	movs	r3, #2
 8002216:	75fb      	strb	r3, [r7, #23]
 8002218:	2301      	movs	r3, #1
 800221a:	757b      	strb	r3, [r7, #21]
 800221c:	2301      	movs	r3, #1
 800221e:	753b      	strb	r3, [r7, #20]
		 		 else
		 			 state=IDLEState;

		 		 break;
 8002220:	e03b      	b.n	800229a <_ZN4UART12Uart_ReceiveEPhht+0x12e>
		 			 state=IDLEState;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
		 		 break;
 8002226:	e038      	b.n	800229a <_ZN4UART12Uart_ReceiveEPhht+0x12e>

		 	 case receiveData:
		 		receiveArray[count++]=receiveByte();
 8002228:	7dbb      	ldrb	r3, [r7, #22]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	75ba      	strb	r2, [r7, #22]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	189c      	adds	r4, r3, r2
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff ff68 	bl	800210a <_ZN4UART11receiveByteEv>
 800223a:	4603      	mov	r3, r0
 800223c:	7023      	strb	r3, [r4, #0]
		 		if(count >=receiveSize)
 800223e:	7dba      	ldrb	r2, [r7, #22]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <_ZN4UART12Uart_ReceiveEPhht+0xe0>
		 			miliseconds=timeOut;
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <_ZN4UART12Uart_ReceiveEPhht+0x140>)
 800224a:	6013      	str	r3, [r2, #0]
		 		state=stopConditionState;
 800224c:	2303      	movs	r3, #3
 800224e:	75fb      	strb	r3, [r7, #23]
		 		break;
 8002250:	e023      	b.n	800229a <_ZN4UART12Uart_ReceiveEPhht+0x12e>

		 	 case stopConditionState:
		 		 delay();
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff fe78 	bl	8001f48 <_ZN4UART5delayEv>
		 		 if(! (HAL_GPIO_ReadPin(Rx, RxPin) == stopBit) )
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f7fe fc6f 	bl	8000b48 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	7c5b      	ldrb	r3, [r3, #17]
 8002272:	429a      	cmp	r2, r3
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <_ZN4UART12Uart_ReceiveEPhht+0x120>
		 			receiveArray[count-1] = 0;
 8002280:	7dbb      	ldrb	r3, [r7, #22]
 8002282:	3b01      	subs	r3, #1
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4413      	add	r3, r2
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
		 		 state=IDLEState;
 800228c:	2300      	movs	r3, #0
 800228e:	75fb      	strb	r3, [r7, #23]
		 		 startCame = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	753b      	strb	r3, [r7, #20]
		 	     findStartCondition=0;
 8002294:	2300      	movs	r3, #0
 8002296:	757b      	strb	r3, [r7, #21]
		 		 break;
 8002298:	bf00      	nop
	 while(miliseconds<timeOut)
 800229a:	e77d      	b.n	8002198 <_ZN4UART12Uart_ReceiveEPhht+0x2c>

		 }

	 }
	 debug=1;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <_ZN4UART12Uart_ReceiveEPhht+0x144>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]



}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200000a4 	.word	0x200000a4
 80022b0:	2000009c 	.word	0x2000009c

080022b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ba:	f7fe f905 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022be:	f000 f84f 	bl	8002360 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c2:	f000 f91b 	bl	80024fc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80022c6:	f000 f8bf 	bl	8002448 <_ZL12MX_TIM2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART myUart(GPIOC, GPIO_PIN_6,GPIOC, GPIO_PIN_7);
 80022ca:	4638      	mov	r0, r7
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <main+0x9c>)
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	491e      	ldr	r1, [pc, #120]	; (8002350 <main+0x9c>)
 80022d6:	f7ff fca9 	bl	8001c2c <_ZN4UARTC1EP12GPIO_TypeDefmS1_m>
  myUart.setBaudRate(230400);
 80022da:	463b      	mov	r3, r7
 80022dc:	f44f 3161 	mov.w	r1, #230400	; 0x38400
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fd7b 	bl	8001ddc <_ZN4UART11setBaudRateEm>
  for(int i=0;i<10;i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	dc0c      	bgt.n	800230a <main+0x56>
    sendDatas[i]=241+i;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3b0f      	subs	r3, #15
 80022f6:	b2d9      	uxtb	r1, r3
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <main+0xa0>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4413      	add	r3, r2
 80022fe:	460a      	mov	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<10;i++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e7ef      	b.n	80022ea <main+0x36>
  sprintf(sendDatas,"TalhaSevinc");
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <main+0xa0>)
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <main+0xa4>)
 800230e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  sendUart=1;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <main+0xa8>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sendUart)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <main+0xa8>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <main+0x82>
	  {
		  myUart.Uart_Transmit((uint8_t *)sendDatas,10);
 8002322:	463b      	mov	r3, r7
 8002324:	220a      	movs	r2, #10
 8002326:	490b      	ldr	r1, [pc, #44]	; (8002354 <main+0xa0>)
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fec9 	bl	80020c0 <_ZN4UART13Uart_TransmitEPhm>
		  HAL_Delay(5);
 800232e:	2005      	movs	r0, #5
 8002330:	f7fe f93c 	bl	80005ac <HAL_Delay>
 8002334:	e7f1      	b.n	800231a <main+0x66>
	  }
	  else
	  {
		  myUart.Uart_Receive((uint8_t *)sendDatas,20,1000);
 8002336:	4638      	mov	r0, r7
 8002338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233c:	2214      	movs	r2, #20
 800233e:	4905      	ldr	r1, [pc, #20]	; (8002354 <main+0xa0>)
 8002340:	f7ff ff14 	bl	800216c <_ZN4UART12Uart_ReceiveEPhht>
	  	  memset(sendDatas,'\0',20);
 8002344:	2214      	movs	r2, #20
 8002346:	2100      	movs	r1, #0
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <main+0xa0>)
 800234a:	f000 fa01 	bl	8002750 <memset>
	  if(sendUart)
 800234e:	e7e4      	b.n	800231a <main+0x66>
 8002350:	40020800 	.word	0x40020800
 8002354:	200000a8 	.word	0x200000a8
 8002358:	08002778 	.word	0x08002778
 800235c:	20000040 	.word	0x20000040

08002360 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b094      	sub	sp, #80	; 0x50
 8002364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002366:	f107 0320 	add.w	r3, r7, #32
 800236a:	2230      	movs	r2, #48	; 0x30
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f9ee 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <_Z18SystemClock_Configv+0xe0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a2c      	ldr	r2, [pc, #176]	; (8002440 <_Z18SystemClock_Configv+0xe0>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <_Z18SystemClock_Configv+0xe0>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <_Z18SystemClock_Configv+0xe4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <_Z18SystemClock_Configv+0xe4>)
 80023aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <_Z18SystemClock_Configv+0xe4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023bc:	2301      	movs	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c6:	2302      	movs	r3, #2
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023d0:	2304      	movs	r3, #4
 80023d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80023d4:	2364      	movs	r3, #100	; 0x64
 80023d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d8:	2302      	movs	r3, #2
 80023da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023dc:	2304      	movs	r3, #4
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fbe1 	bl	8000bac <HAL_RCC_OscConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80023fa:	f000 f899 	bl	8002530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fe:	230f      	movs	r3, #15
 8002400:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002402:	2302      	movs	r3, #2
 8002404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800240a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800240e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002414:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	2103      	movs	r1, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fe35 	bl	800108c <HAL_RCC_ClockConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002432:	f000 f87d 	bl	8002530 <Error_Handler>
  }
}
 8002436:	bf00      	nop
 8002438:	3750      	adds	r7, #80	; 0x50
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40007000 	.word	0x40007000

08002448 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	463b      	mov	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002464:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 8002466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 800246e:	220a      	movs	r2, #10
 8002470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 800247a:	220a      	movs	r2, #10
 800247c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800248a:	481b      	ldr	r0, [pc, #108]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 800248c:	f7fe ffbc 	bl	8001408 <HAL_TIM_Base_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 80024a0:	f000 f846 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024aa:	f107 0308 	add.w	r3, r7, #8
 80024ae:	4619      	mov	r1, r3
 80024b0:	4811      	ldr	r0, [pc, #68]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 80024b2:	f7ff f907 	bl	80016c4 <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 80024c6:	f000 f833 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d2:	463b      	mov	r3, r7
 80024d4:	4619      	mov	r1, r3
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb0>)
 80024d8:	f7ff fb18 	bl	8001b0c <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 80024ec:	f000 f820 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200000bc 	.word	0x200000bc

080024fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <_ZL12MX_GPIO_Initv+0x30>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <_ZL12MX_GPIO_Initv+0x30>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <_ZL12MX_GPIO_Initv+0x30>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]

}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_MspInit+0x4c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_MspInit+0x4c>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_MspInit+0x4c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d115      	bne.n	80025ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_TIM_Base_MspInit+0x48>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <HAL_TIM_Base_MspInit+0x48>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_TIM_Base_MspInit+0x48>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	201c      	movs	r0, #28
 80025c4:	f7fe f8ef 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025c8:	201c      	movs	r0, #28
 80025ca:	f7fe f908 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <MemManage_Handler+0x4>

080025f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <UsageFault_Handler+0x4>

08002602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	miliseconds++;
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <SysTick_Handler+0x34>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <SysTick_Handler+0x34>)
 8002638:	6013      	str	r3, [r2, #0]
  if(miliseconds>10999)
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <SysTick_Handler+0x34>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8002642:	4293      	cmp	r3, r2
 8002644:	d907      	bls.n	8002656 <SysTick_Handler+0x2a>
  {
	  seconds+=11;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <SysTick_Handler+0x38>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330b      	adds	r3, #11
 800264c:	4a05      	ldr	r2, [pc, #20]	; (8002664 <SysTick_Handler+0x38>)
 800264e:	6013      	str	r3, [r2, #0]
	  miliseconds=0;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <SysTick_Handler+0x34>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002656:	f7fd ff89 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200000a4 	.word	0x200000a4
 8002664:	200000a0 	.word	0x200000a0

08002668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  time++;
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <TIM2_IRQHandler+0x18>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a03      	ldr	r2, [pc, #12]	; (8002680 <TIM2_IRQHandler+0x18>)
 8002674:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <TIM2_IRQHandler+0x1c>)
 8002678:	f7fe ff1c 	bl	80014b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000008c 	.word	0x2000008c
 8002684:	200000bc 	.word	0x200000bc

08002688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <SystemInit+0x28>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <SystemInit+0x28>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SystemInit+0x28>)
 800269e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a2:	609a      	str	r2, [r3, #8]
#endif
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
  ldr  r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026de:	f7ff ffd3 	bl	8002688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f000 f811 	bl	8002708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7ff fde5 	bl	80022b4 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026f0:	080027a4 	.word	0x080027a4
  ldr  r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026f8:	20000048 	.word	0x20000048
  ldr  r2, =_sbss
 80026fc:	20000048 	.word	0x20000048
  ldr  r3, = _ebss
 8002700:	20000100 	.word	0x20000100

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <__libc_init_array>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	4e0d      	ldr	r6, [pc, #52]	; (8002740 <__libc_init_array+0x38>)
 800270c:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <__libc_init_array+0x3c>)
 800270e:	1ba4      	subs	r4, r4, r6
 8002710:	10a4      	asrs	r4, r4, #2
 8002712:	2500      	movs	r5, #0
 8002714:	42a5      	cmp	r5, r4
 8002716:	d109      	bne.n	800272c <__libc_init_array+0x24>
 8002718:	4e0b      	ldr	r6, [pc, #44]	; (8002748 <__libc_init_array+0x40>)
 800271a:	4c0c      	ldr	r4, [pc, #48]	; (800274c <__libc_init_array+0x44>)
 800271c:	f000 f820 	bl	8002760 <_init>
 8002720:	1ba4      	subs	r4, r4, r6
 8002722:	10a4      	asrs	r4, r4, #2
 8002724:	2500      	movs	r5, #0
 8002726:	42a5      	cmp	r5, r4
 8002728:	d105      	bne.n	8002736 <__libc_init_array+0x2e>
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002730:	4798      	blx	r3
 8002732:	3501      	adds	r5, #1
 8002734:	e7ee      	b.n	8002714 <__libc_init_array+0xc>
 8002736:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800273a:	4798      	blx	r3
 800273c:	3501      	adds	r5, #1
 800273e:	e7f2      	b.n	8002726 <__libc_init_array+0x1e>
 8002740:	0800279c 	.word	0x0800279c
 8002744:	0800279c 	.word	0x0800279c
 8002748:	0800279c 	.word	0x0800279c
 800274c:	080027a0 	.word	0x080027a0

08002750 <memset>:
 8002750:	4402      	add	r2, r0
 8002752:	4603      	mov	r3, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
