
AdafruitUltimateGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003900  08003900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000010  08003914  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08003914  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000741f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e5  00000000  00000000  0002745b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  00028a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00029138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f385  00000000  00000000  00029778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006700  00000000  00000000  00048afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdb5e  00000000  00000000  0004f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cd5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c3c  00000000  00000000  0010cdd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038c0 	.word	0x080038c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080038c0 	.word	0x080038c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b972 	b.w	80008dc <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	4688      	mov	r8, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14b      	bne.n	80006b6 <__udivmoddi4+0xa6>
 800061e:	428a      	cmp	r2, r1
 8000620:	4615      	mov	r5, r2
 8000622:	d967      	bls.n	80006f4 <__udivmoddi4+0xe4>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b14a      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062a:	f1c2 0720 	rsb	r7, r2, #32
 800062e:	fa01 f302 	lsl.w	r3, r1, r2
 8000632:	fa20 f707 	lsr.w	r7, r0, r7
 8000636:	4095      	lsls	r5, r2
 8000638:	ea47 0803 	orr.w	r8, r7, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbb8 f7fe 	udiv	r7, r8, lr
 8000648:	fa1f fc85 	uxth.w	ip, r5
 800064c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000654:	fb07 f10c 	mul.w	r1, r7, ip
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18eb      	adds	r3, r5, r3
 800065e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000662:	f080 811b 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8118 	bls.w	800089c <__udivmoddi4+0x28c>
 800066c:	3f02      	subs	r7, #2
 800066e:	442b      	add	r3, r5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0fe 	udiv	r0, r3, lr
 8000678:	fb0e 3310 	mls	r3, lr, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fc0c 	mul.w	ip, r0, ip
 8000684:	45a4      	cmp	ip, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	192c      	adds	r4, r5, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8107 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000692:	45a4      	cmp	ip, r4
 8000694:	f240 8104 	bls.w	80008a0 <__udivmoddi4+0x290>
 8000698:	3802      	subs	r0, #2
 800069a:	442c      	add	r4, r5
 800069c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a0:	eba4 040c 	sub.w	r4, r4, ip
 80006a4:	2700      	movs	r7, #0
 80006a6:	b11e      	cbz	r6, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c6 4300 	strd	r4, r3, [r6]
 80006b0:	4639      	mov	r1, r7
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xbe>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80eb 	beq.w	8000896 <__udivmoddi4+0x286>
 80006c0:	2700      	movs	r7, #0
 80006c2:	e9c6 0100 	strd	r0, r1, [r6]
 80006c6:	4638      	mov	r0, r7
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f783 	clz	r7, r3
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d147      	bne.n	8000766 <__udivmoddi4+0x156>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd0>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80fa 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4698      	mov	r8, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa0>
 80006ee:	e9c6 4800 	strd	r4, r8, [r6]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa0>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xe8>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 808f 	bne.w	8000820 <__udivmoddi4+0x210>
 8000702:	1b49      	subs	r1, r1, r5
 8000704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000708:	fa1f f885 	uxth.w	r8, r5
 800070c:	2701      	movs	r7, #1
 800070e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fb0e 111c 	mls	r1, lr, ip, r1
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb08 f10c 	mul.w	r1, r8, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x124>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4299      	cmp	r1, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 8000732:	4684      	mov	ip, r0
 8000734:	1a59      	subs	r1, r3, r1
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x14c>
 800074c:	192c      	adds	r4, r5, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x14a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80b6 	bhi.w	80008c6 <__udivmoddi4+0x2b6>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e79f      	b.n	80006a6 <__udivmoddi4+0x96>
 8000766:	f1c7 0c20 	rsb	ip, r7, #32
 800076a:	40bb      	lsls	r3, r7
 800076c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000770:	ea4e 0e03 	orr.w	lr, lr, r3
 8000774:	fa01 f407 	lsl.w	r4, r1, r7
 8000778:	fa20 f50c 	lsr.w	r5, r0, ip
 800077c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000780:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000784:	4325      	orrs	r5, r4
 8000786:	fbb3 f9f8 	udiv	r9, r3, r8
 800078a:	0c2c      	lsrs	r4, r5, #16
 800078c:	fb08 3319 	mls	r3, r8, r9, r3
 8000790:	fa1f fa8e 	uxth.w	sl, lr
 8000794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000798:	fb09 f40a 	mul.w	r4, r9, sl
 800079c:	429c      	cmp	r4, r3
 800079e:	fa02 f207 	lsl.w	r2, r2, r7
 80007a2:	fa00 f107 	lsl.w	r1, r0, r7
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b0:	f080 8087 	bcs.w	80008c2 <__udivmoddi4+0x2b2>
 80007b4:	429c      	cmp	r4, r3
 80007b6:	f240 8084 	bls.w	80008c2 <__udivmoddi4+0x2b2>
 80007ba:	f1a9 0902 	sub.w	r9, r9, #2
 80007be:	4473      	add	r3, lr
 80007c0:	1b1b      	subs	r3, r3, r4
 80007c2:	b2ad      	uxth	r5, r5
 80007c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c8:	fb08 3310 	mls	r3, r8, r0, r3
 80007cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007d4:	45a2      	cmp	sl, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1e 0404 	adds.w	r4, lr, r4
 80007dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e0:	d26b      	bcs.n	80008ba <__udivmoddi4+0x2aa>
 80007e2:	45a2      	cmp	sl, r4
 80007e4:	d969      	bls.n	80008ba <__udivmoddi4+0x2aa>
 80007e6:	3802      	subs	r0, #2
 80007e8:	4474      	add	r4, lr
 80007ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ee:	fba0 8902 	umull	r8, r9, r0, r2
 80007f2:	eba4 040a 	sub.w	r4, r4, sl
 80007f6:	454c      	cmp	r4, r9
 80007f8:	46c2      	mov	sl, r8
 80007fa:	464b      	mov	r3, r9
 80007fc:	d354      	bcc.n	80008a8 <__udivmoddi4+0x298>
 80007fe:	d051      	beq.n	80008a4 <__udivmoddi4+0x294>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d069      	beq.n	80008d8 <__udivmoddi4+0x2c8>
 8000804:	ebb1 050a 	subs.w	r5, r1, sl
 8000808:	eb64 0403 	sbc.w	r4, r4, r3
 800080c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000810:	40fd      	lsrs	r5, r7
 8000812:	40fc      	lsrs	r4, r7
 8000814:	ea4c 0505 	orr.w	r5, ip, r5
 8000818:	e9c6 5400 	strd	r5, r4, [r6]
 800081c:	2700      	movs	r7, #0
 800081e:	e747      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000820:	f1c2 0320 	rsb	r3, r2, #32
 8000824:	fa20 f703 	lsr.w	r7, r0, r3
 8000828:	4095      	lsls	r5, r2
 800082a:	fa01 f002 	lsl.w	r0, r1, r2
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000836:	4338      	orrs	r0, r7
 8000838:	0c01      	lsrs	r1, r0, #16
 800083a:	fbb3 f7fe 	udiv	r7, r3, lr
 800083e:	fa1f f885 	uxth.w	r8, r5
 8000842:	fb0e 3317 	mls	r3, lr, r7, r3
 8000846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084a:	fb07 f308 	mul.w	r3, r7, r8
 800084e:	428b      	cmp	r3, r1
 8000850:	fa04 f402 	lsl.w	r4, r4, r2
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x256>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f107 3cff 	add.w	ip, r7, #4294967295
 800085c:	d22f      	bcs.n	80008be <__udivmoddi4+0x2ae>
 800085e:	428b      	cmp	r3, r1
 8000860:	d92d      	bls.n	80008be <__udivmoddi4+0x2ae>
 8000862:	3f02      	subs	r7, #2
 8000864:	4429      	add	r1, r5
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	b281      	uxth	r1, r0
 800086a:	fbb3 f0fe 	udiv	r0, r3, lr
 800086e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000876:	fb00 f308 	mul.w	r3, r0, r8
 800087a:	428b      	cmp	r3, r1
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x27e>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f100 3cff 	add.w	ip, r0, #4294967295
 8000884:	d217      	bcs.n	80008b6 <__udivmoddi4+0x2a6>
 8000886:	428b      	cmp	r3, r1
 8000888:	d915      	bls.n	80008b6 <__udivmoddi4+0x2a6>
 800088a:	3802      	subs	r0, #2
 800088c:	4429      	add	r1, r5
 800088e:	1ac9      	subs	r1, r1, r3
 8000890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000894:	e73b      	b.n	800070e <__udivmoddi4+0xfe>
 8000896:	4637      	mov	r7, r6
 8000898:	4630      	mov	r0, r6
 800089a:	e709      	b.n	80006b0 <__udivmoddi4+0xa0>
 800089c:	4607      	mov	r7, r0
 800089e:	e6e7      	b.n	8000670 <__udivmoddi4+0x60>
 80008a0:	4618      	mov	r0, r3
 80008a2:	e6fb      	b.n	800069c <__udivmoddi4+0x8c>
 80008a4:	4541      	cmp	r1, r8
 80008a6:	d2ab      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ac:	eb69 020e 	sbc.w	r2, r9, lr
 80008b0:	3801      	subs	r0, #1
 80008b2:	4613      	mov	r3, r2
 80008b4:	e7a4      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b6:	4660      	mov	r0, ip
 80008b8:	e7e9      	b.n	800088e <__udivmoddi4+0x27e>
 80008ba:	4618      	mov	r0, r3
 80008bc:	e795      	b.n	80007ea <__udivmoddi4+0x1da>
 80008be:	4667      	mov	r7, ip
 80008c0:	e7d1      	b.n	8000866 <__udivmoddi4+0x256>
 80008c2:	4681      	mov	r9, r0
 80008c4:	e77c      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	442c      	add	r4, r5
 80008ca:	e747      	b.n	800075c <__udivmoddi4+0x14c>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	442b      	add	r3, r5
 80008d2:	e72f      	b.n	8000734 <__udivmoddi4+0x124>
 80008d4:	4638      	mov	r0, r7
 80008d6:	e708      	b.n	80006ea <__udivmoddi4+0xda>
 80008d8:	4637      	mov	r7, r6
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0xa0>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <HAL_Init+0x40>)
 80008ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_Init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_Init+0x40>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_Init+0x40>)
 8000902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f92b 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f002 fe7c 	bl	8003610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023c00 	.word	0x40023c00

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f943 	bl	8000bce <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f90b 	bl	8000b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004
 8000980:	20000000 	.word	0x20000000

08000984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x20>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_IncTick+0x24>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000064 	.word	0x20000064

080009ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000064 	.word	0x20000064

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4907      	ldr	r1, [pc, #28]	; (8000a60 <__NVIC_EnableIRQ+0x38>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff29 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff3e 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff8e 	bl	8000ab8 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5d 	bl	8000a64 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff31 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffa2 	bl	8000b20 <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff feda 	bl	80009ac <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e099      	b.n	8000d38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2202      	movs	r2, #2
 8000c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c24:	e00f      	b.n	8000c46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c26:	f7ff fec1 	bl	80009ac <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d908      	bls.n	8000c46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2220      	movs	r2, #32
 8000c38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e078      	b.n	8000d38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1e8      	bne.n	8000c26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <HAL_DMA_Init+0x158>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d107      	bne.n	8000cb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f023 0307 	bic.w	r3, r3, #7
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d117      	bne.n	8000d0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00e      	beq.n	8000d0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fa91 	bl	8001214 <DMA_CheckFifoParam>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d008      	beq.n	8000d0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2240      	movs	r2, #64	; 0x40
 8000cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000d06:	2301      	movs	r3, #1
 8000d08:	e016      	b.n	8000d38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 fa48 	bl	80011a8 <DMA_CalcBaseAndBitshift>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d20:	223f      	movs	r2, #63	; 0x3f
 8000d22:	409a      	lsls	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	f010803f 	.word	0xf010803f

08000d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_DMA_Start_IT+0x26>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e040      	b.n	8000dec <HAL_DMA_Start_IT+0xa8>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d12f      	bne.n	8000dde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2202      	movs	r2, #2
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 f9da 	bl	800114c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d9c:	223f      	movs	r2, #63	; 0x3f
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0216 	orr.w	r2, r2, #22
 8000db2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0208 	orr.w	r2, r2, #8
 8000dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e005      	b.n	8000dea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000de6:	2302      	movs	r3, #2
 8000de8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d004      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00c      	b.n	8000e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2205      	movs	r2, #5
 8000e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0201 	bic.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e44:	4b92      	ldr	r3, [pc, #584]	; (8001090 <HAL_DMA_IRQHandler+0x258>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a92      	ldr	r2, [pc, #584]	; (8001094 <HAL_DMA_IRQHandler+0x25c>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0a9b      	lsrs	r3, r3, #10
 8000e50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e62:	2208      	movs	r2, #8
 8000e64:	409a      	lsls	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01a      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e90:	2208      	movs	r2, #8
 8000e92:	409a      	lsls	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9c:	f043 0201 	orr.w	r2, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d012      	beq.n	8000eda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00b      	beq.n	8000eda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed2:	f043 0202 	orr.w	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ede:	2204      	movs	r2, #4
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d012      	beq.n	8000f10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00b      	beq.n	8000f10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efc:	2204      	movs	r2, #4
 8000efe:	409a      	lsls	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f08:	f043 0204 	orr.w	r2, r3, #4
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f14:	2210      	movs	r2, #16
 8000f16:	409a      	lsls	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d043      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d03c      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f32:	2210      	movs	r2, #16
 8000f34:	409a      	lsls	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d018      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d108      	bne.n	8000f68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d024      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
 8000f66:	e01f      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01b      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
 8000f78:	e016      	b.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d107      	bne.n	8000f98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0208 	bic.w	r2, r2, #8
 8000f96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fac:	2220      	movs	r2, #32
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 808e 	beq.w	80010d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8086 	beq.w	80010d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fce:	2220      	movs	r2, #32
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d136      	bne.n	8001050 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0216 	bic.w	r2, r2, #22
 8000ff0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001000:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_DMA_IRQHandler+0x1da>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0208 	bic.w	r2, r2, #8
 8001020:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	223f      	movs	r2, #63	; 0x3f
 8001028:	409a      	lsls	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001042:	2b00      	cmp	r3, #0
 8001044:	d07d      	beq.n	8001142 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4798      	blx	r3
        }
        return;
 800104e:	e078      	b.n	8001142 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d01c      	beq.n	8001098 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d108      	bne.n	800107e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	2b00      	cmp	r3, #0
 8001072:	d030      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
 800107c:	e02b      	b.n	80010d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001082:	2b00      	cmp	r3, #0
 8001084:	d027      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	4798      	blx	r3
 800108e:	e022      	b.n	80010d6 <HAL_DMA_IRQHandler+0x29e>
 8001090:	20000008 	.word	0x20000008
 8001094:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0210 	bic.w	r2, r2, #16
 80010b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d032      	beq.n	8001144 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d022      	beq.n	8001130 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2205      	movs	r2, #5
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	429a      	cmp	r2, r3
 800110c:	d307      	bcc.n	800111e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f2      	bne.n	8001102 <HAL_DMA_IRQHandler+0x2ca>
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800111e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	4798      	blx	r3
 8001140:	e000      	b.n	8001144 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001142:	bf00      	nop
    }
  }
}
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop

0800114c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b40      	cmp	r3, #64	; 0x40
 8001178:	d108      	bne.n	800118c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800118a:	e007      	b.n	800119c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	60da      	str	r2, [r3, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3b10      	subs	r3, #16
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <DMA_CalcBaseAndBitshift+0x64>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011c2:	4a13      	ldr	r2, [pc, #76]	; (8001210 <DMA_CalcBaseAndBitshift+0x68>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d909      	bls.n	80011ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	1d1a      	adds	r2, r3, #4
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	659a      	str	r2, [r3, #88]	; 0x58
 80011e8:	e007      	b.n	80011fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011f2:	f023 0303 	bic.w	r3, r3, #3
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	aaaaaaab 	.word	0xaaaaaaab
 8001210:	080038d8 	.word	0x080038d8

08001214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d11f      	bne.n	800126e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b03      	cmp	r3, #3
 8001232:	d855      	bhi.n	80012e0 <DMA_CheckFifoParam+0xcc>
 8001234:	a201      	add	r2, pc, #4	; (adr r2, 800123c <DMA_CheckFifoParam+0x28>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	0800124d 	.word	0x0800124d
 8001240:	0800125f 	.word	0x0800125f
 8001244:	0800124d 	.word	0x0800124d
 8001248:	080012e1 	.word	0x080012e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d045      	beq.n	80012e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800125c:	e042      	b.n	80012e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001266:	d13f      	bne.n	80012e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800126c:	e03c      	b.n	80012e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001276:	d121      	bne.n	80012bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d836      	bhi.n	80012ec <DMA_CheckFifoParam+0xd8>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <DMA_CheckFifoParam+0x70>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	08001295 	.word	0x08001295
 8001288:	0800129b 	.word	0x0800129b
 800128c:	08001295 	.word	0x08001295
 8001290:	080012ad 	.word	0x080012ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
      break;
 8001298:	e02f      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d024      	beq.n	80012f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012aa:	e021      	b.n	80012f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012b4:	d11e      	bne.n	80012f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80012ba:	e01b      	b.n	80012f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d902      	bls.n	80012c8 <DMA_CheckFifoParam+0xb4>
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d003      	beq.n	80012ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80012c6:	e018      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
      break;
 80012cc:	e015      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00e      	beq.n	80012f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
      break;
 80012de:	e00b      	b.n	80012f8 <DMA_CheckFifoParam+0xe4>
      break;
 80012e0:	bf00      	nop
 80012e2:	e00a      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      break;
 80012e4:	bf00      	nop
 80012e6:	e008      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      break;
 80012e8:	bf00      	nop
 80012ea:	e006      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      break;
 80012ec:	bf00      	nop
 80012ee:	e004      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      break;
 80012f0:	bf00      	nop
 80012f2:	e002      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      break;   
 80012f4:	bf00      	nop
 80012f6:	e000      	b.n	80012fa <DMA_CheckFifoParam+0xe6>
      break;
 80012f8:	bf00      	nop
    }
  } 
  
  return status; 
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e16b      	b.n	80015fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001324:	2201      	movs	r2, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	429a      	cmp	r2, r3
 800133e:	f040 815a 	bne.w	80015f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d00b      	beq.n	8001362 <HAL_GPIO_Init+0x5a>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001356:	2b11      	cmp	r3, #17
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d130      	bne.n	80013c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 0201 	and.w	r2, r3, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0xfc>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b12      	cmp	r3, #18
 8001402:	d123      	bne.n	800144c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	69b9      	ldr	r1, [r7, #24]
 8001448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80b4 	beq.w	80015f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <HAL_GPIO_Init+0x308>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a5e      	ldr	r2, [pc, #376]	; (8001610 <HAL_GPIO_Init+0x308>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_GPIO_Init+0x308>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014aa:	4a5a      	ldr	r2, [pc, #360]	; (8001614 <HAL_GPIO_Init+0x30c>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a51      	ldr	r2, [pc, #324]	; (8001618 <HAL_GPIO_Init+0x310>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02b      	beq.n	800152e <HAL_GPIO_Init+0x226>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a50      	ldr	r2, [pc, #320]	; (800161c <HAL_GPIO_Init+0x314>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x222>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <HAL_GPIO_Init+0x318>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x21e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <HAL_GPIO_Init+0x31c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x21a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x320>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x216>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	; (800162c <HAL_GPIO_Init+0x324>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x212>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_GPIO_Init+0x328>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x20e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_GPIO_Init+0x32c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x20a>
 800150e:	2307      	movs	r3, #7
 8001510:	e00e      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001512:	2308      	movs	r3, #8
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001516:	2306      	movs	r3, #6
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x228>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x228>
 800152e:	2300      	movs	r3, #0
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	4934      	ldr	r1, [pc, #208]	; (8001614 <HAL_GPIO_Init+0x30c>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_GPIO_Init+0x330>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_GPIO_Init+0x330>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x330>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_GPIO_Init+0x330>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_GPIO_Init+0x330>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_GPIO_Init+0x330>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x330>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_GPIO_Init+0x330>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	f67f ae90 	bls.w	8001324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001604:	bf00      	nop
 8001606:	3724      	adds	r7, #36	; 0x24
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40023800 	.word	0x40023800
 8001614:	40013800 	.word	0x40013800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40021c00 	.word	0x40021c00
 8001638:	40013c00 	.word	0x40013c00

0800163c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e25b      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d075      	beq.n	8001746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165a:	4ba3      	ldr	r3, [pc, #652]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d00c      	beq.n	8001680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001666:	4ba0      	ldr	r3, [pc, #640]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166e:	2b08      	cmp	r3, #8
 8001670:	d112      	bne.n	8001698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001672:	4b9d      	ldr	r3, [pc, #628]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800167e:	d10b      	bne.n	8001698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	4b99      	ldr	r3, [pc, #612]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d05b      	beq.n	8001744 <HAL_RCC_OscConfig+0x108>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d157      	bne.n	8001744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e236      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d106      	bne.n	80016b0 <HAL_RCC_OscConfig+0x74>
 80016a2:	4b91      	ldr	r3, [pc, #580]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a90      	ldr	r2, [pc, #576]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e01d      	b.n	80016ec <HAL_RCC_OscConfig+0xb0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x98>
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a8a      	ldr	r2, [pc, #552]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a87      	ldr	r2, [pc, #540]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0xb0>
 80016d4:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a83      	ldr	r2, [pc, #524]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a80      	ldr	r2, [pc, #512]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d013      	beq.n	800171c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f95a 	bl	80009ac <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f956 	bl	80009ac <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1fb      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0xc0>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff f946 	bl	80009ac <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff f942 	bl	80009ac <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1e7      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0xe8>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d063      	beq.n	800181a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175e:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001766:	2b08      	cmp	r3, #8
 8001768:	d11c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176a:	4b5f      	ldr	r3, [pc, #380]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	4b5c      	ldr	r3, [pc, #368]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x152>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1bb      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4952      	ldr	r1, [pc, #328]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	e03a      	b.n	800181a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <HAL_RCC_OscConfig+0x2b0>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff f8fb 	bl	80009ac <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff f8f7 	bl	80009ac <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e19c      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4940      	ldr	r1, [pc, #256]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e015      	b.n	800181a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <HAL_RCC_OscConfig+0x2b0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff f8da 	bl	80009ac <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff f8d6 	bl	80009ac <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e17b      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d030      	beq.n	8001888 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d016      	beq.n	800185c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x2b4>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff f8ba 	bl	80009ac <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff f8b6 	bl	80009ac <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e15b      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x200>
 800185a:	e015      	b.n	8001888 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x2b4>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7ff f8a3 	bl	80009ac <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff f89f 	bl	80009ac <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e144      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 800187e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a0 	beq.w	80019d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x2b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d121      	bne.n	8001916 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_RCC_OscConfig+0x2b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_RCC_OscConfig+0x2b8>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff f865 	bl	80009ac <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	e011      	b.n	800190a <HAL_RCC_OscConfig+0x2ce>
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	42470000 	.word	0x42470000
 80018f0:	42470e80 	.word	0x42470e80
 80018f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f8:	f7ff f858 	bl	80009ac <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0fd      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x4d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x2f0>
 800191e:	4b7d      	ldr	r3, [pc, #500]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a7c      	ldr	r2, [pc, #496]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	e01c      	b.n	8001966 <HAL_RCC_OscConfig+0x32a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d10c      	bne.n	800194e <HAL_RCC_OscConfig+0x312>
 8001934:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a76      	ldr	r2, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b74      	ldr	r3, [pc, #464]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a73      	ldr	r2, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	e00b      	b.n	8001966 <HAL_RCC_OscConfig+0x32a>
 800194e:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a70      	ldr	r2, [pc, #448]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	4b6e      	ldr	r3, [pc, #440]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a6d      	ldr	r2, [pc, #436]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d015      	beq.n	800199a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff f81d 	bl	80009ac <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f819 	bl	80009ac <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0bc      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ee      	beq.n	8001976 <HAL_RCC_OscConfig+0x33a>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff f807 	bl	80009ac <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f803 	bl	80009ac <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0a6      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ee      	bne.n	80019a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8092 	beq.w	8001b04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e0:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d05c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d141      	bne.n	8001a78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <HAL_RCC_OscConfig+0x4dc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7fe ffd7 	bl	80009ac <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a02:	f7fe ffd3 	bl	80009ac <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e078      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a14:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69da      	ldr	r2, [r3, #28]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	061b      	lsls	r3, r3, #24
 8001a44:	4933      	ldr	r1, [pc, #204]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x4dc>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7fe ffac 	bl	80009ac <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7fe ffa8 	bl	80009ac <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e04d      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x41c>
 8001a76:	e045      	b.n	8001b04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_OscConfig+0x4dc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe ff95 	bl	80009ac <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a86:	f7fe ff91 	bl	80009ac <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e036      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x44a>
 8001aa4:	e02e      	b.n	8001b04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e029      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCC_OscConfig+0x4d8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40007000 	.word	0x40007000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	42470060 	.word	0x42470060

08001b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0cc      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d90c      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d044      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d119      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e067      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4934      	ldr	r1, [pc, #208]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fece 	bl	80009ac <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7fe feca 	bl	80009ac <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e04f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 020c 	and.w	r2, r3, #12
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1eb      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d20c      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fe2e 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	080038e0 	.word	0x080038e0
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d007      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0x32>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d008      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x38>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 808d 	bne.w	8001e2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d16:	60bb      	str	r3, [r7, #8]
       break;
 8001d18:	e08c      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d1c:	60bb      	str	r3, [r7, #8]
      break;
 8001d1e:	e089      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d20:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2a:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d023      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	f04f 0400 	mov.w	r4, #0
 8001d40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	ea03 0501 	and.w	r5, r3, r1
 8001d4c:	ea04 0602 	and.w	r6, r4, r2
 8001d50:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d52:	fb02 f106 	mul.w	r1, r2, r6
 8001d56:	2200      	movs	r2, #0
 8001d58:	fb02 f205 	mul.w	r2, r2, r5
 8001d5c:	440a      	add	r2, r1
 8001d5e:	493a      	ldr	r1, [pc, #232]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d60:	fba5 0101 	umull	r0, r1, r5, r1
 8001d64:	1853      	adds	r3, r2, r1
 8001d66:	4619      	mov	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4623      	mov	r3, r4
 8001d72:	f7fe fc35 	bl	80005e0 <__aeabi_uldivmod>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e049      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	ea03 0501 	and.w	r5, r3, r1
 8001d94:	ea04 0602 	and.w	r6, r4, r2
 8001d98:	4629      	mov	r1, r5
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f04f 0400 	mov.w	r4, #0
 8001da4:	0154      	lsls	r4, r2, #5
 8001da6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001daa:	014b      	lsls	r3, r1, #5
 8001dac:	4619      	mov	r1, r3
 8001dae:	4622      	mov	r2, r4
 8001db0:	1b49      	subs	r1, r1, r5
 8001db2:	eb62 0206 	sbc.w	r2, r2, r6
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	f04f 0400 	mov.w	r4, #0
 8001dbe:	0194      	lsls	r4, r2, #6
 8001dc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dc4:	018b      	lsls	r3, r1, #6
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	eb64 0402 	sbc.w	r4, r4, r2
 8001dcc:	f04f 0100 	mov.w	r1, #0
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	00e2      	lsls	r2, r4, #3
 8001dd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dda:	00d9      	lsls	r1, r3, #3
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4614      	mov	r4, r2
 8001de0:	195b      	adds	r3, r3, r5
 8001de2:	eb44 0406 	adc.w	r4, r4, r6
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	02a2      	lsls	r2, r4, #10
 8001df0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001df4:	0299      	lsls	r1, r3, #10
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f04f 0400 	mov.w	r4, #0
 8001e04:	461a      	mov	r2, r3
 8001e06:	4623      	mov	r3, r4
 8001e08:	f7fe fbea 	bl	80005e0 <__aeabi_uldivmod>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	60bb      	str	r3, [r7, #8]
      break;
 8001e2c:	e002      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e30:	60bb      	str	r3, [r7, #8]
      break;
 8001e32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e34:	68bb      	ldr	r3, [r7, #8]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	017d7840 	.word	0x017d7840

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	080038f0 	.word	0x080038f0

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffdc 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e94:	4601      	mov	r1, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0b5b      	lsrs	r3, r3, #13
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	080038f0 	.word	0x080038f0

08001eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e03f      	b.n	8001f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f001 fbc0 	bl	8003660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb8b 	bl	8002614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d166      	bne.n	8002038 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_UART_Receive_DMA+0x26>
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e05f      	b.n	800203a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_UART_Receive_DMA+0x38>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e058      	b.n	800203a <HAL_UART_Receive_DMA+0xea>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	88fa      	ldrh	r2, [r7, #6]
 8001f9a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2222      	movs	r2, #34	; 0x22
 8001fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_UART_Receive_DMA+0xf4>)
 8001fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_UART_Receive_DMA+0xf8>)
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_UART_Receive_DMA+0xfc>)
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	f7fe feaf 	bl	8000d44 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002012:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002032:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	0800228d 	.word	0x0800228d
 8002048:	080022f5 	.word	0x080022f5
 800204c:	08002311 	.word	0x08002311

08002050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10d      	bne.n	80020a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_UART_IRQHandler+0x52>
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa38 	bl	8002510 <UART_Receive_IT>
      return;
 80020a0:	e0d1      	b.n	8002246 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80b0 	beq.w	800220a <HAL_UART_IRQHandler+0x1ba>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_UART_IRQHandler+0x70>
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80a5 	beq.w	800220a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_UART_IRQHandler+0x90>
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_UART_IRQHandler+0xb0>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	f043 0202 	orr.w	r2, r3, #2
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_UART_IRQHandler+0xd0>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	f043 0204 	orr.w	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00f      	beq.n	800214a <HAL_UART_IRQHandler+0xfa>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <HAL_UART_IRQHandler+0xee>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	f043 0208 	orr.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d078      	beq.n	8002244 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_UART_IRQHandler+0x11c>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f9d2 	bl	8002510 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_UART_IRQHandler+0x144>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f91b 	bl	80023d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d123      	bne.n	80021f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c4:	4a21      	ldr	r2, [pc, #132]	; (800224c <HAL_UART_IRQHandler+0x1fc>)
 80021c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fe11 	bl	8000df4 <HAL_DMA_Abort_IT>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d016      	beq.n	8002206 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e2:	4610      	mov	r0, r2
 80021e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e6:	e00e      	b.n	8002206 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f845 	bl	8002278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ee:	e00a      	b.n	8002206 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f841 	bl	8002278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f6:	e006      	b.n	8002206 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f83d 	bl	8002278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002204:	e01e      	b.n	8002244 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002206:	bf00      	nop
    return;
 8002208:	e01c      	b.n	8002244 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_UART_IRQHandler+0x1d6>
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f908 	bl	8002434 <UART_Transmit_IT>
    return;
 8002224:	e00f      	b.n	8002246 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_UART_IRQHandler+0x1f6>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f950 	bl	80024e0 <UART_EndTransmit_IT>
    return;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002244:	bf00      	nop
  }
}
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800240d 	.word	0x0800240d

08002250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11e      	bne.n	80022e6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f001 f84a 	bl	8003380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff ffae 	bl	8002264 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b21      	cmp	r3, #33	; 0x21
 8002342:	d108      	bne.n	8002356 <UART_DMAError+0x46>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002350:	68b8      	ldr	r0, [r7, #8]
 8002352:	f000 f827 	bl	80023a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b22      	cmp	r3, #34	; 0x22
 8002376:	d108      	bne.n	800238a <UART_DMAError+0x7a>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2200      	movs	r2, #0
 8002382:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002384:	68b8      	ldr	r0, [r7, #8]
 8002386:	f000 f823 	bl	80023d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002396:	68b8      	ldr	r0, [r7, #8]
 8002398:	f7ff ff6e 	bl	8002278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80023ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7ff ff26 	bl	8002278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b21      	cmp	r3, #33	; 0x21
 8002446:	d144      	bne.n	80024d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d11a      	bne.n	8002488 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002466:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	1c9a      	adds	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	621a      	str	r2, [r3, #32]
 800247a:	e00e      	b.n	800249a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	621a      	str	r2, [r3, #32]
 8002486:	e008      	b.n	800249a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	1c59      	adds	r1, r3, #1
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6211      	str	r1, [r2, #32]
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4619      	mov	r1, r3
 80024a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fea5 	bl	8002250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b22      	cmp	r3, #34	; 0x22
 8002522:	d171      	bne.n	8002608 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d123      	bne.n	8002576 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10e      	bne.n	800255a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
 8002558:	e029      	b.n	80025ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
 8002574:	e01b      	b.n	80025ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6858      	ldr	r0, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	1c59      	adds	r1, r3, #1
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6291      	str	r1, [r2, #40]	; 0x28
 800258e:	b2c2      	uxtb	r2, r0
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e00c      	b.n	80025ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	1c58      	adds	r0, r3, #1
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	6288      	str	r0, [r1, #40]	; 0x28
 80025a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4619      	mov	r1, r3
 80025bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d120      	bne.n	8002604 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0220 	bic.w	r2, r2, #32
 80025d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fec0 	bl	8003380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e002      	b.n	800260a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002656:	f023 030c 	bic.w	r3, r3, #12
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	430b      	orrs	r3, r1
 8002662:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002682:	f040 818b 	bne.w	800299c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4ac1      	ldr	r2, [pc, #772]	; (8002990 <UART_SetConfig+0x37c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d005      	beq.n	800269c <UART_SetConfig+0x88>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4abf      	ldr	r2, [pc, #764]	; (8002994 <UART_SetConfig+0x380>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f040 80bd 	bne.w	8002816 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800269c:	f7ff fbf6 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 80026a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	461d      	mov	r5, r3
 80026a6:	f04f 0600 	mov.w	r6, #0
 80026aa:	46a8      	mov	r8, r5
 80026ac:	46b1      	mov	r9, r6
 80026ae:	eb18 0308 	adds.w	r3, r8, r8
 80026b2:	eb49 0409 	adc.w	r4, r9, r9
 80026b6:	4698      	mov	r8, r3
 80026b8:	46a1      	mov	r9, r4
 80026ba:	eb18 0805 	adds.w	r8, r8, r5
 80026be:	eb49 0906 	adc.w	r9, r9, r6
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026d6:	4688      	mov	r8, r1
 80026d8:	4691      	mov	r9, r2
 80026da:	eb18 0005 	adds.w	r0, r8, r5
 80026de:	eb49 0106 	adc.w	r1, r9, r6
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	461d      	mov	r5, r3
 80026e8:	f04f 0600 	mov.w	r6, #0
 80026ec:	196b      	adds	r3, r5, r5
 80026ee:	eb46 0406 	adc.w	r4, r6, r6
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7fd ff73 	bl	80005e0 <__aeabi_uldivmod>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	461a      	mov	r2, r3
 8002700:	4ba5      	ldr	r3, [pc, #660]	; (8002998 <UART_SetConfig+0x384>)
 8002702:	fba3 2302 	umull	r2, r3, r3, r2
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	461d      	mov	r5, r3
 8002710:	f04f 0600 	mov.w	r6, #0
 8002714:	46a9      	mov	r9, r5
 8002716:	46b2      	mov	sl, r6
 8002718:	eb19 0309 	adds.w	r3, r9, r9
 800271c:	eb4a 040a 	adc.w	r4, sl, sl
 8002720:	4699      	mov	r9, r3
 8002722:	46a2      	mov	sl, r4
 8002724:	eb19 0905 	adds.w	r9, r9, r5
 8002728:	eb4a 0a06 	adc.w	sl, sl, r6
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002738:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800273c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002740:	4689      	mov	r9, r1
 8002742:	4692      	mov	sl, r2
 8002744:	eb19 0005 	adds.w	r0, r9, r5
 8002748:	eb4a 0106 	adc.w	r1, sl, r6
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	461d      	mov	r5, r3
 8002752:	f04f 0600 	mov.w	r6, #0
 8002756:	196b      	adds	r3, r5, r5
 8002758:	eb46 0406 	adc.w	r4, r6, r6
 800275c:	461a      	mov	r2, r3
 800275e:	4623      	mov	r3, r4
 8002760:	f7fd ff3e 	bl	80005e0 <__aeabi_uldivmod>
 8002764:	4603      	mov	r3, r0
 8002766:	460c      	mov	r4, r1
 8002768:	461a      	mov	r2, r3
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <UART_SetConfig+0x384>)
 800276c:	fba3 1302 	umull	r1, r3, r3, r2
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	2164      	movs	r1, #100	; 0x64
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3332      	adds	r3, #50	; 0x32
 800277e:	4a86      	ldr	r2, [pc, #536]	; (8002998 <UART_SetConfig+0x384>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800278c:	4498      	add	r8, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	461d      	mov	r5, r3
 8002792:	f04f 0600 	mov.w	r6, #0
 8002796:	46a9      	mov	r9, r5
 8002798:	46b2      	mov	sl, r6
 800279a:	eb19 0309 	adds.w	r3, r9, r9
 800279e:	eb4a 040a 	adc.w	r4, sl, sl
 80027a2:	4699      	mov	r9, r3
 80027a4:	46a2      	mov	sl, r4
 80027a6:	eb19 0905 	adds.w	r9, r9, r5
 80027aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027c2:	4689      	mov	r9, r1
 80027c4:	4692      	mov	sl, r2
 80027c6:	eb19 0005 	adds.w	r0, r9, r5
 80027ca:	eb4a 0106 	adc.w	r1, sl, r6
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	461d      	mov	r5, r3
 80027d4:	f04f 0600 	mov.w	r6, #0
 80027d8:	196b      	adds	r3, r5, r5
 80027da:	eb46 0406 	adc.w	r4, r6, r6
 80027de:	461a      	mov	r2, r3
 80027e0:	4623      	mov	r3, r4
 80027e2:	f7fd fefd 	bl	80005e0 <__aeabi_uldivmod>
 80027e6:	4603      	mov	r3, r0
 80027e8:	460c      	mov	r4, r1
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <UART_SetConfig+0x384>)
 80027ee:	fba3 1302 	umull	r1, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2164      	movs	r1, #100	; 0x64
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	3332      	adds	r3, #50	; 0x32
 8002800:	4a65      	ldr	r2, [pc, #404]	; (8002998 <UART_SetConfig+0x384>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	f003 0207 	and.w	r2, r3, #7
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4442      	add	r2, r8
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e26f      	b.n	8002cf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002816:	f7ff fb25 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 800281a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	461d      	mov	r5, r3
 8002820:	f04f 0600 	mov.w	r6, #0
 8002824:	46a8      	mov	r8, r5
 8002826:	46b1      	mov	r9, r6
 8002828:	eb18 0308 	adds.w	r3, r8, r8
 800282c:	eb49 0409 	adc.w	r4, r9, r9
 8002830:	4698      	mov	r8, r3
 8002832:	46a1      	mov	r9, r4
 8002834:	eb18 0805 	adds.w	r8, r8, r5
 8002838:	eb49 0906 	adc.w	r9, r9, r6
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002848:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800284c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002850:	4688      	mov	r8, r1
 8002852:	4691      	mov	r9, r2
 8002854:	eb18 0005 	adds.w	r0, r8, r5
 8002858:	eb49 0106 	adc.w	r1, r9, r6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	461d      	mov	r5, r3
 8002862:	f04f 0600 	mov.w	r6, #0
 8002866:	196b      	adds	r3, r5, r5
 8002868:	eb46 0406 	adc.w	r4, r6, r6
 800286c:	461a      	mov	r2, r3
 800286e:	4623      	mov	r3, r4
 8002870:	f7fd feb6 	bl	80005e0 <__aeabi_uldivmod>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461a      	mov	r2, r3
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <UART_SetConfig+0x384>)
 800287c:	fba3 2302 	umull	r2, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	461d      	mov	r5, r3
 800288a:	f04f 0600 	mov.w	r6, #0
 800288e:	46a9      	mov	r9, r5
 8002890:	46b2      	mov	sl, r6
 8002892:	eb19 0309 	adds.w	r3, r9, r9
 8002896:	eb4a 040a 	adc.w	r4, sl, sl
 800289a:	4699      	mov	r9, r3
 800289c:	46a2      	mov	sl, r4
 800289e:	eb19 0905 	adds.w	r9, r9, r5
 80028a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ba:	4689      	mov	r9, r1
 80028bc:	4692      	mov	sl, r2
 80028be:	eb19 0005 	adds.w	r0, r9, r5
 80028c2:	eb4a 0106 	adc.w	r1, sl, r6
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	461d      	mov	r5, r3
 80028cc:	f04f 0600 	mov.w	r6, #0
 80028d0:	196b      	adds	r3, r5, r5
 80028d2:	eb46 0406 	adc.w	r4, r6, r6
 80028d6:	461a      	mov	r2, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	f7fd fe81 	bl	80005e0 <__aeabi_uldivmod>
 80028de:	4603      	mov	r3, r0
 80028e0:	460c      	mov	r4, r1
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <UART_SetConfig+0x384>)
 80028e6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2164      	movs	r1, #100	; 0x64
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	3332      	adds	r3, #50	; 0x32
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <UART_SetConfig+0x384>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002906:	4498      	add	r8, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	461d      	mov	r5, r3
 800290c:	f04f 0600 	mov.w	r6, #0
 8002910:	46a9      	mov	r9, r5
 8002912:	46b2      	mov	sl, r6
 8002914:	eb19 0309 	adds.w	r3, r9, r9
 8002918:	eb4a 040a 	adc.w	r4, sl, sl
 800291c:	4699      	mov	r9, r3
 800291e:	46a2      	mov	sl, r4
 8002920:	eb19 0905 	adds.w	r9, r9, r5
 8002924:	eb4a 0a06 	adc.w	sl, sl, r6
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800293c:	4689      	mov	r9, r1
 800293e:	4692      	mov	sl, r2
 8002940:	eb19 0005 	adds.w	r0, r9, r5
 8002944:	eb4a 0106 	adc.w	r1, sl, r6
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	461d      	mov	r5, r3
 800294e:	f04f 0600 	mov.w	r6, #0
 8002952:	196b      	adds	r3, r5, r5
 8002954:	eb46 0406 	adc.w	r4, r6, r6
 8002958:	461a      	mov	r2, r3
 800295a:	4623      	mov	r3, r4
 800295c:	f7fd fe40 	bl	80005e0 <__aeabi_uldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	461a      	mov	r2, r3
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <UART_SetConfig+0x384>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3332      	adds	r3, #50	; 0x32
 800297a:	4a07      	ldr	r2, [pc, #28]	; (8002998 <UART_SetConfig+0x384>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4442      	add	r2, r8
 800298c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800298e:	e1b2      	b.n	8002cf6 <UART_SetConfig+0x6e2>
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4ad7      	ldr	r2, [pc, #860]	; (8002d00 <UART_SetConfig+0x6ec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d005      	beq.n	80029b2 <UART_SetConfig+0x39e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4ad6      	ldr	r2, [pc, #856]	; (8002d04 <UART_SetConfig+0x6f0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	f040 80d1 	bne.w	8002b54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b2:	f7ff fa6b 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 80029b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	469a      	mov	sl, r3
 80029bc:	f04f 0b00 	mov.w	fp, #0
 80029c0:	46d0      	mov	r8, sl
 80029c2:	46d9      	mov	r9, fp
 80029c4:	eb18 0308 	adds.w	r3, r8, r8
 80029c8:	eb49 0409 	adc.w	r4, r9, r9
 80029cc:	4698      	mov	r8, r3
 80029ce:	46a1      	mov	r9, r4
 80029d0:	eb18 080a 	adds.w	r8, r8, sl
 80029d4:	eb49 090b 	adc.w	r9, r9, fp
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029ec:	4688      	mov	r8, r1
 80029ee:	4691      	mov	r9, r2
 80029f0:	eb1a 0508 	adds.w	r5, sl, r8
 80029f4:	eb4b 0609 	adc.w	r6, fp, r9
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0094      	lsls	r4, r2, #2
 8002a0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a10:	008b      	lsls	r3, r1, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	4623      	mov	r3, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	4631      	mov	r1, r6
 8002a1a:	f7fd fde1 	bl	80005e0 <__aeabi_uldivmod>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	461a      	mov	r2, r3
 8002a24:	4bb8      	ldr	r3, [pc, #736]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	469b      	mov	fp, r3
 8002a34:	f04f 0c00 	mov.w	ip, #0
 8002a38:	46d9      	mov	r9, fp
 8002a3a:	46e2      	mov	sl, ip
 8002a3c:	eb19 0309 	adds.w	r3, r9, r9
 8002a40:	eb4a 040a 	adc.w	r4, sl, sl
 8002a44:	4699      	mov	r9, r3
 8002a46:	46a2      	mov	sl, r4
 8002a48:	eb19 090b 	adds.w	r9, r9, fp
 8002a4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a64:	4689      	mov	r9, r1
 8002a66:	4692      	mov	sl, r2
 8002a68:	eb1b 0509 	adds.w	r5, fp, r9
 8002a6c:	eb4c 060a 	adc.w	r6, ip, sl
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	0094      	lsls	r4, r2, #2
 8002a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a88:	008b      	lsls	r3, r1, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	4628      	mov	r0, r5
 8002a90:	4631      	mov	r1, r6
 8002a92:	f7fd fda5 	bl	80005e0 <__aeabi_uldivmod>
 8002a96:	4603      	mov	r3, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b9a      	ldr	r3, [pc, #616]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a95      	ldr	r2, [pc, #596]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	4498      	add	r8, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	469b      	mov	fp, r3
 8002ac2:	f04f 0c00 	mov.w	ip, #0
 8002ac6:	46d9      	mov	r9, fp
 8002ac8:	46e2      	mov	sl, ip
 8002aca:	eb19 0309 	adds.w	r3, r9, r9
 8002ace:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad2:	4699      	mov	r9, r3
 8002ad4:	46a2      	mov	sl, r4
 8002ad6:	eb19 090b 	adds.w	r9, r9, fp
 8002ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af2:	4689      	mov	r9, r1
 8002af4:	4692      	mov	sl, r2
 8002af6:	eb1b 0509 	adds.w	r5, fp, r9
 8002afa:	eb4c 060a 	adc.w	r6, ip, sl
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0094      	lsls	r4, r2, #2
 8002b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b16:	008b      	lsls	r3, r1, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	4631      	mov	r1, r6
 8002b20:	f7fd fd5e 	bl	80005e0 <__aeabi_uldivmod>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2164      	movs	r1, #100	; 0x64
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a72      	ldr	r2, [pc, #456]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 020f 	and.w	r2, r3, #15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4442      	add	r2, r8
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	e0d0      	b.n	8002cf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b54:	f7ff f986 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002b58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	469a      	mov	sl, r3
 8002b5e:	f04f 0b00 	mov.w	fp, #0
 8002b62:	46d0      	mov	r8, sl
 8002b64:	46d9      	mov	r9, fp
 8002b66:	eb18 0308 	adds.w	r3, r8, r8
 8002b6a:	eb49 0409 	adc.w	r4, r9, r9
 8002b6e:	4698      	mov	r8, r3
 8002b70:	46a1      	mov	r9, r4
 8002b72:	eb18 080a 	adds.w	r8, r8, sl
 8002b76:	eb49 090b 	adc.w	r9, r9, fp
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b8e:	4688      	mov	r8, r1
 8002b90:	4691      	mov	r9, r2
 8002b92:	eb1a 0508 	adds.w	r5, sl, r8
 8002b96:	eb4b 0609 	adc.w	r6, fp, r9
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	0094      	lsls	r4, r2, #2
 8002bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bb2:	008b      	lsls	r3, r1, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	4631      	mov	r1, r6
 8002bbc:	f7fd fd10 	bl	80005e0 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	469b      	mov	fp, r3
 8002bd6:	f04f 0c00 	mov.w	ip, #0
 8002bda:	46d9      	mov	r9, fp
 8002bdc:	46e2      	mov	sl, ip
 8002bde:	eb19 0309 	adds.w	r3, r9, r9
 8002be2:	eb4a 040a 	adc.w	r4, sl, sl
 8002be6:	4699      	mov	r9, r3
 8002be8:	46a2      	mov	sl, r4
 8002bea:	eb19 090b 	adds.w	r9, r9, fp
 8002bee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c06:	4689      	mov	r9, r1
 8002c08:	4692      	mov	sl, r2
 8002c0a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c0e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	0094      	lsls	r4, r2, #2
 8002c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c2a:	008b      	lsls	r3, r1, #2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	4628      	mov	r0, r5
 8002c32:	4631      	mov	r1, r6
 8002c34:	f7fd fcd4 	bl	80005e0 <__aeabi_uldivmod>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002c40:	fba3 1302 	umull	r1, r3, r3, r2
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	2164      	movs	r1, #100	; 0x64
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	3332      	adds	r3, #50	; 0x32
 8002c52:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5e:	4498      	add	r8, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	469b      	mov	fp, r3
 8002c64:	f04f 0c00 	mov.w	ip, #0
 8002c68:	46d9      	mov	r9, fp
 8002c6a:	46e2      	mov	sl, ip
 8002c6c:	eb19 0309 	adds.w	r3, r9, r9
 8002c70:	eb4a 040a 	adc.w	r4, sl, sl
 8002c74:	4699      	mov	r9, r3
 8002c76:	46a2      	mov	sl, r4
 8002c78:	eb19 090b 	adds.w	r9, r9, fp
 8002c7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c94:	4689      	mov	r9, r1
 8002c96:	4692      	mov	sl, r2
 8002c98:	eb1b 0509 	adds.w	r5, fp, r9
 8002c9c:	eb4c 060a 	adc.w	r6, ip, sl
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	0094      	lsls	r4, r2, #2
 8002cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cb8:	008b      	lsls	r3, r1, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	f7fd fc8d 	bl	80005e0 <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002cce:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2164      	movs	r1, #100	; 0x64
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	; 0x32
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4442      	add	r2, r8
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	e7ff      	b.n	8002cf6 <UART_SetConfig+0x6e2>
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40011400 	.word	0x40011400
 8002d08:	51eb851f 	.word	0x51eb851f

08002d0c <TakeGpsGPGGA>:




bool TakeGpsGPGGA(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0


    valid=false;
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <TakeGpsGPGGA+0x11c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
	int count=0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
	bool gprmcbool=false;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	72fb      	strb	r3, [r7, #11]
    cntGprMc=0;
 8002d20:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <TakeGpsGPGGA+0x120>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    findValue=false;
 8002d26:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <TakeGpsGPGGA+0x124>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]

	while(!findValue)
 8002d2c:	e044      	b.n	8002db8 <TakeGpsGPGGA+0xac>
    {

	  for(int i=0;i<495;i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	e03a      	b.n	8002daa <TakeGpsGPGGA+0x9e>
	  {
	     if(GpsData[i]=='G' &&GpsData[i+1]=='P' &&GpsData[i+2]=='G' && GpsData[i+3]=='G' && GpsData[i+4]=='A')
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b47      	cmp	r3, #71	; 0x47
 8002d3e:	d131      	bne.n	8002da4 <TakeGpsGPGGA+0x98>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a3b      	ldr	r2, [pc, #236]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	2b50      	cmp	r3, #80	; 0x50
 8002d4a:	d12b      	bne.n	8002da4 <TakeGpsGPGGA+0x98>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3302      	adds	r3, #2
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	2b47      	cmp	r3, #71	; 0x47
 8002d56:	d125      	bne.n	8002da4 <TakeGpsGPGGA+0x98>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3303      	adds	r3, #3
 8002d5c:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	2b47      	cmp	r3, #71	; 0x47
 8002d62:	d11f      	bne.n	8002da4 <TakeGpsGPGGA+0x98>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	2b41      	cmp	r3, #65	; 0x41
 8002d6e:	d119      	bne.n	8002da4 <TakeGpsGPGGA+0x98>
	     {
	     	gprmc=i+6;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3306      	adds	r3, #6
 8002d74:	4a30      	ldr	r2, [pc, #192]	; (8002e38 <TakeGpsGPGGA+0x12c>)
 8002d76:	6013      	str	r3, [r2, #0]

	     	while(GpsData[i] !='\r')
 8002d78:	e008      	b.n	8002d8c <TakeGpsGPGGA+0x80>
	     	{
	     		i++;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
	     		if(i==500)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d86:	d101      	bne.n	8002d8c <TakeGpsGPGGA+0x80>
	     		{
	     		  return false;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e046      	b.n	8002e1a <TakeGpsGPGGA+0x10e>
	     	while(GpsData[i] !='\r')
 8002d8c:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b0d      	cmp	r3, #13
 8002d96:	d1f0      	bne.n	8002d7a <TakeGpsGPGGA+0x6e>
	     		}
	     	}

	     	findValue=true;
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <TakeGpsGPGGA+0x124>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
	     	gprmcbool=true;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	72fb      	strb	r3, [r7, #11]
	     	break;
 8002da2:	e006      	b.n	8002db2 <TakeGpsGPGGA+0xa6>
	  for(int i=0;i<495;i++)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3301      	adds	r3, #1
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8002db0:	ddc0      	ble.n	8002d34 <TakeGpsGPGGA+0x28>

	      }
       }

	   findValue=true;
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <TakeGpsGPGGA+0x124>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
	while(!findValue)
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <TakeGpsGPGGA+0x124>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	f083 0301 	eor.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1b3      	bne.n	8002d2e <TakeGpsGPGGA+0x22>

	  }

	  count=gprmc;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <TakeGpsGPGGA+0x12c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

	  if(gprmcbool)
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <TakeGpsGPGGA+0xf4>
	  {

		  while(GpsData[count] != '\r')
 8002dd2:	e00f      	b.n	8002df4 <TakeGpsGPGGA+0xe8>
		  {

			  GprMc[cntGprMc]=GpsData[count];
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <TakeGpsGPGGA+0x120>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4916      	ldr	r1, [pc, #88]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	440a      	add	r2, r1
 8002dde:	7811      	ldrb	r1, [r2, #0]
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <TakeGpsGPGGA+0x130>)
 8002de2:	54d1      	strb	r1, [r2, r3]

			  ++count;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3301      	adds	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
			  ++cntGprMc;
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <TakeGpsGPGGA+0x120>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <TakeGpsGPGGA+0x120>)
 8002df2:	6013      	str	r3, [r2, #0]
		  while(GpsData[count] != '\r')
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <TakeGpsGPGGA+0x128>)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b0d      	cmp	r3, #13
 8002dfe:	d1e9      	bne.n	8002dd4 <TakeGpsGPGGA+0xc8>

		  }
	  }


       if(GprMc[0] == ',')
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <TakeGpsGPGGA+0x130>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b2c      	cmp	r3, #44	; 0x2c
 8002e06:	d103      	bne.n	8002e10 <TakeGpsGPGGA+0x104>
       {

    	   valid=false;
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <TakeGpsGPGGA+0x11c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e002      	b.n	8002e16 <TakeGpsGPGGA+0x10a>
       }

       else
    	   valid=true;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <TakeGpsGPGGA+0x11c>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]


	      return valid;
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <TakeGpsGPGGA+0x11c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]

}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	2000004c 	.word	0x2000004c
 8002e2c:	20000030 	.word	0x20000030
 8002e30:	2000004d 	.word	0x2000004d
 8002e34:	2000007c 	.word	0x2000007c
 8002e38:	2000002c 	.word	0x2000002c
 8002e3c:	2000027c 	.word	0x2000027c

08002e40 <GPSLatitGGA>:


float GPSLatitGGA(void)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0


	int commaCount=0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
    int i=0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
    int cntLong=0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

    while(commaCount<2)
 8002e52:	e02b      	b.n	8002eac <GPSLatitGGA+0x6c>
	{

		if(GprMc[i]==',')
 8002e54:	4a68      	ldr	r2, [pc, #416]	; (8002ff8 <GPSLatitGGA+0x1b8>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b2c      	cmp	r3, #44	; 0x2c
 8002e5e:	d122      	bne.n	8002ea6 <GPSLatitGGA+0x66>
		{
			commaCount++;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3301      	adds	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
        	i++;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]


            if(commaCount==1)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d11c      	bne.n	8002eac <GPSLatitGGA+0x6c>
            {

            	while(GprMc[i] != ',')
 8002e72:	e00e      	b.n	8002e92 <GPSLatitGGA+0x52>
				{
            		latit[cntLong]=GprMc[i];
 8002e74:	4a60      	ldr	r2, [pc, #384]	; (8002ff8 <GPSLatitGGA+0x1b8>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	7819      	ldrb	r1, [r3, #0]
 8002e7c:	4a5f      	ldr	r2, [pc, #380]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	460a      	mov	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]

            		cntLong++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]

            		i++;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	613b      	str	r3, [r7, #16]
            	while(GprMc[i] != ',')
 8002e92:	4a59      	ldr	r2, [pc, #356]	; (8002ff8 <GPSLatitGGA+0x1b8>)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b2c      	cmp	r3, #44	; 0x2c
 8002e9c:	d1ea      	bne.n	8002e74 <GPSLatitGGA+0x34>

				}

    			commaCount++;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e002      	b.n	8002eac <GPSLatitGGA+0x6c>

           }
		}

		else
		    i++;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
    while(commaCount<2)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	ddd0      	ble.n	8002e54 <GPSLatitGGA+0x14>

    }

    bool founded=false;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	72fb      	strb	r3, [r7, #11]

    if(cntLong >= 8)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	f340 8087 	ble.w	8002fcc <GPSLatitGGA+0x18c>
    {
        float extra=0;
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
    	latitude=(float)((latit[0]-48)*10 + (latit[1]-48));
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	3b30      	subs	r3, #48	; 0x30
 8002edc:	4413      	add	r3, r2
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee6:	ee17 0a90 	vmov	r0, s15
 8002eea:	f7fd fad1 	bl	8000490 <__aeabi_f2d>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	4a43      	ldr	r2, [pc, #268]	; (8003000 <GPSLatitGGA+0x1c0>)
 8002ef4:	e9c2 3400 	strd	r3, r4, [r2]

    	latitude+=(float)((float)((latit[2]-48)*10 + (latit[3]-48))/(float)60);
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002efa:	789b      	ldrb	r3, [r3, #2]
 8002efc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002f0c:	78db      	ldrb	r3, [r3, #3]
 8002f0e:	3b30      	subs	r3, #48	; 0x30
 8002f10:	4413      	add	r3, r2
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003004 <GPSLatitGGA+0x1c4>
 8002f1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f22:	ee16 0a90 	vmov	r0, s13
 8002f26:	f7fd fab3 	bl	8000490 <__aeabi_f2d>
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <GPSLatitGGA+0x1c0>)
 8002f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	f7fd f94e 	bl	80001d4 <__adddf3>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4a30      	ldr	r2, [pc, #192]	; (8003000 <GPSLatitGGA+0x1c0>)
 8002f3e:	e9c2 3400 	strd	r3, r4, [r2]
    	extra=(float)((latit[5]-48)*10+(latit[6]-48)+(float)((float)(latit[7]-48)/(float)10)+(float)((float)(latit[8]-48)/(float)100));
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002f44:	795b      	ldrb	r3, [r3, #5]
 8002f46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002f56:	799b      	ldrb	r3, [r3, #6]
 8002f58:	3b30      	subs	r3, #48	; 0x30
 8002f5a:	4413      	add	r3, r2
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002f66:	79db      	ldrb	r3, [r3, #7]
 8002f68:	3b30      	subs	r3, #48	; 0x30
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f72:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002f76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <GPSLatitGGA+0x1bc>)
 8002f80:	7a1b      	ldrb	r3, [r3, #8]
 8002f82:	3b30      	subs	r3, #48	; 0x30
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f8c:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003008 <GPSLatitGGA+0x1c8>
 8002f90:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	edc7 7a01 	vstr	s15, [r7, #4]
    	latitude+=(float)((float)extra/((float)6000));
 8002f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fa0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800300c <GPSLatitGGA+0x1cc>
 8002fa4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fa8:	ee16 0a90 	vmov	r0, s13
 8002fac:	f7fd fa70 	bl	8000490 <__aeabi_f2d>
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <GPSLatitGGA+0x1c0>)
 8002fb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4623      	mov	r3, r4
 8002fba:	f7fd f90b 	bl	80001d4 <__adddf3>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <GPSLatitGGA+0x1c0>)
 8002fc4:	e9c2 3400 	strd	r3, r4, [r2]


    	founded=true;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	72fb      	strb	r3, [r7, #11]
    }

    if(founded)
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <GPSLatitGGA+0x1a4>
    	return latitude;
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <GPSLatitGGA+0x1c0>)
 8002fd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	4621      	mov	r1, r4
 8002fdc:	f7fd fab0 	bl	8000540 <__aeabi_d2f>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	e001      	b.n	8002fe8 <GPSLatitGGA+0x1a8>

    return 0.0;
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	ee07 3a90 	vmov	s15, r3



}
 8002fec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000027c 	.word	0x2000027c
 8002ffc:	20000054 	.word	0x20000054
 8003000:	20000040 	.word	0x20000040
 8003004:	42700000 	.word	0x42700000
 8003008:	42c80000 	.word	0x42c80000
 800300c:	45bb8000 	.word	0x45bb8000

08003010 <GPSLongitudeGGA>:

float GPSLongitudeGGA(void)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0

	int commaCount=0;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
    int i=0;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
    int cntLong=0;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]

    while(commaCount<4)
 8003022:	e02b      	b.n	800307c <GPSLongitudeGGA+0x6c>
	{

		if(GprMc[i]==',')
 8003024:	4a5d      	ldr	r2, [pc, #372]	; (800319c <GPSLongitudeGGA+0x18c>)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b2c      	cmp	r3, #44	; 0x2c
 800302e:	d122      	bne.n	8003076 <GPSLongitudeGGA+0x66>
		{
			commaCount++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
        	i++;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]

            if(commaCount==3)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d11c      	bne.n	800307c <GPSLongitudeGGA+0x6c>
            {

            	while(GprMc[i] != ',')
 8003042:	e00e      	b.n	8003062 <GPSLongitudeGGA+0x52>
				{

					lng[cntLong]=GprMc[i];
 8003044:	4a55      	ldr	r2, [pc, #340]	; (800319c <GPSLongitudeGGA+0x18c>)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4413      	add	r3, r2
 800304a:	7819      	ldrb	r1, [r3, #0]
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <GPSLongitudeGGA+0x190>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	460a      	mov	r2, r1
 8003054:	701a      	strb	r2, [r3, #0]
					cntLong++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3301      	adds	r3, #1
 800305a:	607b      	str	r3, [r7, #4]
				    i++;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3301      	adds	r3, #1
 8003060:	60bb      	str	r3, [r7, #8]
            	while(GprMc[i] != ',')
 8003062:	4a4e      	ldr	r2, [pc, #312]	; (800319c <GPSLongitudeGGA+0x18c>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b2c      	cmp	r3, #44	; 0x2c
 800306c:	d1ea      	bne.n	8003044 <GPSLongitudeGGA+0x34>

				}
    			commaCount++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3301      	adds	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e002      	b.n	800307c <GPSLongitudeGGA+0x6c>

           }
		}

		else
		    i++;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
    while(commaCount<4)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b03      	cmp	r3, #3
 8003080:	ddd0      	ble.n	8003024 <GPSLongitudeGGA+0x14>

    }

    bool founded=false;
 8003082:	2300      	movs	r3, #0
 8003084:	70fb      	strb	r3, [r7, #3]

    if(cntLong >= 7)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b06      	cmp	r3, #6
 800308a:	dd72      	ble.n	8003172 <GPSLongitudeGGA+0x162>
    {


    	longitude=(float)(((lng[0]-48)*100 + (lng[1]-48)*10 + (lng[2]-48)));
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <GPSLongitudeGGA+0x190>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	3b30      	subs	r3, #48	; 0x30
 8003092:	2264      	movs	r2, #100	; 0x64
 8003094:	fb02 f103 	mul.w	r1, r2, r3
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <GPSLongitudeGGA+0x190>)
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	18ca      	adds	r2, r1, r3
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <GPSLongitudeGGA+0x190>)
 80030ac:	789b      	ldrb	r3, [r3, #2]
 80030ae:	3b30      	subs	r3, #48	; 0x30
 80030b0:	4413      	add	r3, r2
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ba:	ee17 0a90 	vmov	r0, s15
 80030be:	f7fd f9e7 	bl	8000490 <__aeabi_f2d>
 80030c2:	4603      	mov	r3, r0
 80030c4:	460c      	mov	r4, r1
 80030c6:	4a37      	ldr	r2, [pc, #220]	; (80031a4 <GPSLongitudeGGA+0x194>)
 80030c8:	e9c2 3400 	strd	r3, r4, [r2]
    	longitude+=(float)((float)((lng[3]-48)*10+(lng[4]-48))/(float)60);
 80030cc:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <GPSLongitudeGGA+0x190>)
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	461a      	mov	r2, r3
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <GPSLongitudeGGA+0x190>)
 80030e0:	791b      	ldrb	r3, [r3, #4]
 80030e2:	3b30      	subs	r3, #48	; 0x30
 80030e4:	4413      	add	r3, r2
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ee:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80031a8 <GPSLongitudeGGA+0x198>
 80030f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030f6:	ee16 0a90 	vmov	r0, s13
 80030fa:	f7fd f9c9 	bl	8000490 <__aeabi_f2d>
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <GPSLongitudeGGA+0x194>)
 8003100:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003104:	461a      	mov	r2, r3
 8003106:	4623      	mov	r3, r4
 8003108:	f7fd f864 	bl	80001d4 <__adddf3>
 800310c:	4603      	mov	r3, r0
 800310e:	460c      	mov	r4, r1
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <GPSLongitudeGGA+0x194>)
 8003112:	e9c2 3400 	strd	r3, r4, [r2]

    	longitude += (float)( (float)(((float)(lng[6]-48)/10)+(float)((float)(lng[7]-48)/(float)100))/(float)60);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <GPSLongitudeGGA+0x190>)
 8003118:	799b      	ldrb	r3, [r3, #6]
 800311a:	3b30      	subs	r3, #48	; 0x30
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003124:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003128:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800312c:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <GPSLongitudeGGA+0x190>)
 800312e:	79db      	ldrb	r3, [r3, #7]
 8003130:	3b30      	subs	r3, #48	; 0x30
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800313a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80031ac <GPSLongitudeGGA+0x19c>
 800313e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80031a8 <GPSLongitudeGGA+0x198>
 800314a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800314e:	ee16 0a90 	vmov	r0, s13
 8003152:	f7fd f99d 	bl	8000490 <__aeabi_f2d>
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <GPSLongitudeGGA+0x194>)
 8003158:	e9d3 3400 	ldrd	r3, r4, [r3]
 800315c:	461a      	mov	r2, r3
 800315e:	4623      	mov	r3, r4
 8003160:	f7fd f838 	bl	80001d4 <__adddf3>
 8003164:	4603      	mov	r3, r0
 8003166:	460c      	mov	r4, r1
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <GPSLongitudeGGA+0x194>)
 800316a:	e9c2 3400 	strd	r3, r4, [r2]



    	founded=true;
 800316e:	2301      	movs	r3, #1
 8003170:	70fb      	strb	r3, [r7, #3]
    }

    if(founded)
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <GPSLongitudeGGA+0x17a>
    	return longitude;
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <GPSLongitudeGGA+0x194>)
 800317a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800317e:	4618      	mov	r0, r3
 8003180:	4621      	mov	r1, r4
 8003182:	f7fd f9dd 	bl	8000540 <__aeabi_d2f>
 8003186:	4603      	mov	r3, r0
 8003188:	e001      	b.n	800318e <GPSLongitudeGGA+0x17e>

    return 0.0;
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ee07 3a90 	vmov	s15, r3

}
 8003192:	eeb0 0a67 	vmov.f32	s0, s15
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	2000027c 	.word	0x2000027c
 80031a0:	20000068 	.word	0x20000068
 80031a4:	20000038 	.word	0x20000038
 80031a8:	42700000 	.word	0x42700000
 80031ac:	42c80000 	.word	0x42c80000

080031b0 <GpsSatellite>:

}


int GpsSatellite(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0

	int commaCount=0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
    int i=0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
    int cntLong=0;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]

    while(commaCount<7)
 80031c2:	e02b      	b.n	800321c <GpsSatellite+0x6c>
	{

		if(GprMc[i]==',')
 80031c4:	4a28      	ldr	r2, [pc, #160]	; (8003268 <GpsSatellite+0xb8>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b2c      	cmp	r3, #44	; 0x2c
 80031ce:	d122      	bne.n	8003216 <GpsSatellite+0x66>
		{
			commaCount++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
        	i++;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3301      	adds	r3, #1
 80031da:	60bb      	str	r3, [r7, #8]


            if(commaCount==6)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d11c      	bne.n	800321c <GpsSatellite+0x6c>
            {

            	while(GprMc[i] != ',')
 80031e2:	e00e      	b.n	8003202 <GpsSatellite+0x52>
				{
            		satellite[cntLong]=GprMc[i];
 80031e4:	4a20      	ldr	r2, [pc, #128]	; (8003268 <GpsSatellite+0xb8>)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	7819      	ldrb	r1, [r3, #0]
 80031ec:	4a1f      	ldr	r2, [pc, #124]	; (800326c <GpsSatellite+0xbc>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	460a      	mov	r2, r1
 80031f4:	701a      	strb	r2, [r3, #0]

            		cntLong++;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3301      	adds	r3, #1
 80031fa:	607b      	str	r3, [r7, #4]

            		i++;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	3301      	adds	r3, #1
 8003200:	60bb      	str	r3, [r7, #8]
            	while(GprMc[i] != ',')
 8003202:	4a19      	ldr	r2, [pc, #100]	; (8003268 <GpsSatellite+0xb8>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b2c      	cmp	r3, #44	; 0x2c
 800320c:	d1ea      	bne.n	80031e4 <GpsSatellite+0x34>

				}
            	commaCount++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e002      	b.n	800321c <GpsSatellite+0x6c>

           }
		}

		else
		    i++;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
    while(commaCount<7)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b06      	cmp	r3, #6
 8003220:	ddd0      	ble.n	80031c4 <GpsSatellite+0x14>

    }

    bool founded=false;
 8003222:	2300      	movs	r3, #0
 8003224:	70fb      	strb	r3, [r7, #3]

    if(cntLong == 2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d110      	bne.n	800324e <GpsSatellite+0x9e>
    {

    	satelliteNum=(int)((satellite[0]-48)*10 + (satellite[1]-48)) ;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <GpsSatellite+0xbc>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	461a      	mov	r2, r3
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <GpsSatellite+0xbc>)
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	3b30      	subs	r3, #48	; 0x30
 8003244:	4413      	add	r3, r2
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <GpsSatellite+0xc0>)
 8003248:	6013      	str	r3, [r2, #0]

    	founded=true;
 800324a:	2301      	movs	r3, #1
 800324c:	70fb      	strb	r3, [r7, #3]
    }

    if(founded)
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <GpsSatellite+0xaa>
    	return satelliteNum;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <GpsSatellite+0xc0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e000      	b.n	800325c <GpsSatellite+0xac>

    return 0;
 800325a:	2300      	movs	r3, #0


}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	2000027c 	.word	0x2000027c
 800326c:	20000270 	.word	0x20000270
 8003270:	20000034 	.word	0x20000034

08003274 <GpsAltitude>:

float GpsAltitude(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0


	int commaCount=0;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
    int i=0;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
    int cntLong=0;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]

    while(commaCount<9)
 8003286:	e02b      	b.n	80032e0 <GpsAltitude+0x6c>
	{

		if(GprMc[i]==',')
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <GpsAltitude+0x100>)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b2c      	cmp	r3, #44	; 0x2c
 8003292:	d122      	bne.n	80032da <GpsAltitude+0x66>
		{
			commaCount++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
        	i++;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3301      	adds	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]


            if(commaCount==8)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11c      	bne.n	80032e0 <GpsAltitude+0x6c>
            {

            	while(GprMc[i] != ',')
 80032a6:	e00e      	b.n	80032c6 <GpsAltitude+0x52>
				{
            		altitude[cntLong]=GprMc[i];
 80032a8:	4a32      	ldr	r2, [pc, #200]	; (8003374 <GpsAltitude+0x100>)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4413      	add	r3, r2
 80032ae:	7819      	ldrb	r1, [r3, #0]
 80032b0:	4a31      	ldr	r2, [pc, #196]	; (8003378 <GpsAltitude+0x104>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	460a      	mov	r2, r1
 80032b8:	701a      	strb	r2, [r3, #0]

            		cntLong++;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3301      	adds	r3, #1
 80032be:	607b      	str	r3, [r7, #4]

            		i++;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
            	while(GprMc[i] != ',')
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <GpsAltitude+0x100>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b2c      	cmp	r3, #44	; 0x2c
 80032d0:	d1ea      	bne.n	80032a8 <GpsAltitude+0x34>

				}
            	commaCount++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e002      	b.n	80032e0 <GpsAltitude+0x6c>

           }
		}

		else
		    i++;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3301      	adds	r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
    while(commaCount<9)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	ddd0      	ble.n	8003288 <GpsAltitude+0x14>

    }

    bool founded=false;
 80032e6:	2300      	movs	r3, #0
 80032e8:	70fb      	strb	r3, [r7, #3]

    if(cntLong == 6)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b06      	cmp	r3, #6
 80032ee:	d130      	bne.n	8003352 <GpsAltitude+0xde>
    {

    	altitudeValue=(float)((altitude[0]-48)*1000 + (altitude[1]-48)*100 + (altitude[2]-48)*10 + (altitude[3]-48) +(float)(altitude[5]-48)/10)  ;
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <GpsAltitude+0x104>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	3b30      	subs	r3, #48	; 0x30
 80032f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032fa:	fb02 f203 	mul.w	r2, r2, r3
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <GpsAltitude+0x104>)
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	3b30      	subs	r3, #48	; 0x30
 8003304:	2164      	movs	r1, #100	; 0x64
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	18d1      	adds	r1, r2, r3
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <GpsAltitude+0x104>)
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	18ca      	adds	r2, r1, r3
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <GpsAltitude+0x104>)
 8003320:	78db      	ldrb	r3, [r3, #3]
 8003322:	3b30      	subs	r3, #48	; 0x30
 8003324:	4413      	add	r3, r2
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <GpsAltitude+0x104>)
 8003330:	795b      	ldrb	r3, [r3, #5]
 8003332:	3b30      	subs	r3, #48	; 0x30
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800333c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8003340:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <GpsAltitude+0x108>)
 800334a:	edc3 7a00 	vstr	s15, [r3]
    	founded=true;
 800334e:	2301      	movs	r3, #1
 8003350:	70fb      	strb	r3, [r7, #3]
    }

    if(founded)
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <GpsAltitude+0xea>
    	return altitudeValue;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <GpsAltitude+0x108>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	e001      	b.n	8003362 <GpsAltitude+0xee>

    return 0;
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ee07 3a90 	vmov	s15, r3

}
 8003366:	eeb0 0a67 	vmov.f32	s0, s15
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	2000027c 	.word	0x2000027c
 8003378:	20000274 	.word	0x20000274
 800337c:	20000048 	.word	0x20000048

08003380 <HAL_UART_RxCpltCallback>:


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
    //This stage will triggered by GPSDatas Array.If array goes up 500 element(fully),interrupt will occur.
	GPSDataCame=true;
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_UART_RxCpltCallback+0x1c>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]

}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000060 	.word	0x20000060

080033a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a4:	f7fd fa9c 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033a8:	f000 f84e 	bl	8003448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ac:	f000 f900 	bl	80035b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80033b0:	f000 f8de 	bl	8003570 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033b4:	f000 f8b2 	bl	800351c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart2  , (uint8_t *)GpsData           , ArrayLenght);
 80033b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033bc:	491b      	ldr	r1, [pc, #108]	; (800342c <main+0x8c>)
 80033be:	481c      	ldr	r0, [pc, #112]	; (8003430 <main+0x90>)
 80033c0:	f7fe fdc6 	bl	8001f50 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(GPSDataCame)
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <main+0x94>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0fb      	beq.n	80033c4 <main+0x24>
	  {

	 		 //There are 2 different NMEA sentences. 1-)GPGGA 2-)GPRMC You can use one of them. But in GPGGA sentences,there are satellites datas,hours etc.
	         //İf you want to use Gprmc sentences,change here "TakeGpsGprmc()";
	 		  if(TakeGpsGPGGA())
 80033cc:	f7ff fc9e 	bl	8002d0c <TakeGpsGPGGA>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <main+0x6a>

	 		  {
	 			   latit=GPSLatitGGA();
 80033d6:	f7ff fd33 	bl	8002e40 <GPSLatitGGA>
 80033da:	eef0 7a40 	vmov.f32	s15, s0
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <main+0x98>)
 80033e0:	edc3 7a00 	vstr	s15, [r3]
	 			   longit=GPSLongitudeGGA();
 80033e4:	f7ff fe14 	bl	8003010 <GPSLongitudeGGA>
 80033e8:	eef0 7a40 	vmov.f32	s15, s0
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <main+0x9c>)
 80033ee:	edc3 7a00 	vstr	s15, [r3]
	 	           altit=GpsAltitude();
 80033f2:	f7ff ff3f 	bl	8003274 <GpsAltitude>
 80033f6:	eef0 7a40 	vmov.f32	s15, s0
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <main+0xa0>)
 80033fc:	edc3 7a00 	vstr	s15, [r3]
	 		       satelliteNumber=GpsSatellite();
 8003400:	f7ff fed6 	bl	80031b0 <GpsSatellite>
 8003404:	4602      	mov	r2, r0
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <main+0xa4>)
 8003408:	601a      	str	r2, [r3, #0]
	 		  }
	 		  GPSDataCame=false;
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <main+0x94>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
	 		  memset(GpsData,'\0',ArrayLenght);
 8003410:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003414:	2100      	movs	r1, #0
 8003416:	4805      	ldr	r0, [pc, #20]	; (800342c <main+0x8c>)
 8003418:	f000 fa4a 	bl	80038b0 <memset>

	 		  HAL_UART_Receive_DMA(&huart2, (uint8_t *)GpsData, ArrayLenght);
 800341c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003420:	4902      	ldr	r1, [pc, #8]	; (800342c <main+0x8c>)
 8003422:	4803      	ldr	r0, [pc, #12]	; (8003430 <main+0x90>)
 8003424:	f7fe fd94 	bl	8001f50 <HAL_UART_Receive_DMA>
	  if(GPSDataCame)
 8003428:	e7cc      	b.n	80033c4 <main+0x24>
 800342a:	bf00      	nop
 800342c:	2000007c 	.word	0x2000007c
 8003430:	20000364 	.word	0x20000364
 8003434:	20000060 	.word	0x20000060
 8003438:	20000054 	.word	0x20000054
 800343c:	20000050 	.word	0x20000050
 8003440:	20000058 	.word	0x20000058
 8003444:	2000005c 	.word	0x2000005c

08003448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b094      	sub	sp, #80	; 0x50
 800344c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800344e:	f107 0320 	add.w	r3, r7, #32
 8003452:	2230      	movs	r2, #48	; 0x30
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fa2a 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <SystemClock_Config+0xcc>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <SystemClock_Config+0xcc>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	6413      	str	r3, [r2, #64]	; 0x40
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <SystemClock_Config+0xcc>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003488:	2300      	movs	r3, #0
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <SystemClock_Config+0xd0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a21      	ldr	r2, [pc, #132]	; (8003518 <SystemClock_Config+0xd0>)
 8003492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <SystemClock_Config+0xd0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034a4:	2302      	movs	r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034ac:	2310      	movs	r3, #16
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034b0:	2302      	movs	r3, #2
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034b8:	2308      	movs	r3, #8
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80034bc:	23a8      	movs	r3, #168	; 0xa8
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034c0:	2302      	movs	r3, #2
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034c4:	2304      	movs	r3, #4
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034c8:	f107 0320 	add.w	r3, r7, #32
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe f8b5 	bl	800163c <HAL_RCC_OscConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034d8:	f000 f892 	bl	8003600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034dc:	230f      	movs	r3, #15
 80034de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034e0:	2302      	movs	r3, #2
 80034e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	2105      	movs	r1, #5
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fb0e 	bl	8001b1c <HAL_RCC_ClockConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003506:	f000 f87b 	bl	8003600 <Error_Handler>
  }
}
 800350a:	bf00      	nop
 800350c:	3750      	adds	r7, #80	; 0x50
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000

0800351c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <MX_USART2_UART_Init+0x50>)
 8003524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800352c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003542:	220c      	movs	r2, #12
 8003544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003552:	4805      	ldr	r0, [pc, #20]	; (8003568 <MX_USART2_UART_Init+0x4c>)
 8003554:	f7fe fcae 	bl	8001eb4 <HAL_UART_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800355e:	f000 f84f 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000364 	.word	0x20000364
 800356c:	40004400 	.word	0x40004400

08003570 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <MX_DMA_Init+0x3c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <MX_DMA_Init+0x3c>)
 8003580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <MX_DMA_Init+0x3c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	2010      	movs	r0, #16
 8003598:	f7fd faef 	bl	8000b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800359c:	2010      	movs	r0, #16
 800359e:	f7fd fb08 	bl	8000bb2 <HAL_NVIC_EnableIRQ>

}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800

080035b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <MX_GPIO_Init+0x4c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <MX_GPIO_Init+0x4c>)
 80035c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <MX_GPIO_Init+0x4c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <MX_GPIO_Init+0x4c>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a08      	ldr	r2, [pc, #32]	; (80035fc <MX_GPIO_Init+0x4c>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <MX_GPIO_Init+0x4c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]

}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_MspInit+0x4c>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_MspInit+0x4c>)
 8003620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003624:	6453      	str	r3, [r2, #68]	; 0x44
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_MspInit+0x4c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_MspInit+0x4c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x4c>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x4c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a34      	ldr	r2, [pc, #208]	; (8003750 <HAL_UART_MspInit+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d161      	bne.n	8003746 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	4b33      	ldr	r3, [pc, #204]	; (8003754 <HAL_UART_MspInit+0xf4>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a32      	ldr	r2, [pc, #200]	; (8003754 <HAL_UART_MspInit+0xf4>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_UART_MspInit+0xf4>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_UART_MspInit+0xf4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_UART_MspInit+0xf4>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_UART_MspInit+0xf4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036ba:	230c      	movs	r3, #12
 80036bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c6:	2303      	movs	r3, #3
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036ca:	2307      	movs	r3, #7
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	4820      	ldr	r0, [pc, #128]	; (8003758 <HAL_UART_MspInit+0xf8>)
 80036d6:	f7fd fe17 	bl	8001308 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_UART_MspInit+0xfc>)
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <HAL_UART_MspInit+0x100>)
 80036de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_UART_MspInit+0xfc>)
 80036e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e8:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_UART_MspInit+0xfc>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_UART_MspInit+0xfc>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_UART_MspInit+0xfc>)
 80036f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_UART_MspInit+0xfc>)
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_UART_MspInit+0xfc>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_UART_MspInit+0xfc>)
 800370a:	2200      	movs	r2, #0
 800370c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_UART_MspInit+0xfc>)
 8003710:	2200      	movs	r2, #0
 8003712:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_UART_MspInit+0xfc>)
 8003716:	2200      	movs	r2, #0
 8003718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800371a:	4810      	ldr	r0, [pc, #64]	; (800375c <HAL_UART_MspInit+0xfc>)
 800371c:	f7fd fa64 	bl	8000be8 <HAL_DMA_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003726:	f7ff ff6b 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <HAL_UART_MspInit+0xfc>)
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_UART_MspInit+0xfc>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	2026      	movs	r0, #38	; 0x26
 800373c:	f7fd fa1d 	bl	8000b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003740:	2026      	movs	r0, #38	; 0x26
 8003742:	f7fd fa36 	bl	8000bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003746:	bf00      	nop
 8003748:	3728      	adds	r7, #40	; 0x28
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40004400 	.word	0x40004400
 8003754:	40023800 	.word	0x40023800
 8003758:	40020000 	.word	0x40020000
 800375c:	200002ec 	.word	0x200002ec
 8003760:	40026088 	.word	0x40026088

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <HardFault_Handler+0x4>

08003778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800377c:	e7fe      	b.n	800377c <MemManage_Handler+0x4>

0800377e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003782:	e7fe      	b.n	8003782 <BusFault_Handler+0x4>

08003784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <UsageFault_Handler+0x4>

0800378a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b8:	f7fd f8e4 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}

080037c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <DMA1_Stream5_IRQHandler+0x10>)
 80037c6:	f7fd fb37 	bl	8000e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200002ec 	.word	0x200002ec

080037d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <USART2_IRQHandler+0x10>)
 80037da:	f7fe fc39 	bl	8002050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000364 	.word	0x20000364

080037e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <SystemInit+0x28>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <SystemInit+0x28>)
 80037f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SystemInit+0x28>)
 80037fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003802:	609a      	str	r2, [r3, #8]
#endif
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800384c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800381a:	e003      	b.n	8003824 <LoopCopyDataInit>

0800381c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800381e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003822:	3104      	adds	r1, #4

08003824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003824:	480b      	ldr	r0, [pc, #44]	; (8003854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800382a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800382c:	d3f6      	bcc.n	800381c <CopyDataInit>
  ldr  r2, =_sbss
 800382e:	4a0b      	ldr	r2, [pc, #44]	; (800385c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003830:	e002      	b.n	8003838 <LoopFillZerobss>

08003832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003834:	f842 3b04 	str.w	r3, [r2], #4

08003838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800383a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800383c:	d3f9      	bcc.n	8003832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800383e:	f7ff ffd3 	bl	80037e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003842:	f000 f811 	bl	8003868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003846:	f7ff fdab 	bl	80033a0 <main>
  bx  lr    
 800384a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800384c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003850:	08003908 	.word	0x08003908
  ldr  r0, =_sdata
 8003854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003858:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800385c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003860:	200003a4 	.word	0x200003a4

08003864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC_IRQHandler>
	...

08003868 <__libc_init_array>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	4e0d      	ldr	r6, [pc, #52]	; (80038a0 <__libc_init_array+0x38>)
 800386c:	4c0d      	ldr	r4, [pc, #52]	; (80038a4 <__libc_init_array+0x3c>)
 800386e:	1ba4      	subs	r4, r4, r6
 8003870:	10a4      	asrs	r4, r4, #2
 8003872:	2500      	movs	r5, #0
 8003874:	42a5      	cmp	r5, r4
 8003876:	d109      	bne.n	800388c <__libc_init_array+0x24>
 8003878:	4e0b      	ldr	r6, [pc, #44]	; (80038a8 <__libc_init_array+0x40>)
 800387a:	4c0c      	ldr	r4, [pc, #48]	; (80038ac <__libc_init_array+0x44>)
 800387c:	f000 f820 	bl	80038c0 <_init>
 8003880:	1ba4      	subs	r4, r4, r6
 8003882:	10a4      	asrs	r4, r4, #2
 8003884:	2500      	movs	r5, #0
 8003886:	42a5      	cmp	r5, r4
 8003888:	d105      	bne.n	8003896 <__libc_init_array+0x2e>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003890:	4798      	blx	r3
 8003892:	3501      	adds	r5, #1
 8003894:	e7ee      	b.n	8003874 <__libc_init_array+0xc>
 8003896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800389a:	4798      	blx	r3
 800389c:	3501      	adds	r5, #1
 800389e:	e7f2      	b.n	8003886 <__libc_init_array+0x1e>
 80038a0:	08003900 	.word	0x08003900
 80038a4:	08003900 	.word	0x08003900
 80038a8:	08003900 	.word	0x08003900
 80038ac:	08003904 	.word	0x08003904

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <_init>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr

080038cc <_fini>:
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	bf00      	nop
 80038d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d2:	bc08      	pop	{r3}
 80038d4:	469e      	mov	lr, r3
 80038d6:	4770      	bx	lr
