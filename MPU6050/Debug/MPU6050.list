
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004c50  08004c50  00014c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d08  08004d08  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d10  08004d10  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08004d18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000108  08004e1c  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004e1c  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbb8  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a7  00000000  00000000  0002ccec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000210b9  00000000  00000000  0002fed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009825  00000000  00000000  00050f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9f5b  00000000  00000000  0005a7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003864  00000000  00000000  00124784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c38 	.word	0x08004c38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	08004c38 	.word	0x08004c38

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f94d 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f003 f9c8 	bl	8004208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f965 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f92d 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000098 	.word	0x20000098
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000148 	.word	0x20000148

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000148 	.word	0x20000148

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_Delay+0x40>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000004 	.word	0x20000004

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e16b      	b.n	8001480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 815a 	bne.w	800147a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d00b      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011da:	2b11      	cmp	r3, #17
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0xfc>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b4 	beq.w	800147a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5e      	ldr	r2, [pc, #376]	; (8001494 <HAL_GPIO_Init+0x308>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x310>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20a>
 8001392:	2307      	movs	r3, #7
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x30c>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x330>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae90 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021c00 	.word	0x40021c00
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e11f      	b.n	8001712 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f002 feb6 	bl	8004258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001524:	f001 fbb6 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8001528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a7b      	ldr	r2, [pc, #492]	; (800171c <HAL_I2C_Init+0x25c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d807      	bhi.n	8001544 <HAL_I2C_Init+0x84>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <HAL_I2C_Init+0x260>)
 8001538:	4293      	cmp	r3, r2
 800153a:	bf94      	ite	ls
 800153c:	2301      	movls	r3, #1
 800153e:	2300      	movhi	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	e006      	b.n	8001552 <HAL_I2C_Init+0x92>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a77      	ldr	r2, [pc, #476]	; (8001724 <HAL_I2C_Init+0x264>)
 8001548:	4293      	cmp	r3, r2
 800154a:	bf94      	ite	ls
 800154c:	2301      	movls	r3, #1
 800154e:	2300      	movhi	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0db      	b.n	8001712 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a72      	ldr	r2, [pc, #456]	; (8001728 <HAL_I2C_Init+0x268>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a64      	ldr	r2, [pc, #400]	; (800171c <HAL_I2C_Init+0x25c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d802      	bhi.n	8001594 <HAL_I2C_Init+0xd4>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	e009      	b.n	80015a8 <HAL_I2C_Init+0xe8>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	4a63      	ldr	r2, [pc, #396]	; (800172c <HAL_I2C_Init+0x26c>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	3301      	adds	r3, #1
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4956      	ldr	r1, [pc, #344]	; (800171c <HAL_I2C_Init+0x25c>)
 80015c4:	428b      	cmp	r3, r1
 80015c6:	d80d      	bhi.n	80015e4 <HAL_I2C_Init+0x124>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e59      	subs	r1, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015dc:	2b04      	cmp	r3, #4
 80015de:	bf38      	it	cc
 80015e0:	2304      	movcc	r3, #4
 80015e2:	e04f      	b.n	8001684 <HAL_I2C_Init+0x1c4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_I2C_Init+0x150>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	e012      	b.n	8001636 <HAL_I2C_Init+0x176>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	0099      	lsls	r1, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Init+0x17e>
 800163a:	2301      	movs	r3, #1
 800163c:	e022      	b.n	8001684 <HAL_I2C_Init+0x1c4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10e      	bne.n	8001664 <HAL_I2C_Init+0x1a4>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e58      	subs	r0, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	440b      	add	r3, r1
 8001654:	fbb0 f3f3 	udiv	r3, r0, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001662:	e00f      	b.n	8001684 <HAL_I2C_Init+0x1c4>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	0099      	lsls	r1, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	6809      	ldr	r1, [r1, #0]
 8001688:	4313      	orrs	r3, r2
 800168a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6911      	ldr	r1, [r2, #16]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68d2      	ldr	r2, [r2, #12]
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	000186a0 	.word	0x000186a0
 8001720:	001e847f 	.word	0x001e847f
 8001724:	003d08ff 	.word	0x003d08ff
 8001728:	431bde83 	.word	0x431bde83
 800172c:	10624dd3 	.word	0x10624dd3

08001730 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4603      	mov	r3, r0
 8001740:	817b      	strh	r3, [r7, #10]
 8001742:	460b      	mov	r3, r1
 8001744:	813b      	strh	r3, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800174a:	f7ff fbdf 	bl	8000f0c <HAL_GetTick>
 800174e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b20      	cmp	r3, #32
 800175a:	f040 80d9 	bne.w	8001910 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2319      	movs	r3, #25
 8001764:	2201      	movs	r2, #1
 8001766:	496d      	ldr	r1, [pc, #436]	; (800191c <HAL_I2C_Mem_Write+0x1ec>)
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fc7b 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
 8001776:	e0cc      	b.n	8001912 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Mem_Write+0x56>
 8001782:	2302      	movs	r3, #2
 8001784:	e0c5      	b.n	8001912 <HAL_I2C_Mem_Write+0x1e2>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d007      	beq.n	80017ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2221      	movs	r2, #33	; 0x21
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a3a      	ldr	r2, [r7, #32]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <HAL_I2C_Mem_Write+0x1f0>)
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ee:	88f8      	ldrh	r0, [r7, #6]
 80017f0:	893a      	ldrh	r2, [r7, #8]
 80017f2:	8979      	ldrh	r1, [r7, #10]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4603      	mov	r3, r0
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fab6 	bl	8001d70 <I2C_RequestMemoryWrite>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d052      	beq.n	80018b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e081      	b.n	8001912 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fcfc 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00d      	beq.n	800183a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b04      	cmp	r3, #4
 8001824:	d107      	bne.n	8001836 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06b      	b.n	8001912 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d11b      	bne.n	80018b0 <HAL_I2C_Mem_Write+0x180>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d017      	beq.n	80018b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1aa      	bne.n	800180e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fce8 	bl	8002292 <I2C_WaitOnBTFFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00d      	beq.n	80018e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d107      	bne.n	80018e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e016      	b.n	8001912 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	00100002 	.word	0x00100002
 8001920:	ffff0000 	.word	0xffff0000

08001924 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4603      	mov	r3, r0
 8001934:	817b      	strh	r3, [r7, #10]
 8001936:	460b      	mov	r3, r1
 8001938:	813b      	strh	r3, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800193e:	f7ff fae5 	bl	8000f0c <HAL_GetTick>
 8001942:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b20      	cmp	r3, #32
 800194e:	f040 8208 	bne.w	8001d62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2319      	movs	r3, #25
 8001958:	2201      	movs	r2, #1
 800195a:	497b      	ldr	r1, [pc, #492]	; (8001b48 <HAL_I2C_Mem_Read+0x224>)
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fb81 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
 800196a:	e1fb      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_I2C_Mem_Read+0x56>
 8001976:	2302      	movs	r3, #2
 8001978:	e1f4      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d007      	beq.n	80019a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2222      	movs	r2, #34	; 0x22
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2240      	movs	r2, #64	; 0x40
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <HAL_I2C_Mem_Read+0x228>)
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e2:	88f8      	ldrh	r0, [r7, #6]
 80019e4:	893a      	ldrh	r2, [r7, #8]
 80019e6:	8979      	ldrh	r1, [r7, #10]
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fa50 	bl	8001e98 <I2C_RequestMemoryRead>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1b0      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d113      	bne.n	8001a32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e184      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d11b      	bne.n	8001a72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e164      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d11b      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	e144      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ac8:	e138      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	f200 80f1 	bhi.w	8001cb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d123      	bne.n	8001b24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 fc17 	bl	8002314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e139      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b22:	e10b      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d14e      	bne.n	8001bca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b32:	2200      	movs	r2, #0
 8001b34:	4906      	ldr	r1, [pc, #24]	; (8001b50 <HAL_I2C_Mem_Read+0x22c>)
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa94 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e10e      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
 8001b46:	bf00      	nop
 8001b48:	00100002 	.word	0x00100002
 8001b4c:	ffff0000 	.word	0xffff0000
 8001b50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc8:	e0b8      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4966      	ldr	r1, [pc, #408]	; (8001d6c <HAL_I2C_Mem_Read+0x448>)
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fa45 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0bf      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	494f      	ldr	r1, [pc, #316]	; (8001d6c <HAL_I2C_Mem_Read+0x448>)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 fa17 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e091      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb4:	e042      	b.n	8001d3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 fb2a 	bl	8002314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e04c      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d118      	bne.n	8001d3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f47f aec2 	bne.w	8001aca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	00010004 	.word	0x00010004

08001d70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	817b      	strh	r3, [r7, #10]
 8001d82:	460b      	mov	r3, r1
 8001d84:	813b      	strh	r3, [r7, #8]
 8001d86:	4613      	mov	r3, r2
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f95c 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e05f      	b.n	8001e8c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	6a3a      	ldr	r2, [r7, #32]
 8001de0:	492c      	ldr	r1, [pc, #176]	; (8001e94 <I2C_RequestMemoryWrite+0x124>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f995 	bl	8002112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e04c      	b.n	8001e8c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9ff 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e02b      	b.n	8001e8c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	e021      	b.n	8001e8a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e46:	893b      	ldrh	r3, [r7, #8]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e56:	6a39      	ldr	r1, [r7, #32]
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f9d9 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d107      	bne.n	8001e7c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e005      	b.n	8001e8c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e80:	893b      	ldrh	r3, [r7, #8]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	00010002 	.word	0x00010002

08001e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f8c0 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00c      	beq.n	8001f04 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0a9      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f04:	897b      	ldrh	r3, [r7, #10]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	6a3a      	ldr	r2, [r7, #32]
 8001f18:	4951      	ldr	r1, [pc, #324]	; (8002060 <I2C_RequestMemoryRead+0x1c8>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f8f9 	bl	8002112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e096      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	6a39      	ldr	r1, [r7, #32]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f963 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d107      	bne.n	8001f68 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e075      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	e021      	b.n	8001fc2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	6a39      	ldr	r1, [r7, #32]
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f93d 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00d      	beq.n	8001fb8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d107      	bne.n	8001fb4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04f      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb8:	893b      	ldrh	r3, [r7, #8]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f922 	bl	8002210 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d107      	bne.n	8001fea <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e034      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	2200      	movs	r2, #0
 8002006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f82a 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e013      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002030:	897b      	ldrh	r3, [r7, #10]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	4906      	ldr	r1, [pc, #24]	; (8002060 <I2C_RequestMemoryRead+0x1c8>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f863 	bl	8002112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	00010002 	.word	0x00010002

08002064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002074:	e025      	b.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d021      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7fe ff45 	bl	8000f0c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d116      	bne.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e023      	b.n	800210a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10d      	bne.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4013      	ands	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf0c      	ite	eq
 80020de:	2301      	moveq	r3, #1
 80020e0:	2300      	movne	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	e00c      	b.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4013      	ands	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d0b6      	beq.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002120:	e051      	b.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002130:	d123      	bne.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800214a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e046      	b.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d021      	beq.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002182:	f7fe fec3 	bl	8000f0c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d302      	bcc.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d116      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e020      	b.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10c      	bne.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4013      	ands	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e00b      	b.n	8002202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	43da      	mvns	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d18d      	bne.n	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221c:	e02d      	b.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f8ce 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e02d      	b.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d021      	beq.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7fe fe69 	bl	8000f0c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d116      	bne.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0220 	orr.w	r2, r3, #32
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e007      	b.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b80      	cmp	r3, #128	; 0x80
 8002286:	d1ca      	bne.n	800221e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800229e:	e02d      	b.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f88d 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e02d      	b.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d021      	beq.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b8:	f7fe fe28 	bl	8000f0c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d302      	bcc.n	80022ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d1ca      	bne.n	80022a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002320:	e042      	b.n	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b10      	cmp	r3, #16
 800232e:	d119      	bne.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0210 	mvn.w	r2, #16
 8002338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e029      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7fe fdd2 	bl	8000f0c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d1b5      	bne.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d6:	d11b      	bne.n	8002410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e25b      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d075      	beq.n	800252a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243e:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00c      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4ba0      	ldr	r3, [pc, #640]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	2b08      	cmp	r3, #8
 8002454:	d112      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b9d      	ldr	r3, [pc, #628]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b99      	ldr	r3, [pc, #612]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d157      	bne.n	8002528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e236      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x74>
 8002486:	4b91      	ldr	r3, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a90      	ldr	r2, [pc, #576]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a8a      	ldr	r2, [pc, #552]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a87      	ldr	r2, [pc, #540]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 80024b8:	4b84      	ldr	r3, [pc, #528]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a83      	ldr	r2, [pc, #524]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a80      	ldr	r2, [pc, #512]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fd18 	bl	8000f0c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fd14 	bl	8000f0c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1fb      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xc0>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fd04 	bl	8000f0c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fd00 	bl	8000f0c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1e7      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b6c      	ldr	r3, [pc, #432]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0xe8>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002536:	4b65      	ldr	r3, [pc, #404]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b62      	ldr	r3, [pc, #392]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1bb      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4952      	ldr	r1, [pc, #328]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <HAL_RCC_OscConfig+0x2b0>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fcb9 	bl	8000f0c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe fcb5 	bl	8000f0c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e19c      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4940      	ldr	r1, [pc, #256]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0x2b0>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fc98 	bl	8000f0c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e0:	f7fe fc94 	bl	8000f0c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e17b      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d030      	beq.n	800266c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_OscConfig+0x2b4>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fc78 	bl	8000f0c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe fc74 	bl	8000f0c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e15b      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x200>
 800263e:	e015      	b.n	800266c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_OscConfig+0x2b4>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fc61 	bl	8000f0c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fc5d 	bl	8000f0c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e144      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a0 	beq.w	80027ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCC_OscConfig+0x2ac>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x2b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_RCC_OscConfig+0x2b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_RCC_OscConfig+0x2b8>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fc23 	bl	8000f0c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e011      	b.n	80026ee <HAL_RCC_OscConfig+0x2ce>
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	42470000 	.word	0x42470000
 80026d4:	42470e80 	.word	0x42470e80
 80026d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fc16 	bl	8000f0c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0fd      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x4d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x2f0>
 8002702:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a7c      	ldr	r2, [pc, #496]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	e01c      	b.n	800274a <HAL_RCC_OscConfig+0x32a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0x312>
 8002718:	4b77      	ldr	r3, [pc, #476]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	e00b      	b.n	800274a <HAL_RCC_OscConfig+0x32a>
 8002732:	4b71      	ldr	r3, [pc, #452]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a70      	ldr	r2, [pc, #448]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b6e      	ldr	r3, [pc, #440]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a6d      	ldr	r2, [pc, #436]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d015      	beq.n	800277e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002752:	f7fe fbdb 	bl	8000f0c <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe fbd7 	bl	8000f0c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0bc      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ee      	beq.n	800275a <HAL_RCC_OscConfig+0x33a>
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fe fbc5 	bl	8000f0c <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fbc1 	bl	8000f0c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0a6      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4b52      	ldr	r3, [pc, #328]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8092 	beq.w	80028e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c4:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d05c      	beq.n	800288a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d141      	bne.n	800285c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d8:	4b48      	ldr	r3, [pc, #288]	; (80028fc <HAL_RCC_OscConfig+0x4dc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fb95 	bl	8000f0c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fb91 	bl	8000f0c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e078      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	019b      	lsls	r3, r3, #6
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	061b      	lsls	r3, r3, #24
 8002828:	4933      	ldr	r1, [pc, #204]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282e:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_RCC_OscConfig+0x4dc>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fb6a 	bl	8000f0c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fb66 	bl	8000f0c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04d      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x41c>
 800285a:	e045      	b.n	80028e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x4dc>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fb53 	bl	8000f0c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fb4f 	bl	8000f0c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e036      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x44a>
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e029      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_RCC_OscConfig+0x4d8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d11c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d115      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d106      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470060 	.word	0x42470060

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cc      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90c      	bls.n	800293c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a58      	ldr	r2, [pc, #352]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800295e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a52      	ldr	r2, [pc, #328]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d044      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e067      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4934      	ldr	r1, [pc, #208]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fa8c 	bl	8000f0c <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fa88 	bl	8000f0c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20c      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f9ec 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08004ca8 	.word	0x08004ca8
 8002ac4:	20000098 	.word	0x20000098
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	2300      	movs	r3, #0
 8002adc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d007      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x32>
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d008      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x38>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 80b4 	bne.w	8002c60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b5e      	ldr	r3, [pc, #376]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002afa:	60bb      	str	r3, [r7, #8]
       break;
 8002afc:	e0b3      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b00:	60bb      	str	r3, [r7, #8]
      break;
 8002b02:	e0b0      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d04a      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	f04f 0400 	mov.w	r4, #0
 8002b24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	ea03 0501 	and.w	r5, r3, r1
 8002b30:	ea04 0602 	and.w	r6, r4, r2
 8002b34:	4629      	mov	r1, r5
 8002b36:	4632      	mov	r2, r6
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	f04f 0400 	mov.w	r4, #0
 8002b40:	0154      	lsls	r4, r2, #5
 8002b42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b46:	014b      	lsls	r3, r1, #5
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	1b49      	subs	r1, r1, r5
 8002b4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	0194      	lsls	r4, r2, #6
 8002b5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b60:	018b      	lsls	r3, r1, #6
 8002b62:	1a5b      	subs	r3, r3, r1
 8002b64:	eb64 0402 	sbc.w	r4, r4, r2
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	00e2      	lsls	r2, r4, #3
 8002b72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b76:	00d9      	lsls	r1, r3, #3
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	195b      	adds	r3, r3, r5
 8002b7e:	eb44 0406 	adc.w	r4, r4, r6
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	0262      	lsls	r2, r4, #9
 8002b8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b90:	0259      	lsls	r1, r3, #9
 8002b92:	460b      	mov	r3, r1
 8002b94:	4614      	mov	r4, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	4621      	mov	r1, r4
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	f7fd ffcc 	bl	8000b40 <__aeabi_uldivmod>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e049      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	ea03 0501 	and.w	r5, r3, r1
 8002bc6:	ea04 0602 	and.w	r6, r4, r2
 8002bca:	4629      	mov	r1, r5
 8002bcc:	4632      	mov	r2, r6
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0154      	lsls	r4, r2, #5
 8002bd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bdc:	014b      	lsls	r3, r1, #5
 8002bde:	4619      	mov	r1, r3
 8002be0:	4622      	mov	r2, r4
 8002be2:	1b49      	subs	r1, r1, r5
 8002be4:	eb62 0206 	sbc.w	r2, r2, r6
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f04f 0400 	mov.w	r4, #0
 8002bf0:	0194      	lsls	r4, r2, #6
 8002bf2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	1a5b      	subs	r3, r3, r1
 8002bfa:	eb64 0402 	sbc.w	r4, r4, r2
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	00e2      	lsls	r2, r4, #3
 8002c08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c0c:	00d9      	lsls	r1, r3, #3
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	195b      	adds	r3, r3, r5
 8002c14:	eb44 0406 	adc.w	r4, r4, r6
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	02a2      	lsls	r2, r4, #10
 8002c22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c26:	0299      	lsls	r1, r3, #10
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	4621      	mov	r1, r4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	f7fd ff81 	bl	8000b40 <__aeabi_uldivmod>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	60bb      	str	r3, [r7, #8]
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c62:	60bb      	str	r3, [r7, #8]
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	68bb      	ldr	r3, [r7, #8]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400
 8002c78:	007a1200 	.word	0x007a1200

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000098 	.word	0x20000098

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08004cb8 	.word	0x08004cb8

08002cbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e01d      	b.n	8002d0a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f001 fb00 	bl	80042e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 fa02 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fbb7 	bl	8003498 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d007      	beq.n	8002d4c <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d122      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d11b      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f06f 0202 	mvn.w	r2, #2
 8002d82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f994 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002d9e:	e005      	b.n	8002dac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f986 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f997 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d122      	bne.n	8002e06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d11b      	bne.n	8002e06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0204 	mvn.w	r2, #4
 8002dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f96a 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002df2:	e005      	b.n	8002e00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f95c 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f96d 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d122      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11b      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0208 	mvn.w	r2, #8
 8002e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f940 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002e46:	e005      	b.n	8002e54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f932 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f943 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d122      	bne.n	8002eae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d11b      	bne.n	8002eae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0210 	mvn.w	r2, #16
 8002e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2208      	movs	r2, #8
 8002e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f916 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002e9a:	e005      	b.n	8002ea8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f908 	bl	80030b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f919 	bl	80030da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10e      	bne.n	8002eda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0201 	mvn.w	r2, #1
 8002ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8e2 	bl	800309e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d10e      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fb75 	bl	80035f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d10e      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d107      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f8de 	bl	80030ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d10e      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0220 	mvn.w	r2, #32
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fb3f 	bl	80035dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e08a      	b.n	8003096 <HAL_TIM_IC_ConfigChannel+0x130>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11b      	bne.n	8002fce <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f000 f94d 	bl	8003244 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 020c 	bic.w	r2, r2, #12
 8002fb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6999      	ldr	r1, [r3, #24]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	619a      	str	r2, [r3, #24]
 8002fcc:	e05a      	b.n	8003084 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11c      	bne.n	800300e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f000 f9a2 	bl	800332c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6999      	ldr	r1, [r3, #24]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	619a      	str	r2, [r3, #24]
 800300c:	e03a      	b.n	8003084 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f000 f9bf 	bl	80033a6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 020c 	bic.w	r2, r2, #12
 8003036:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69d9      	ldr	r1, [r3, #28]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	61da      	str	r2, [r3, #28]
 800304a:	e01b      	b.n	8003084 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f000 f9df 	bl	800341e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800306e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69d9      	ldr	r1, [r3, #28]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	021a      	lsls	r2, r3, #8
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a40      	ldr	r2, [pc, #256]	; (8003218 <TIM_Base_SetConfig+0x114>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d00f      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3d      	ldr	r2, [pc, #244]	; (800321c <TIM_Base_SetConfig+0x118>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3c      	ldr	r2, [pc, #240]	; (8003220 <TIM_Base_SetConfig+0x11c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3b      	ldr	r2, [pc, #236]	; (8003224 <TIM_Base_SetConfig+0x120>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3a      	ldr	r2, [pc, #232]	; (8003228 <TIM_Base_SetConfig+0x124>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <TIM_Base_SetConfig+0x114>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d02b      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d027      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2c      	ldr	r2, [pc, #176]	; (800321c <TIM_Base_SetConfig+0x118>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d023      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <TIM_Base_SetConfig+0x11c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <TIM_Base_SetConfig+0x120>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01b      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a29      	ldr	r2, [pc, #164]	; (8003228 <TIM_Base_SetConfig+0x124>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d017      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a28      	ldr	r2, [pc, #160]	; (800322c <TIM_Base_SetConfig+0x128>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a27      	ldr	r2, [pc, #156]	; (8003230 <TIM_Base_SetConfig+0x12c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00f      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a26      	ldr	r2, [pc, #152]	; (8003234 <TIM_Base_SetConfig+0x130>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <TIM_Base_SetConfig+0x134>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <TIM_Base_SetConfig+0x138>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a23      	ldr	r2, [pc, #140]	; (8003240 <TIM_Base_SetConfig+0x13c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <TIM_Base_SetConfig+0x114>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <TIM_Base_SetConfig+0x124>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	615a      	str	r2, [r3, #20]
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40010400 	.word	0x40010400
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800
 8003238:	40001800 	.word	0x40001800
 800323c:	40001c00 	.word	0x40001c00
 8003240:	40002000 	.word	0x40002000

08003244 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f023 0201 	bic.w	r2, r3, #1
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a28      	ldr	r2, [pc, #160]	; (8003310 <TIM_TI1_SetConfig+0xcc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01b      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d017      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <TIM_TI1_SetConfig+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a24      	ldr	r2, [pc, #144]	; (8003318 <TIM_TI1_SetConfig+0xd4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <TIM_TI1_SetConfig+0xd8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <TIM_TI1_SetConfig+0xdc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <TIM_TI1_SetConfig+0xe0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_TI1_SetConfig+0x66>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a20      	ldr	r2, [pc, #128]	; (8003328 <TIM_TI1_SetConfig+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <TIM_TI1_SetConfig+0x6a>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <TIM_TI1_SetConfig+0x6c>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e003      	b.n	80032ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f023 030a 	bic.w	r3, r3, #10
 80032e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 030a 	and.w	r3, r3, #10
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	621a      	str	r2, [r3, #32]
}
 8003302:	bf00      	nop
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40010400 	.word	0x40010400
 8003324:	40014000 	.word	0x40014000
 8003328:	40001800 	.word	0x40001800

0800332c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f023 0210 	bic.w	r2, r3, #16
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800336a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	031b      	lsls	r3, r3, #12
 8003370:	b29b      	uxth	r3, r3
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800337e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b087      	sub	sp, #28
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800345c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	031b      	lsls	r3, r3, #12
 8003462:	b29b      	uxth	r3, r3
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003470:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	621a      	str	r2, [r3, #32]
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2201      	movs	r2, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	401a      	ands	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e05a      	b.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d01d      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10c      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40010400 	.word	0x40010400
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40001800 	.word	0x40001800

080035dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <i2cWrite>:

extern uint32_t SystickMs;


void i2cWrite(uint8_t Address, uint8_t Value)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af04      	add	r7, sp, #16
 800360a:	4603      	mov	r3, r0
 800360c:	460a      	mov	r2, r1
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	4613      	mov	r3, r2
 8003612:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, Address, 1, &Value, 1, 100);
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	b29a      	uxth	r2, r3
 8003618:	2364      	movs	r3, #100	; 0x64
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	2301      	movs	r3, #1
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	21d0      	movs	r1, #208	; 0xd0
 8003628:	4803      	ldr	r0, [pc, #12]	; (8003638 <i2cWrite+0x34>)
 800362a:	f7fe f881 	bl	8001730 <HAL_I2C_Mem_Write>

}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200001c8 	.word	0x200001c8

0800363c <MPU6050Init>:



bool MPU6050Init()
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af04      	add	r7, sp, #16
    uint8_t control=0;
 8003642:	2300      	movs	r3, #0
 8003644:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &control, 1, 100);
 8003646:	2364      	movs	r3, #100	; 0x64
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	2301      	movs	r3, #1
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	2275      	movs	r2, #117	; 0x75
 8003656:	21d0      	movs	r1, #208	; 0xd0
 8003658:	4806      	ldr	r0, [pc, #24]	; (8003674 <MPU6050Init+0x38>)
 800365a:	f7fe f963 	bl	8001924 <HAL_I2C_Mem_Read>
	if(control==0x68)
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	2b68      	cmp	r3, #104	; 0x68
 8003662:	d101      	bne.n	8003668 <MPU6050Init+0x2c>
	 return true;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <MPU6050Init+0x2e>
	else
	 return false;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200001c8 	.word	0x200001c8

08003678 <MPU6050Initialization>:

void MPU6050Initialization()
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
     i2cWrite(PWR_MGMT_1,0x00);   //Sensor Wake-Up
 800367c:	2100      	movs	r1, #0
 800367e:	206b      	movs	r0, #107	; 0x6b
 8003680:	f7ff ffc0 	bl	8003604 <i2cWrite>
     i2cWrite(SMPLRT_DIV,0x07);
 8003684:	2107      	movs	r1, #7
 8003686:	2019      	movs	r0, #25
 8003688:	f7ff ffbc 	bl	8003604 <i2cWrite>
     i2cWrite(GYRO_CONFIG,0x00);  //Gyro ==>250 degree/sc  /131
 800368c:	2100      	movs	r1, #0
 800368e:	201b      	movs	r0, #27
 8003690:	f7ff ffb8 	bl	8003604 <i2cWrite>
     i2cWrite(ACCEL_CONFIG,0x00); //ACC==> -+2 degree/sc   /16384
 8003694:	2100      	movs	r1, #0
 8003696:	201c      	movs	r0, #28
 8003698:	f7ff ffb4 	bl	8003604 <i2cWrite>

}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}

080036a0 <getAccelerationRawData>:
}


/*This function are used to read raw acceleration datas and convert real datas...*/
void getAccelerationRawData()
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af04      	add	r7, sp, #16
     uint8_t RawDatas[6];
     HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, (uint16_t) 1, RawDatas, (uint16_t) 3 , 100);//3----6
 80036a6:	2364      	movs	r3, #100	; 0x64
 80036a8:	9302      	str	r3, [sp, #8]
 80036aa:	2303      	movs	r3, #3
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	463b      	mov	r3, r7
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2301      	movs	r3, #1
 80036b4:	223b      	movs	r2, #59	; 0x3b
 80036b6:	21d0      	movs	r1, #208	; 0xd0
 80036b8:	4825      	ldr	r0, [pc, #148]	; (8003750 <getAccelerationRawData+0xb0>)
 80036ba:	f7fe f933 	bl	8001924 <HAL_I2C_Mem_Read>

     XRaw=(RawDatas[0]<<8) | RawDatas[1];
 80036be:	783b      	ldrb	r3, [r7, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	b21a      	sxth	r2, r3
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	b21b      	sxth	r3, r3
 80036c8:	4313      	orrs	r3, r2
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <getAccelerationRawData+0xb4>)
 80036d0:	801a      	strh	r2, [r3, #0]
     YRaw=(RawDatas[2]<<8) | RawDatas[3];
 80036d2:	78bb      	ldrb	r3, [r7, #2]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	b21a      	sxth	r2, r3
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	b21b      	sxth	r3, r3
 80036dc:	4313      	orrs	r3, r2
 80036de:	b21b      	sxth	r3, r3
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <getAccelerationRawData+0xb8>)
 80036e4:	801a      	strh	r2, [r3, #0]
     ZRaw=(RawDatas[4]<<8) | RawDatas[5];
 80036e6:	793b      	ldrb	r3, [r7, #4]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	797b      	ldrb	r3, [r7, #5]
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	4313      	orrs	r3, r2
 80036f2:	b21b      	sxth	r3, r3
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <getAccelerationRawData+0xbc>)
 80036f8:	801a      	strh	r2, [r3, #0]

     XRawReal=(float)XRaw/16384.00;
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <getAccelerationRawData+0xb4>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003706:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003760 <getAccelerationRawData+0xc0>
 800370a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <getAccelerationRawData+0xc4>)
 8003710:	edc3 7a00 	vstr	s15, [r3]
     YRawReal=(float)YRaw/16384.00;
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <getAccelerationRawData+0xb8>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003720:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003760 <getAccelerationRawData+0xc0>
 8003724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <getAccelerationRawData+0xc8>)
 800372a:	edc3 7a00 	vstr	s15, [r3]
     ZRawReal=(float)ZRaw/16384.00;
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <getAccelerationRawData+0xbc>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800373a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003760 <getAccelerationRawData+0xc0>
 800373e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <getAccelerationRawData+0xcc>)
 8003744:	edc3 7a00 	vstr	s15, [r3]




}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200001c8 	.word	0x200001c8
 8003754:	20000176 	.word	0x20000176
 8003758:	200001a8 	.word	0x200001a8
 800375c:	20000164 	.word	0x20000164
 8003760:	46800000 	.word	0x46800000
 8003764:	2000018c 	.word	0x2000018c
 8003768:	200001b0 	.word	0x200001b0
 800376c:	200001a4 	.word	0x200001a4

08003770 <getGyroRawData>:

/*This function are used to read raw gyro datas and convert real datas...*/
void getGyroRawData()
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af04      	add	r7, sp, #16
    uint8_t RawDatas[6];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, (uint16_t) 1, RawDatas, (uint16_t) 6 , 100);
 8003776:	2364      	movs	r3, #100	; 0x64
 8003778:	9302      	str	r3, [sp, #8]
 800377a:	2306      	movs	r3, #6
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	463b      	mov	r3, r7
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2301      	movs	r3, #1
 8003784:	2243      	movs	r2, #67	; 0x43
 8003786:	21d0      	movs	r1, #208	; 0xd0
 8003788:	4842      	ldr	r0, [pc, #264]	; (8003894 <getGyroRawData+0x124>)
 800378a:	f7fe f8cb 	bl	8001924 <HAL_I2C_Mem_Read>

    G_XRaw=(RawDatas[0]<<8) | RawDatas[1];
 800378e:	783b      	ldrb	r3, [r7, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b21a      	sxth	r2, r3
 8003794:	787b      	ldrb	r3, [r7, #1]
 8003796:	b21b      	sxth	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b21b      	sxth	r3, r3
 800379c:	b29a      	uxth	r2, r3
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <getGyroRawData+0x128>)
 80037a0:	801a      	strh	r2, [r3, #0]
    G_YRaw=(RawDatas[2]<<8) | RawDatas[3];
 80037a2:	78bb      	ldrb	r3, [r7, #2]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	b21a      	sxth	r2, r3
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b21b      	sxth	r3, r3
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	4b3a      	ldr	r3, [pc, #232]	; (800389c <getGyroRawData+0x12c>)
 80037b4:	801a      	strh	r2, [r3, #0]
    G_ZRaw=(RawDatas[4]<<8) | RawDatas[5];
 80037b6:	793b      	ldrb	r3, [r7, #4]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	b21a      	sxth	r2, r3
 80037bc:	797b      	ldrb	r3, [r7, #5]
 80037be:	b21b      	sxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <getGyroRawData+0x130>)
 80037c8:	801a      	strh	r2, [r3, #0]
    if(calibration)
 80037ca:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <getGyroRawData+0x134>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d035      	beq.n	800383e <getGyroRawData+0xce>
    {
		G_XRaw-=calibrationGyro[0];
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <getGyroRawData+0x128>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <getGyroRawData+0x138>)
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ec:	ee17 3a90 	vmov	r3, s15
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <getGyroRawData+0x128>)
 80037f4:	801a      	strh	r2, [r3, #0]
		G_YRaw-=calibrationGyro[1];
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <getGyroRawData+0x12c>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <getGyroRawData+0x138>)
 8003804:	edd3 7a01 	vldr	s15, [r3, #4]
 8003808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800380c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003810:	ee17 3a90 	vmov	r3, s15
 8003814:	b29a      	uxth	r2, r3
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <getGyroRawData+0x12c>)
 8003818:	801a      	strh	r2, [r3, #0]
		G_ZRaw-=calibrationGyro[2];
 800381a:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <getGyroRawData+0x130>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <getGyroRawData+0x138>)
 8003828:	edd3 7a02 	vldr	s15, [r3, #8]
 800382c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003834:	ee17 3a90 	vmov	r3, s15
 8003838:	b29a      	uxth	r2, r3
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <getGyroRawData+0x130>)
 800383c:	801a      	strh	r2, [r3, #0]
    }

	G_X=(float) G_XRaw/ (float)131.0;
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <getGyroRawData+0x128>)
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800384a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80038ac <getGyroRawData+0x13c>
 800384e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <getGyroRawData+0x140>)
 8003854:	edc3 7a00 	vstr	s15, [r3]
	G_Y=(float) G_YRaw/ (float)131.0;
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <getGyroRawData+0x12c>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003864:	eddf 6a11 	vldr	s13, [pc, #68]	; 80038ac <getGyroRawData+0x13c>
 8003868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <getGyroRawData+0x144>)
 800386e:	edc3 7a00 	vstr	s15, [r3]
	G_Z=(float) G_ZRaw/ (float)131.0;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <getGyroRawData+0x130>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800387e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80038ac <getGyroRawData+0x13c>
 8003882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <getGyroRawData+0x148>)
 8003888:	edc3 7a00 	vstr	s15, [r3]
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200001c8 	.word	0x200001c8
 8003898:	200001b8 	.word	0x200001b8
 800389c:	20000174 	.word	0x20000174
 80038a0:	20000150 	.word	0x20000150
 80038a4:	20000134 	.word	0x20000134
 80038a8:	20000124 	.word	0x20000124
 80038ac:	43030000 	.word	0x43030000
 80038b0:	2000016c 	.word	0x2000016c
 80038b4:	200001ac 	.word	0x200001ac
 80038b8:	200001bc 	.word	0x200001bc
 80038bc:	00000000 	.word	0x00000000

080038c0 <getAllDatas>:

/*Read all datas and convert them to real values. Then, find degree*/

void getAllDatas()
{
 80038c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038c4:	b089      	sub	sp, #36	; 0x24
 80038c6:	af00      	add	r7, sp, #0
	getAccelerationRawData();
 80038c8:	f7ff feea 	bl	80036a0 <getAccelerationRawData>
	getGyroRawData();
 80038cc:	f7ff ff50 	bl	8003770 <getGyroRawData>

	double dt = (double) (HAL_GetTick() - timer) / 1000;
 80038d0:	f7fd fb1c 	bl	8000f0c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <getAllDatas+0x238>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fc fdb5 	bl	800044c <__aeabi_ui2d>
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <getAllDatas+0x23c>)
 80038e8:	f7fc ff54 	bl	8000794 <__aeabi_ddiv>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	timer = HAL_GetTick();
 80038f4:	f7fd fb0a 	bl	8000f0c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <getAllDatas+0x238>)
 80038fc:	601a      	str	r2, [r3, #0]
	double roll;
	double roll_sqrt = sqrt(XRaw *XRaw + ZRaw * ZRaw);
 80038fe:	4b80      	ldr	r3, [pc, #512]	; (8003b00 <getAllDatas+0x240>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <getAllDatas+0x240>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	fb03 f202 	mul.w	r2, r3, r2
 800390c:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <getAllDatas+0x244>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <getAllDatas+0x244>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	fb03 f301 	mul.w	r3, r3, r1
 800391a:	4413      	add	r3, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fda5 	bl	800046c <__aeabi_i2d>
 8003922:	4603      	mov	r3, r0
 8003924:	460c      	mov	r4, r1
 8003926:	ec44 3b10 	vmov	d0, r3, r4
 800392a:	f000 ff99 	bl	8004860 <sqrt>
 800392e:	ed87 0b02 	vstr	d0, [r7, #8]
	roll = atan(YRaw / roll_sqrt) * RAD_TO_DEG;
 8003932:	4b75      	ldr	r3, [pc, #468]	; (8003b08 <getAllDatas+0x248>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fd98 	bl	800046c <__aeabi_i2d>
 800393c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003940:	f7fc ff28 	bl	8000794 <__aeabi_ddiv>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	ec44 3b17 	vmov	d7, r3, r4
 800394c:	eeb0 0a47 	vmov.f32	s0, s14
 8003950:	eef0 0a67 	vmov.f32	s1, s15
 8003954:	f000 fdd8 	bl	8004508 <atan>
 8003958:	ec51 0b10 	vmov	r0, r1, d0
 800395c:	a364      	add	r3, pc, #400	; (adr r3, 8003af0 <getAllDatas+0x230>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f7fc fded 	bl	8000540 <__aeabi_dmul>
 8003966:	4603      	mov	r3, r0
 8003968:	460c      	mov	r4, r1
 800396a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	if (roll_sqrt != 0.0) {}
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800397a:	f7fd f849 	bl	8000a10 <__aeabi_dcmpeq>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <getAllDatas+0xd0>
	else { roll = 0.0; }
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double pitch = atan2(-XRaw, ZRaw) * RAD_TO_DEG;
 8003990:	4b5b      	ldr	r3, [pc, #364]	; (8003b00 <getAllDatas+0x240>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	425b      	negs	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	f7fc fd68 	bl	800046c <__aeabi_i2d>
 800399c:	4680      	mov	r8, r0
 800399e:	4689      	mov	r9, r1
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <getAllDatas+0x244>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fd51 	bl	800044c <__aeabi_ui2d>
 80039aa:	4603      	mov	r3, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	ec44 3b11 	vmov	d1, r3, r4
 80039b2:	ec49 8b10 	vmov	d0, r8, r9
 80039b6:	f000 ff50 	bl	800485a <atan2>
 80039ba:	ec51 0b10 	vmov	r0, r1, d0
 80039be:	a34c      	add	r3, pc, #304	; (adr r3, 8003af0 <getAllDatas+0x230>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc fdbc 	bl	8000540 <__aeabi_dmul>
 80039c8:	4603      	mov	r3, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	e9c7 3400 	strd	r3, r4, [r7]


	if ((pitch < -90 && KalmanAngleY > 90) || (pitch > 90 && KalmanAngleY < -90))
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <getAllDatas+0x24c>)
 80039d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039da:	f7fd f823 	bl	8000a24 <__aeabi_dcmplt>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <getAllDatas+0x13a>
 80039e4:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <getAllDatas+0x250>)
 80039e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <getAllDatas+0x254>)
 80039f0:	f7fd f836 	bl	8000a60 <__aeabi_dcmpgt>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d114      	bne.n	8003a24 <getAllDatas+0x164>
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <getAllDatas+0x254>)
 8003a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a04:	f7fd f82c 	bl	8000a60 <__aeabi_dcmpgt>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d015      	beq.n	8003a3a <getAllDatas+0x17a>
 8003a0e:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <getAllDatas+0x250>)
 8003a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <getAllDatas+0x24c>)
 8003a1a:	f7fd f803 	bl	8000a24 <__aeabi_dcmplt>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <getAllDatas+0x17a>
	{
	        KalmanY.angle = pitch;
 8003a24:	4a3c      	ldr	r2, [pc, #240]	; (8003b18 <getAllDatas+0x258>)
 8003a26:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a2a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	        KalmanAngleY = pitch;
 8003a2e:	4a38      	ldr	r2, [pc, #224]	; (8003b10 <getAllDatas+0x250>)
 8003a30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a34:	e9c2 3400 	strd	r3, r4, [r2]
 8003a38:	e016      	b.n	8003a68 <getAllDatas+0x1a8>
	}
	else
	{
	        KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, YRawReal, dt);
 8003a3a:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <getAllDatas+0x25c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fd26 	bl	8000490 <__aeabi_f2d>
 8003a44:	4603      	mov	r3, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	ed97 2b04 	vldr	d2, [r7, #16]
 8003a4c:	ec44 3b11 	vmov	d1, r3, r4
 8003a50:	ed97 0b00 	vldr	d0, [r7]
 8003a54:	4830      	ldr	r0, [pc, #192]	; (8003b18 <getAllDatas+0x258>)
 8003a56:	f000 f86d 	bl	8003b34 <Kalman_getAngle>
 8003a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a5e:	eef0 7a60 	vmov.f32	s15, s1
 8003a62:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <getAllDatas+0x250>)
 8003a64:	ed83 7b00 	vstr	d7, [r3]
	}
	if (fabs(KalmanAngleY) > 90)
 8003a68:	4b29      	ldr	r3, [pc, #164]	; (8003b10 <getAllDatas+0x250>)
 8003a6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a6e:	461d      	mov	r5, r3
 8003a70:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <getAllDatas+0x254>)
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	f7fc ffef 	bl	8000a60 <__aeabi_dcmpgt>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <getAllDatas+0x1d8>
	        XRawReal = -XRawReal;
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <getAllDatas+0x260>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	eef1 7a67 	vneg.f32	s15, s15
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <getAllDatas+0x260>)
 8003a94:	edc3 7a00 	vstr	s15, [r3]

	KalmanAngleX = Kalman_getAngle(&KalmanX, roll, YRawReal, dt);
 8003a98:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <getAllDatas+0x25c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fcf7 	bl	8000490 <__aeabi_f2d>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	ed97 2b04 	vldr	d2, [r7, #16]
 8003aaa:	ec44 3b11 	vmov	d1, r3, r4
 8003aae:	ed97 0b06 	vldr	d0, [r7, #24]
 8003ab2:	481c      	ldr	r0, [pc, #112]	; (8003b24 <getAllDatas+0x264>)
 8003ab4:	f000 f83e 	bl	8003b34 <Kalman_getAngle>
 8003ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8003abc:	eef0 7a60 	vmov.f32	s15, s1
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <getAllDatas+0x268>)
 8003ac2:	ed83 7b00 	vstr	d7, [r3]

    ROLL=roll;
 8003ac6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003aca:	f7fc ffe9 	bl	8000aa0 <__aeabi_d2f>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <getAllDatas+0x26c>)
 8003ad2:	601a      	str	r2, [r3, #0]
    PITCH=pitch;
 8003ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ad8:	f7fc ffe2 	bl	8000aa0 <__aeabi_d2f>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <getAllDatas+0x270>)
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aec:	f3af 8000 	nop.w
 8003af0:	1a63c1f8 	.word	0x1a63c1f8
 8003af4:	404ca5dc 	.word	0x404ca5dc
 8003af8:	20000160 	.word	0x20000160
 8003afc:	408f4000 	.word	0x408f4000
 8003b00:	20000176 	.word	0x20000176
 8003b04:	20000164 	.word	0x20000164
 8003b08:	200001a8 	.word	0x200001a8
 8003b0c:	c0568000 	.word	0xc0568000
 8003b10:	20000158 	.word	0x20000158
 8003b14:	40568000 	.word	0x40568000
 8003b18:	20000050 	.word	0x20000050
 8003b1c:	200001b0 	.word	0x200001b0
 8003b20:	2000018c 	.word	0x2000018c
 8003b24:	20000008 	.word	0x20000008
 8003b28:	20000180 	.word	0x20000180
 8003b2c:	20000138 	.word	0x20000138
 8003b30:	2000013c 	.word	0x2000013c

08003b34 <Kalman_getAngle>:


double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b096      	sub	sp, #88	; 0x58
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	61f8      	str	r0, [r7, #28]
 8003b3c:	ed87 0b04 	vstr	d0, [r7, #16]
 8003b40:	ed87 1b02 	vstr	d1, [r7, #8]
 8003b44:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4623      	mov	r3, r4
 8003b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b56:	f7fc fb3b 	bl	80001d0 <__aeabi_dsub>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b70:	f7fc fce6 	bl	8000540 <__aeabi_dmul>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4620      	mov	r0, r4
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	f7fc fb2a 	bl	80001d4 <__adddf3>
 8003b80:	4603      	mov	r3, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b9a:	f7fc fcd1 	bl	8000540 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003bac:	f7fc fb10 	bl	80001d0 <__aeabi_dsub>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003bbe:	f7fc fb07 	bl	80001d0 <__aeabi_dsub>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fb00 	bl	80001d4 <__adddf3>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be0:	f7fc fcae 	bl	8000540 <__aeabi_dmul>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4620      	mov	r0, r4
 8003bea:	4629      	mov	r1, r5
 8003bec:	f7fc faf2 	bl	80001d4 <__adddf3>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c0a:	f7fc fc99 	bl	8000540 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7fc fadb 	bl	80001d0 <__aeabi_dsub>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c34:	f7fc fc84 	bl	8000540 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fc fac6 	bl	80001d0 <__aeabi_dsub>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c5e:	f7fc fc6f 	bl	8000540 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7fc fab3 	bl	80001d4 <__adddf3>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4623      	mov	r3, r4
 8003c88:	f7fc faa4 	bl	80001d4 <__adddf3>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003c9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c9e:	f7fc fd79 	bl	8000794 <__aeabi_ddiv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cb4:	f7fc fd6e 	bl	8000794 <__aeabi_ddiv>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4623      	mov	r3, r4
 8003cca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cce:	f7fc fa7f 	bl	80001d0 <__aeabi_dsub>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003ce0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ce8:	f7fc fc2a 	bl	8000540 <__aeabi_dmul>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	f7fc fa6e 	bl	80001d4 <__adddf3>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003d08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d10:	f7fc fc16 	bl	8000540 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4620      	mov	r0, r4
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	f7fc fa5a 	bl	80001d4 <__adddf3>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003d30:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003d3a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003d44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d4c:	f7fc fbf8 	bl	8000540 <__aeabi_dmul>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4620      	mov	r0, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7fc fa3a 	bl	80001d0 <__aeabi_dsub>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003d6c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d74:	f7fc fbe4 	bl	8000540 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4629      	mov	r1, r5
 8003d80:	f7fc fa26 	bl	80001d0 <__aeabi_dsub>
 8003d84:	4603      	mov	r3, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003d94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d9c:	f7fc fbd0 	bl	8000540 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4620      	mov	r0, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	f7fc fa12 	bl	80001d0 <__aeabi_dsub>
 8003dac:	4603      	mov	r3, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003dbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dc4:	f7fc fbbc 	bl	8000540 <__aeabi_dmul>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4620      	mov	r0, r4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f7fc f9fe 	bl	80001d0 <__aeabi_dsub>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003de4:	ec44 3b17 	vmov	d7, r3, r4
}
 8003de8:	eeb0 0a47 	vmov.f32	s0, s14
 8003dec:	eef0 0a67 	vmov.f32	s1, s15
 8003df0:	3758      	adds	r7, #88	; 0x58
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003df8 <getRoll>:

float getRoll()
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0

    return ROLL;
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <getRoll+0x18>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	ee07 3a90 	vmov	s15, r3
}
 8003e04:	eeb0 0a67 	vmov.f32	s0, s15
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20000138 	.word	0x20000138

08003e14 <getPitch>:

float getPitch()
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
    return PITCH;
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <getPitch+0x18>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	ee07 3a90 	vmov	s15, r3
}
 8003e20:	eeb0 0a67 	vmov.f32	s0, s15
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	2000013c 	.word	0x2000013c

08003e30 <getTemperature>:


float getTemperature()
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, TEMP_REG, (uint16_t) 1, temp, (uint16_t) 2 , 100);
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	9302      	str	r3, [sp, #8]
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <getTemperature+0x78>)
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2301      	movs	r3, #1
 8003e44:	2241      	movs	r2, #65	; 0x41
 8003e46:	21d0      	movs	r1, #208	; 0xd0
 8003e48:	4818      	ldr	r0, [pc, #96]	; (8003eac <getTemperature+0x7c>)
 8003e4a:	f7fd fd6b 	bl	8001924 <HAL_I2C_Mem_Read>
	temperature=(float) ( (temp[1]<<8 |temp[1])/340.0 + 36.53);
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <getTemperature+0x78>)
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <getTemperature+0x78>)
 8003e56:	7852      	ldrb	r2, [r2, #1]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb06 	bl	800046c <__aeabi_i2d>
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <getTemperature+0x80>)
 8003e66:	f7fc fc95 	bl	8000794 <__aeabi_ddiv>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	4621      	mov	r1, r4
 8003e72:	a30b      	add	r3, pc, #44	; (adr r3, 8003ea0 <getTemperature+0x70>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc f9ac 	bl	80001d4 <__adddf3>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	4618      	mov	r0, r3
 8003e82:	4621      	mov	r1, r4
 8003e84:	f7fc fe0c 	bl	8000aa0 <__aeabi_d2f>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <getTemperature+0x84>)
 8003e8c:	601a      	str	r2, [r3, #0]
	return temperature;
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <getTemperature+0x84>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	ee07 3a90 	vmov	s15, r3
}
 8003e96:	eeb0 0a67 	vmov.f32	s0, s15
 8003e9a:	3704      	adds	r7, #4
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}
 8003ea0:	0a3d70a4 	.word	0x0a3d70a4
 8003ea4:	404243d7 	.word	0x404243d7
 8003ea8:	20000178 	.word	0x20000178
 8003eac:	200001c8 	.word	0x200001c8
 8003eb0:	40754000 	.word	0x40754000
 8003eb4:	20000130 	.word	0x20000130

08003eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ebc:	f7fc ffc0 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ec0:	f000 f876 	bl	8003fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ec4:	f000 f962 	bl	800418c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003ec8:	f000 f8dc 	bl	8004084 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003ecc:	f000 f908 	bl	80040e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4830      	ldr	r0, [pc, #192]	; (8003f94 <main+0xdc>)
 8003ed4:	f7fe ff1d 	bl	8002d12 <HAL_TIM_IC_Start>
  while(!MPU6050Init())
 8003ed8:	e01c      	b.n	8003f14 <main+0x5c>
  {

	  sprintf(message,"MPU6050 Error.Check wire connections...\n");
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <main+0xe0>)
 8003edc:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <main+0xe4>)
 8003ede:	4614      	mov	r4, r2
 8003ee0:	469c      	mov	ip, r3
 8003ee2:	f104 0e20 	add.w	lr, r4, #32
 8003ee6:	4665      	mov	r5, ip
 8003ee8:	4626      	mov	r6, r4
 8003eea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003eec:	6028      	str	r0, [r5, #0]
 8003eee:	6069      	str	r1, [r5, #4]
 8003ef0:	60aa      	str	r2, [r5, #8]
 8003ef2:	60eb      	str	r3, [r5, #12]
 8003ef4:	3410      	adds	r4, #16
 8003ef6:	f10c 0c10 	add.w	ip, ip, #16
 8003efa:	4574      	cmp	r4, lr
 8003efc:	d1f3      	bne.n	8003ee6 <main+0x2e>
 8003efe:	4662      	mov	r2, ip
 8003f00:	4623      	mov	r3, r4
 8003f02:	cb03      	ldmia	r3!, {r0, r1}
 8003f04:	6010      	str	r0, [r2, #0]
 8003f06:	6051      	str	r1, [r2, #4]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	7213      	strb	r3, [r2, #8]
	  HAL_Delay(1000);
 8003f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f10:	f7fd f808 	bl	8000f24 <HAL_Delay>
  while(!MPU6050Init())
 8003f14:	f7ff fb92 	bl	800363c <MPU6050Init>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f083 0301 	eor.w	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1da      	bne.n	8003eda <main+0x22>

  }

  sprintf(message,"Wait for initialization and calibration\n");
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <main+0xe0>)
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <main+0xe8>)
 8003f28:	4614      	mov	r4, r2
 8003f2a:	469c      	mov	ip, r3
 8003f2c:	f104 0e20 	add.w	lr, r4, #32
 8003f30:	4665      	mov	r5, ip
 8003f32:	4626      	mov	r6, r4
 8003f34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f36:	6028      	str	r0, [r5, #0]
 8003f38:	6069      	str	r1, [r5, #4]
 8003f3a:	60aa      	str	r2, [r5, #8]
 8003f3c:	60eb      	str	r3, [r5, #12]
 8003f3e:	3410      	adds	r4, #16
 8003f40:	f10c 0c10 	add.w	ip, ip, #16
 8003f44:	4574      	cmp	r4, lr
 8003f46:	d1f3      	bne.n	8003f30 <main+0x78>
 8003f48:	4662      	mov	r2, ip
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	cb03      	ldmia	r3!, {r0, r1}
 8003f4e:	6010      	str	r0, [r2, #0]
 8003f50:	6051      	str	r1, [r2, #4]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	7213      	strb	r3, [r2, #8]
  MPU6050Initialization();
 8003f56:	f7ff fb8f 	bl	8003678 <MPU6050Initialization>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	if(MPU6050Init())
 8003f5a:	f7ff fb6f 	bl	800363c <MPU6050Init>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0fa      	beq.n	8003f5a <main+0xa2>
  	{
  		getAllDatas();
 8003f64:	f7ff fcac 	bl	80038c0 <getAllDatas>
  		PitchValue=getPitch();
 8003f68:	f7ff ff54 	bl	8003e14 <getPitch>
 8003f6c:	eef0 7a40 	vmov.f32	s15, s0
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <main+0xec>)
 8003f72:	edc3 7a00 	vstr	s15, [r3]
  	    RollValue=getRoll();
 8003f76:	f7ff ff3f 	bl	8003df8 <getRoll>
 8003f7a:	eef0 7a40 	vmov.f32	s15, s0
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <main+0xf0>)
 8003f80:	edc3 7a00 	vstr	s15, [r3]
  	    temperature=getTemperature();
 8003f84:	f7ff ff54 	bl	8003e30 <getTemperature>
 8003f88:	eef0 7a40 	vmov.f32	s15, s0
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <main+0xf4>)
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
  	if(MPU6050Init())
 8003f92:	e7e2      	b.n	8003f5a <main+0xa2>
 8003f94:	20000280 	.word	0x20000280
 8003f98:	2000021c 	.word	0x2000021c
 8003f9c:	08004c50 	.word	0x08004c50
 8003fa0:	08004c7c 	.word	0x08004c7c
 8003fa4:	200001c4 	.word	0x200001c4
 8003fa8:	200002c0 	.word	0x200002c0
 8003fac:	20000130 	.word	0x20000130

08003fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b094      	sub	sp, #80	; 0x50
 8003fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fb6:	f107 0320 	add.w	r3, r7, #32
 8003fba:	2230      	movs	r2, #48	; 0x30
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fa9a 	bl	80044f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	4b28      	ldr	r3, [pc, #160]	; (800407c <SystemClock_Config+0xcc>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <SystemClock_Config+0xcc>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <SystemClock_Config+0xcc>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <SystemClock_Config+0xd0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <SystemClock_Config+0xd0>)
 8003ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <SystemClock_Config+0xd0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800400c:	2301      	movs	r3, #1
 800400e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004016:	2302      	movs	r3, #2
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800401a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004020:	2304      	movs	r3, #4
 8004022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004024:	2354      	movs	r3, #84	; 0x54
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004028:	2302      	movs	r3, #2
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800402c:	2304      	movs	r3, #4
 800402e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004030:	f107 0320 	add.w	r3, r7, #32
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe f9f3 	bl	8002420 <HAL_RCC_OscConfig>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004040:	f000 f8da 	bl	80041f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004044:	230f      	movs	r3, #15
 8004046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004048:	2302      	movs	r3, #2
 800404a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800405a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800405c:	f107 030c 	add.w	r3, r7, #12
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fc4c 	bl	8002900 <HAL_RCC_ClockConfig>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800406e:	f000 f8c3 	bl	80041f8 <Error_Handler>
  }
}
 8004072:	bf00      	nop
 8004074:	3750      	adds	r7, #80	; 0x50
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000

08004084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <MX_I2C1_Init+0x50>)
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <MX_I2C1_Init+0x54>)
 800408c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <MX_I2C1_Init+0x50>)
 8004090:	4a12      	ldr	r2, [pc, #72]	; (80040dc <MX_I2C1_Init+0x58>)
 8004092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <MX_I2C1_Init+0x50>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <MX_I2C1_Init+0x50>)
 800409c:	2200      	movs	r2, #0
 800409e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <MX_I2C1_Init+0x50>)
 80040a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <MX_I2C1_Init+0x50>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <MX_I2C1_Init+0x50>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <MX_I2C1_Init+0x50>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <MX_I2C1_Init+0x50>)
 80040bc:	2200      	movs	r2, #0
 80040be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040c0:	4804      	ldr	r0, [pc, #16]	; (80040d4 <MX_I2C1_Init+0x50>)
 80040c2:	f7fd f9fd 	bl	80014c0 <HAL_I2C_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040cc:	f000 f894 	bl	80041f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200001c8 	.word	0x200001c8
 80040d8:	40005400 	.word	0x40005400
 80040dc:	000186a0 	.word	0x000186a0

080040e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80040f0:	463b      	mov	r3, r7
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040fc:	4b21      	ldr	r3, [pc, #132]	; (8004184 <MX_TIM1_Init+0xa4>)
 80040fe:	4a22      	ldr	r2, [pc, #136]	; (8004188 <MX_TIM1_Init+0xa8>)
 8004100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <MX_TIM1_Init+0xa4>)
 8004104:	2253      	movs	r2, #83	; 0x53
 8004106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <MX_TIM1_Init+0xa4>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <MX_TIM1_Init+0xa4>)
 8004110:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004114:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004116:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <MX_TIM1_Init+0xa4>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <MX_TIM1_Init+0xa4>)
 800411e:	2200      	movs	r2, #0
 8004120:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <MX_TIM1_Init+0xa4>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004128:	4816      	ldr	r0, [pc, #88]	; (8004184 <MX_TIM1_Init+0xa4>)
 800412a:	f7fe fdc7 	bl	8002cbc <HAL_TIM_IC_Init>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004134:	f000 f860 	bl	80041f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004140:	f107 0310 	add.w	r3, r7, #16
 8004144:	4619      	mov	r1, r3
 8004146:	480f      	ldr	r0, [pc, #60]	; (8004184 <MX_TIM1_Init+0xa4>)
 8004148:	f7ff f9cc 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004152:	f000 f851 	bl	80041f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800415a:	2301      	movs	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004166:	463b      	mov	r3, r7
 8004168:	2200      	movs	r2, #0
 800416a:	4619      	mov	r1, r3
 800416c:	4805      	ldr	r0, [pc, #20]	; (8004184 <MX_TIM1_Init+0xa4>)
 800416e:	f7fe fefa 	bl	8002f66 <HAL_TIM_IC_ConfigChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8004178:	f000 f83e 	bl	80041f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000280 	.word	0x20000280
 8004188:	40010000 	.word	0x40010000

0800418c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <MX_GPIO_Init+0x68>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <MX_GPIO_Init+0x68>)
 800419c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041b8:	f043 0310 	orr.w	r3, r3, #16
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	60bb      	str	r3, [r7, #8]
 80041c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <MX_GPIO_Init+0x68>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]

}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_MspInit+0x4c>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <HAL_MspInit+0x4c>)
 8004218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421c:	6453      	str	r3, [r2, #68]	; 0x44
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_MspInit+0x4c>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_MspInit+0x4c>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a08      	ldr	r2, [pc, #32]	; (8004254 <HAL_MspInit+0x4c>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_MspInit+0x4c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_I2C_MspInit+0x84>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d12b      	bne.n	80042d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_I2C_MspInit+0x88>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_I2C_MspInit+0x88>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_I2C_MspInit+0x88>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004296:	23c0      	movs	r3, #192	; 0xc0
 8004298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800429a:	2312      	movs	r3, #18
 800429c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a2:	2303      	movs	r3, #3
 80042a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042a6:	2304      	movs	r3, #4
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	4619      	mov	r1, r3
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <HAL_I2C_MspInit+0x8c>)
 80042b2:	f7fc ff6b 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_I2C_MspInit+0x88>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <HAL_I2C_MspInit+0x88>)
 80042c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_I2C_MspInit+0x88>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80042d2:	bf00      	nop
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40005400 	.word	0x40005400
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40020400 	.word	0x40020400

080042e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	f107 0314 	add.w	r3, r7, #20
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1d      	ldr	r2, [pc, #116]	; (800437c <HAL_TIM_IC_MspInit+0x94>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d134      	bne.n	8004374 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_TIM_IC_MspInit+0x98>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_TIM_IC_MspInit+0x98>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6453      	str	r3, [r2, #68]	; 0x44
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_TIM_IC_MspInit+0x98>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <HAL_TIM_IC_MspInit+0x98>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_TIM_IC_MspInit+0x98>)
 8004330:	f043 0310 	orr.w	r3, r3, #16
 8004334:	6313      	str	r3, [r2, #48]	; 0x30
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_TIM_IC_MspInit+0x98>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004348:	2302      	movs	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	2300      	movs	r3, #0
 8004352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004354:	2301      	movs	r3, #1
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	4619      	mov	r1, r3
 800435e:	4809      	ldr	r0, [pc, #36]	; (8004384 <HAL_TIM_IC_MspInit+0x9c>)
 8004360:	f7fc ff14 	bl	800118c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2100      	movs	r1, #0
 8004368:	201b      	movs	r0, #27
 800436a:	f7fc fed8 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800436e:	201b      	movs	r0, #27
 8004370:	f7fc fef1 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004374:	bf00      	nop
 8004376:	3728      	adds	r7, #40	; 0x28
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40010000 	.word	0x40010000
 8004380:	40023800 	.word	0x40023800
 8004384:	40021000 	.word	0x40021000

08004388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800439a:	e7fe      	b.n	800439a <HardFault_Handler+0x4>

0800439c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <MemManage_Handler+0x4>

080043a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043a6:	e7fe      	b.n	80043a6 <BusFault_Handler+0x4>

080043a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <UsageFault_Handler+0x4>

080043ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickMs++;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <SysTick_Handler+0x30>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <SysTick_Handler+0x30>)
 80043e4:	6013      	str	r3, [r2, #0]
	if(SystickMs==1000)
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <SysTick_Handler+0x30>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ee:	d107      	bne.n	8004400 <SysTick_Handler+0x28>
	{
		SystickSecond++;
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <SysTick_Handler+0x34>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4a05      	ldr	r2, [pc, #20]	; (800440c <SysTick_Handler+0x34>)
 80043f8:	6013      	str	r3, [r2, #0]
		SystickMs=0;
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <SysTick_Handler+0x30>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004400:	f7fc fd70 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000140 	.word	0x20000140
 800440c:	20000144 	.word	0x20000144

08004410 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <TIM1_CC_IRQHandler+0x10>)
 8004416:	f7fe fc9e 	bl	8002d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000280 	.word	0x20000280

08004424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <SystemInit+0x28>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	4a07      	ldr	r2, [pc, #28]	; (800444c <SystemInit+0x28>)
 8004430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <SystemInit+0x28>)
 800443a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800443e:	609a      	str	r2, [r3, #8]
#endif
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004456:	e003      	b.n	8004460 <LoopCopyDataInit>

08004458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800445a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800445c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800445e:	3104      	adds	r1, #4

08004460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004468:	d3f6      	bcc.n	8004458 <CopyDataInit>
  ldr  r2, =_sbss
 800446a:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800446c:	e002      	b.n	8004474 <LoopFillZerobss>

0800446e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800446e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004470:	f842 3b04 	str.w	r3, [r2], #4

08004474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004478:	d3f9      	bcc.n	800446e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800447a:	f7ff ffd3 	bl	8004424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800447e:	f000 f817 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004482:	f7ff fd19 	bl	8003eb8 <main>
  bx  lr    
 8004486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004488:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800448c:	08004d18 	.word	0x08004d18
  ldr  r0, =_sdata
 8004490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004494:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 8004498:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 800449c:	200002c4 	.word	0x200002c4

080044a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a0:	e7fe      	b.n	80044a0 <ADC_IRQHandler>
	...

080044a4 <__errno>:
 80044a4:	4b01      	ldr	r3, [pc, #4]	; (80044ac <__errno+0x8>)
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000009c 	.word	0x2000009c

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0d      	ldr	r6, [pc, #52]	; (80044e8 <__libc_init_array+0x38>)
 80044b4:	4c0d      	ldr	r4, [pc, #52]	; (80044ec <__libc_init_array+0x3c>)
 80044b6:	1ba4      	subs	r4, r4, r6
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	2500      	movs	r5, #0
 80044bc:	42a5      	cmp	r5, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	4e0b      	ldr	r6, [pc, #44]	; (80044f0 <__libc_init_array+0x40>)
 80044c2:	4c0c      	ldr	r4, [pc, #48]	; (80044f4 <__libc_init_array+0x44>)
 80044c4:	f000 fbb8 	bl	8004c38 <_init>
 80044c8:	1ba4      	subs	r4, r4, r6
 80044ca:	10a4      	asrs	r4, r4, #2
 80044cc:	2500      	movs	r5, #0
 80044ce:	42a5      	cmp	r5, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d8:	4798      	blx	r3
 80044da:	3501      	adds	r5, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044e2:	4798      	blx	r3
 80044e4:	3501      	adds	r5, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	08004d10 	.word	0x08004d10
 80044ec:	08004d10 	.word	0x08004d10
 80044f0:	08004d10 	.word	0x08004d10
 80044f4:	08004d14 	.word	0x08004d14

080044f8 <memset>:
 80044f8:	4402      	add	r2, r0
 80044fa:	4603      	mov	r3, r0
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d100      	bne.n	8004502 <memset+0xa>
 8004500:	4770      	bx	lr
 8004502:	f803 1b01 	strb.w	r1, [r3], #1
 8004506:	e7f9      	b.n	80044fc <memset+0x4>

08004508 <atan>:
 8004508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	ec55 4b10 	vmov	r4, r5, d0
 8004510:	4bc3      	ldr	r3, [pc, #780]	; (8004820 <atan+0x318>)
 8004512:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004516:	429e      	cmp	r6, r3
 8004518:	46ab      	mov	fp, r5
 800451a:	dd18      	ble.n	800454e <atan+0x46>
 800451c:	4bc1      	ldr	r3, [pc, #772]	; (8004824 <atan+0x31c>)
 800451e:	429e      	cmp	r6, r3
 8004520:	dc01      	bgt.n	8004526 <atan+0x1e>
 8004522:	d109      	bne.n	8004538 <atan+0x30>
 8004524:	b144      	cbz	r4, 8004538 <atan+0x30>
 8004526:	4622      	mov	r2, r4
 8004528:	462b      	mov	r3, r5
 800452a:	4620      	mov	r0, r4
 800452c:	4629      	mov	r1, r5
 800452e:	f7fb fe51 	bl	80001d4 <__adddf3>
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	e006      	b.n	8004546 <atan+0x3e>
 8004538:	f1bb 0f00 	cmp.w	fp, #0
 800453c:	f340 8131 	ble.w	80047a2 <atan+0x29a>
 8004540:	a59b      	add	r5, pc, #620	; (adr r5, 80047b0 <atan+0x2a8>)
 8004542:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004546:	ec45 4b10 	vmov	d0, r4, r5
 800454a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454e:	4bb6      	ldr	r3, [pc, #728]	; (8004828 <atan+0x320>)
 8004550:	429e      	cmp	r6, r3
 8004552:	dc14      	bgt.n	800457e <atan+0x76>
 8004554:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004558:	429e      	cmp	r6, r3
 800455a:	dc0d      	bgt.n	8004578 <atan+0x70>
 800455c:	a396      	add	r3, pc, #600	; (adr r3, 80047b8 <atan+0x2b0>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	ee10 0a10 	vmov	r0, s0
 8004566:	4629      	mov	r1, r5
 8004568:	f7fb fe34 	bl	80001d4 <__adddf3>
 800456c:	2200      	movs	r2, #0
 800456e:	4baf      	ldr	r3, [pc, #700]	; (800482c <atan+0x324>)
 8004570:	f7fc fa76 	bl	8000a60 <__aeabi_dcmpgt>
 8004574:	2800      	cmp	r0, #0
 8004576:	d1e6      	bne.n	8004546 <atan+0x3e>
 8004578:	f04f 3aff 	mov.w	sl, #4294967295
 800457c:	e02b      	b.n	80045d6 <atan+0xce>
 800457e:	f000 f963 	bl	8004848 <fabs>
 8004582:	4bab      	ldr	r3, [pc, #684]	; (8004830 <atan+0x328>)
 8004584:	429e      	cmp	r6, r3
 8004586:	ec55 4b10 	vmov	r4, r5, d0
 800458a:	f300 80bf 	bgt.w	800470c <atan+0x204>
 800458e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004592:	429e      	cmp	r6, r3
 8004594:	f300 80a0 	bgt.w	80046d8 <atan+0x1d0>
 8004598:	ee10 2a10 	vmov	r2, s0
 800459c:	ee10 0a10 	vmov	r0, s0
 80045a0:	462b      	mov	r3, r5
 80045a2:	4629      	mov	r1, r5
 80045a4:	f7fb fe16 	bl	80001d4 <__adddf3>
 80045a8:	2200      	movs	r2, #0
 80045aa:	4ba0      	ldr	r3, [pc, #640]	; (800482c <atan+0x324>)
 80045ac:	f7fb fe10 	bl	80001d0 <__aeabi_dsub>
 80045b0:	2200      	movs	r2, #0
 80045b2:	4606      	mov	r6, r0
 80045b4:	460f      	mov	r7, r1
 80045b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045ba:	4620      	mov	r0, r4
 80045bc:	4629      	mov	r1, r5
 80045be:	f7fb fe09 	bl	80001d4 <__adddf3>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4630      	mov	r0, r6
 80045c8:	4639      	mov	r1, r7
 80045ca:	f7fc f8e3 	bl	8000794 <__aeabi_ddiv>
 80045ce:	f04f 0a00 	mov.w	sl, #0
 80045d2:	4604      	mov	r4, r0
 80045d4:	460d      	mov	r5, r1
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fb ffaf 	bl	8000540 <__aeabi_dmul>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4680      	mov	r8, r0
 80045e8:	4689      	mov	r9, r1
 80045ea:	f7fb ffa9 	bl	8000540 <__aeabi_dmul>
 80045ee:	a374      	add	r3, pc, #464	; (adr r3, 80047c0 <atan+0x2b8>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	4606      	mov	r6, r0
 80045f6:	460f      	mov	r7, r1
 80045f8:	f7fb ffa2 	bl	8000540 <__aeabi_dmul>
 80045fc:	a372      	add	r3, pc, #456	; (adr r3, 80047c8 <atan+0x2c0>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fde7 	bl	80001d4 <__adddf3>
 8004606:	4632      	mov	r2, r6
 8004608:	463b      	mov	r3, r7
 800460a:	f7fb ff99 	bl	8000540 <__aeabi_dmul>
 800460e:	a370      	add	r3, pc, #448	; (adr r3, 80047d0 <atan+0x2c8>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f7fb fdde 	bl	80001d4 <__adddf3>
 8004618:	4632      	mov	r2, r6
 800461a:	463b      	mov	r3, r7
 800461c:	f7fb ff90 	bl	8000540 <__aeabi_dmul>
 8004620:	a36d      	add	r3, pc, #436	; (adr r3, 80047d8 <atan+0x2d0>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f7fb fdd5 	bl	80001d4 <__adddf3>
 800462a:	4632      	mov	r2, r6
 800462c:	463b      	mov	r3, r7
 800462e:	f7fb ff87 	bl	8000540 <__aeabi_dmul>
 8004632:	a36b      	add	r3, pc, #428	; (adr r3, 80047e0 <atan+0x2d8>)
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f7fb fdcc 	bl	80001d4 <__adddf3>
 800463c:	4632      	mov	r2, r6
 800463e:	463b      	mov	r3, r7
 8004640:	f7fb ff7e 	bl	8000540 <__aeabi_dmul>
 8004644:	a368      	add	r3, pc, #416	; (adr r3, 80047e8 <atan+0x2e0>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f7fb fdc3 	bl	80001d4 <__adddf3>
 800464e:	4642      	mov	r2, r8
 8004650:	464b      	mov	r3, r9
 8004652:	f7fb ff75 	bl	8000540 <__aeabi_dmul>
 8004656:	a366      	add	r3, pc, #408	; (adr r3, 80047f0 <atan+0x2e8>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	4680      	mov	r8, r0
 800465e:	4689      	mov	r9, r1
 8004660:	4630      	mov	r0, r6
 8004662:	4639      	mov	r1, r7
 8004664:	f7fb ff6c 	bl	8000540 <__aeabi_dmul>
 8004668:	a363      	add	r3, pc, #396	; (adr r3, 80047f8 <atan+0x2f0>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f7fb fdaf 	bl	80001d0 <__aeabi_dsub>
 8004672:	4632      	mov	r2, r6
 8004674:	463b      	mov	r3, r7
 8004676:	f7fb ff63 	bl	8000540 <__aeabi_dmul>
 800467a:	a361      	add	r3, pc, #388	; (adr r3, 8004800 <atan+0x2f8>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fb fda6 	bl	80001d0 <__aeabi_dsub>
 8004684:	4632      	mov	r2, r6
 8004686:	463b      	mov	r3, r7
 8004688:	f7fb ff5a 	bl	8000540 <__aeabi_dmul>
 800468c:	a35e      	add	r3, pc, #376	; (adr r3, 8004808 <atan+0x300>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fd9d 	bl	80001d0 <__aeabi_dsub>
 8004696:	4632      	mov	r2, r6
 8004698:	463b      	mov	r3, r7
 800469a:	f7fb ff51 	bl	8000540 <__aeabi_dmul>
 800469e:	a35c      	add	r3, pc, #368	; (adr r3, 8004810 <atan+0x308>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fb fd94 	bl	80001d0 <__aeabi_dsub>
 80046a8:	4632      	mov	r2, r6
 80046aa:	463b      	mov	r3, r7
 80046ac:	f7fb ff48 	bl	8000540 <__aeabi_dmul>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fb fd8c 	bl	80001d4 <__adddf3>
 80046bc:	4622      	mov	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	f7fb ff3e 	bl	8000540 <__aeabi_dmul>
 80046c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	d14b      	bne.n	8004766 <atan+0x25e>
 80046ce:	4620      	mov	r0, r4
 80046d0:	4629      	mov	r1, r5
 80046d2:	f7fb fd7d 	bl	80001d0 <__aeabi_dsub>
 80046d6:	e72c      	b.n	8004532 <atan+0x2a>
 80046d8:	ee10 0a10 	vmov	r0, s0
 80046dc:	2200      	movs	r2, #0
 80046de:	4b53      	ldr	r3, [pc, #332]	; (800482c <atan+0x324>)
 80046e0:	4629      	mov	r1, r5
 80046e2:	f7fb fd75 	bl	80001d0 <__aeabi_dsub>
 80046e6:	2200      	movs	r2, #0
 80046e8:	4606      	mov	r6, r0
 80046ea:	460f      	mov	r7, r1
 80046ec:	4b4f      	ldr	r3, [pc, #316]	; (800482c <atan+0x324>)
 80046ee:	4620      	mov	r0, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7fb fd6f 	bl	80001d4 <__adddf3>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fc f849 	bl	8000794 <__aeabi_ddiv>
 8004702:	f04f 0a01 	mov.w	sl, #1
 8004706:	4604      	mov	r4, r0
 8004708:	460d      	mov	r5, r1
 800470a:	e764      	b.n	80045d6 <atan+0xce>
 800470c:	4b49      	ldr	r3, [pc, #292]	; (8004834 <atan+0x32c>)
 800470e:	429e      	cmp	r6, r3
 8004710:	dc1d      	bgt.n	800474e <atan+0x246>
 8004712:	ee10 0a10 	vmov	r0, s0
 8004716:	2200      	movs	r2, #0
 8004718:	4b47      	ldr	r3, [pc, #284]	; (8004838 <atan+0x330>)
 800471a:	4629      	mov	r1, r5
 800471c:	f7fb fd58 	bl	80001d0 <__aeabi_dsub>
 8004720:	2200      	movs	r2, #0
 8004722:	4606      	mov	r6, r0
 8004724:	460f      	mov	r7, r1
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <atan+0x330>)
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb ff08 	bl	8000540 <__aeabi_dmul>
 8004730:	2200      	movs	r2, #0
 8004732:	4b3e      	ldr	r3, [pc, #248]	; (800482c <atan+0x324>)
 8004734:	f7fb fd4e 	bl	80001d4 <__adddf3>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4630      	mov	r0, r6
 800473e:	4639      	mov	r1, r7
 8004740:	f7fc f828 	bl	8000794 <__aeabi_ddiv>
 8004744:	f04f 0a02 	mov.w	sl, #2
 8004748:	4604      	mov	r4, r0
 800474a:	460d      	mov	r5, r1
 800474c:	e743      	b.n	80045d6 <atan+0xce>
 800474e:	462b      	mov	r3, r5
 8004750:	ee10 2a10 	vmov	r2, s0
 8004754:	2000      	movs	r0, #0
 8004756:	4939      	ldr	r1, [pc, #228]	; (800483c <atan+0x334>)
 8004758:	f7fc f81c 	bl	8000794 <__aeabi_ddiv>
 800475c:	f04f 0a03 	mov.w	sl, #3
 8004760:	4604      	mov	r4, r0
 8004762:	460d      	mov	r5, r1
 8004764:	e737      	b.n	80045d6 <atan+0xce>
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <atan+0x338>)
 8004768:	4e36      	ldr	r6, [pc, #216]	; (8004844 <atan+0x33c>)
 800476a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800476e:	4456      	add	r6, sl
 8004770:	449a      	add	sl, r3
 8004772:	e9da 2300 	ldrd	r2, r3, [sl]
 8004776:	f7fb fd2b 	bl	80001d0 <__aeabi_dsub>
 800477a:	4622      	mov	r2, r4
 800477c:	462b      	mov	r3, r5
 800477e:	f7fb fd27 	bl	80001d0 <__aeabi_dsub>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	e9d6 0100 	ldrd	r0, r1, [r6]
 800478a:	f7fb fd21 	bl	80001d0 <__aeabi_dsub>
 800478e:	f1bb 0f00 	cmp.w	fp, #0
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	f6bf aed6 	bge.w	8004546 <atan+0x3e>
 800479a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800479e:	461d      	mov	r5, r3
 80047a0:	e6d1      	b.n	8004546 <atan+0x3e>
 80047a2:	a51d      	add	r5, pc, #116	; (adr r5, 8004818 <atan+0x310>)
 80047a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80047a8:	e6cd      	b.n	8004546 <atan+0x3e>
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	54442d18 	.word	0x54442d18
 80047b4:	3ff921fb 	.word	0x3ff921fb
 80047b8:	8800759c 	.word	0x8800759c
 80047bc:	7e37e43c 	.word	0x7e37e43c
 80047c0:	e322da11 	.word	0xe322da11
 80047c4:	3f90ad3a 	.word	0x3f90ad3a
 80047c8:	24760deb 	.word	0x24760deb
 80047cc:	3fa97b4b 	.word	0x3fa97b4b
 80047d0:	a0d03d51 	.word	0xa0d03d51
 80047d4:	3fb10d66 	.word	0x3fb10d66
 80047d8:	c54c206e 	.word	0xc54c206e
 80047dc:	3fb745cd 	.word	0x3fb745cd
 80047e0:	920083ff 	.word	0x920083ff
 80047e4:	3fc24924 	.word	0x3fc24924
 80047e8:	5555550d 	.word	0x5555550d
 80047ec:	3fd55555 	.word	0x3fd55555
 80047f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80047f4:	bfa2b444 	.word	0xbfa2b444
 80047f8:	52defd9a 	.word	0x52defd9a
 80047fc:	3fadde2d 	.word	0x3fadde2d
 8004800:	af749a6d 	.word	0xaf749a6d
 8004804:	3fb3b0f2 	.word	0x3fb3b0f2
 8004808:	fe231671 	.word	0xfe231671
 800480c:	3fbc71c6 	.word	0x3fbc71c6
 8004810:	9998ebc4 	.word	0x9998ebc4
 8004814:	3fc99999 	.word	0x3fc99999
 8004818:	54442d18 	.word	0x54442d18
 800481c:	bff921fb 	.word	0xbff921fb
 8004820:	440fffff 	.word	0x440fffff
 8004824:	7ff00000 	.word	0x7ff00000
 8004828:	3fdbffff 	.word	0x3fdbffff
 800482c:	3ff00000 	.word	0x3ff00000
 8004830:	3ff2ffff 	.word	0x3ff2ffff
 8004834:	40037fff 	.word	0x40037fff
 8004838:	3ff80000 	.word	0x3ff80000
 800483c:	bff00000 	.word	0xbff00000
 8004840:	08004ce0 	.word	0x08004ce0
 8004844:	08004cc0 	.word	0x08004cc0

08004848 <fabs>:
 8004848:	ec51 0b10 	vmov	r0, r1, d0
 800484c:	ee10 2a10 	vmov	r2, s0
 8004850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004854:	ec43 2b10 	vmov	d0, r2, r3
 8004858:	4770      	bx	lr

0800485a <atan2>:
 800485a:	f000 b85d 	b.w	8004918 <__ieee754_atan2>
	...

08004860 <sqrt>:
 8004860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004864:	ed2d 8b02 	vpush	{d8}
 8004868:	b08b      	sub	sp, #44	; 0x2c
 800486a:	ec55 4b10 	vmov	r4, r5, d0
 800486e:	f000 f931 	bl	8004ad4 <__ieee754_sqrt>
 8004872:	4b26      	ldr	r3, [pc, #152]	; (800490c <sqrt+0xac>)
 8004874:	eeb0 8a40 	vmov.f32	s16, s0
 8004878:	eef0 8a60 	vmov.f32	s17, s1
 800487c:	f993 6000 	ldrsb.w	r6, [r3]
 8004880:	1c73      	adds	r3, r6, #1
 8004882:	d02a      	beq.n	80048da <sqrt+0x7a>
 8004884:	4622      	mov	r2, r4
 8004886:	462b      	mov	r3, r5
 8004888:	4620      	mov	r0, r4
 800488a:	4629      	mov	r1, r5
 800488c:	f7fc f8f2 	bl	8000a74 <__aeabi_dcmpun>
 8004890:	4607      	mov	r7, r0
 8004892:	bb10      	cbnz	r0, 80048da <sqrt+0x7a>
 8004894:	f04f 0800 	mov.w	r8, #0
 8004898:	f04f 0900 	mov.w	r9, #0
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fc f8be 	bl	8000a24 <__aeabi_dcmplt>
 80048a8:	b1b8      	cbz	r0, 80048da <sqrt+0x7a>
 80048aa:	2301      	movs	r3, #1
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <sqrt+0xb0>)
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	9708      	str	r7, [sp, #32]
 80048b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80048b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80048bc:	b9b6      	cbnz	r6, 80048ec <sqrt+0x8c>
 80048be:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80048c2:	4668      	mov	r0, sp
 80048c4:	f000 f9b6 	bl	8004c34 <matherr>
 80048c8:	b1d0      	cbz	r0, 8004900 <sqrt+0xa0>
 80048ca:	9b08      	ldr	r3, [sp, #32]
 80048cc:	b11b      	cbz	r3, 80048d6 <sqrt+0x76>
 80048ce:	f7ff fde9 	bl	80044a4 <__errno>
 80048d2:	9b08      	ldr	r3, [sp, #32]
 80048d4:	6003      	str	r3, [r0, #0]
 80048d6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80048da:	eeb0 0a48 	vmov.f32	s0, s16
 80048de:	eef0 0a68 	vmov.f32	s1, s17
 80048e2:	b00b      	add	sp, #44	; 0x2c
 80048e4:	ecbd 8b02 	vpop	{d8}
 80048e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fb ff4e 	bl	8000794 <__aeabi_ddiv>
 80048f8:	2e02      	cmp	r6, #2
 80048fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048fe:	d1e0      	bne.n	80048c2 <sqrt+0x62>
 8004900:	f7ff fdd0 	bl	80044a4 <__errno>
 8004904:	2321      	movs	r3, #33	; 0x21
 8004906:	6003      	str	r3, [r0, #0]
 8004908:	e7df      	b.n	80048ca <sqrt+0x6a>
 800490a:	bf00      	nop
 800490c:	20000100 	.word	0x20000100
 8004910:	08004d00 	.word	0x08004d00
 8004914:	00000000 	.word	0x00000000

08004918 <__ieee754_atan2>:
 8004918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800491c:	ec57 6b11 	vmov	r6, r7, d1
 8004920:	4273      	negs	r3, r6
 8004922:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004926:	4333      	orrs	r3, r6
 8004928:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8004ad0 <__ieee754_atan2+0x1b8>
 800492c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004930:	4573      	cmp	r3, lr
 8004932:	ec51 0b10 	vmov	r0, r1, d0
 8004936:	ee11 8a10 	vmov	r8, s2
 800493a:	d80a      	bhi.n	8004952 <__ieee754_atan2+0x3a>
 800493c:	4244      	negs	r4, r0
 800493e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004942:	4304      	orrs	r4, r0
 8004944:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004948:	4574      	cmp	r4, lr
 800494a:	468c      	mov	ip, r1
 800494c:	ee10 9a10 	vmov	r9, s0
 8004950:	d907      	bls.n	8004962 <__ieee754_atan2+0x4a>
 8004952:	4632      	mov	r2, r6
 8004954:	463b      	mov	r3, r7
 8004956:	f7fb fc3d 	bl	80001d4 <__adddf3>
 800495a:	ec41 0b10 	vmov	d0, r0, r1
 800495e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004962:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004966:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800496a:	4334      	orrs	r4, r6
 800496c:	d103      	bne.n	8004976 <__ieee754_atan2+0x5e>
 800496e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004972:	f7ff bdc9 	b.w	8004508 <atan>
 8004976:	17bc      	asrs	r4, r7, #30
 8004978:	f004 0402 	and.w	r4, r4, #2
 800497c:	ea53 0909 	orrs.w	r9, r3, r9
 8004980:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004984:	d107      	bne.n	8004996 <__ieee754_atan2+0x7e>
 8004986:	2c02      	cmp	r4, #2
 8004988:	d073      	beq.n	8004a72 <__ieee754_atan2+0x15a>
 800498a:	2c03      	cmp	r4, #3
 800498c:	d1e5      	bne.n	800495a <__ieee754_atan2+0x42>
 800498e:	a13e      	add	r1, pc, #248	; (adr r1, 8004a88 <__ieee754_atan2+0x170>)
 8004990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004994:	e7e1      	b.n	800495a <__ieee754_atan2+0x42>
 8004996:	ea52 0808 	orrs.w	r8, r2, r8
 800499a:	d106      	bne.n	80049aa <__ieee754_atan2+0x92>
 800499c:	f1bc 0f00 	cmp.w	ip, #0
 80049a0:	da6b      	bge.n	8004a7a <__ieee754_atan2+0x162>
 80049a2:	a13b      	add	r1, pc, #236	; (adr r1, 8004a90 <__ieee754_atan2+0x178>)
 80049a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049a8:	e7d7      	b.n	800495a <__ieee754_atan2+0x42>
 80049aa:	4572      	cmp	r2, lr
 80049ac:	d120      	bne.n	80049f0 <__ieee754_atan2+0xd8>
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d111      	bne.n	80049d6 <__ieee754_atan2+0xbe>
 80049b2:	2c02      	cmp	r4, #2
 80049b4:	d007      	beq.n	80049c6 <__ieee754_atan2+0xae>
 80049b6:	2c03      	cmp	r4, #3
 80049b8:	d009      	beq.n	80049ce <__ieee754_atan2+0xb6>
 80049ba:	2c01      	cmp	r4, #1
 80049bc:	d155      	bne.n	8004a6a <__ieee754_atan2+0x152>
 80049be:	a136      	add	r1, pc, #216	; (adr r1, 8004a98 <__ieee754_atan2+0x180>)
 80049c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049c4:	e7c9      	b.n	800495a <__ieee754_atan2+0x42>
 80049c6:	a136      	add	r1, pc, #216	; (adr r1, 8004aa0 <__ieee754_atan2+0x188>)
 80049c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049cc:	e7c5      	b.n	800495a <__ieee754_atan2+0x42>
 80049ce:	a136      	add	r1, pc, #216	; (adr r1, 8004aa8 <__ieee754_atan2+0x190>)
 80049d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d4:	e7c1      	b.n	800495a <__ieee754_atan2+0x42>
 80049d6:	2c02      	cmp	r4, #2
 80049d8:	d04b      	beq.n	8004a72 <__ieee754_atan2+0x15a>
 80049da:	2c03      	cmp	r4, #3
 80049dc:	d0d7      	beq.n	800498e <__ieee754_atan2+0x76>
 80049de:	2c01      	cmp	r4, #1
 80049e0:	f04f 0000 	mov.w	r0, #0
 80049e4:	d102      	bne.n	80049ec <__ieee754_atan2+0xd4>
 80049e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80049ea:	e7b6      	b.n	800495a <__ieee754_atan2+0x42>
 80049ec:	2100      	movs	r1, #0
 80049ee:	e7b4      	b.n	800495a <__ieee754_atan2+0x42>
 80049f0:	4573      	cmp	r3, lr
 80049f2:	d0d3      	beq.n	800499c <__ieee754_atan2+0x84>
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	151b      	asrs	r3, r3, #20
 80049f8:	2b3c      	cmp	r3, #60	; 0x3c
 80049fa:	dc1e      	bgt.n	8004a3a <__ieee754_atan2+0x122>
 80049fc:	2f00      	cmp	r7, #0
 80049fe:	da01      	bge.n	8004a04 <__ieee754_atan2+0xec>
 8004a00:	333c      	adds	r3, #60	; 0x3c
 8004a02:	db1e      	blt.n	8004a42 <__ieee754_atan2+0x12a>
 8004a04:	4632      	mov	r2, r6
 8004a06:	463b      	mov	r3, r7
 8004a08:	f7fb fec4 	bl	8000794 <__aeabi_ddiv>
 8004a0c:	ec41 0b10 	vmov	d0, r0, r1
 8004a10:	f7ff ff1a 	bl	8004848 <fabs>
 8004a14:	f7ff fd78 	bl	8004508 <atan>
 8004a18:	ec51 0b10 	vmov	r0, r1, d0
 8004a1c:	2c01      	cmp	r4, #1
 8004a1e:	d013      	beq.n	8004a48 <__ieee754_atan2+0x130>
 8004a20:	2c02      	cmp	r4, #2
 8004a22:	d015      	beq.n	8004a50 <__ieee754_atan2+0x138>
 8004a24:	2c00      	cmp	r4, #0
 8004a26:	d098      	beq.n	800495a <__ieee754_atan2+0x42>
 8004a28:	a321      	add	r3, pc, #132	; (adr r3, 8004ab0 <__ieee754_atan2+0x198>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb fbcf 	bl	80001d0 <__aeabi_dsub>
 8004a32:	a321      	add	r3, pc, #132	; (adr r3, 8004ab8 <__ieee754_atan2+0x1a0>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	e014      	b.n	8004a64 <__ieee754_atan2+0x14c>
 8004a3a:	a121      	add	r1, pc, #132	; (adr r1, 8004ac0 <__ieee754_atan2+0x1a8>)
 8004a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a40:	e7ec      	b.n	8004a1c <__ieee754_atan2+0x104>
 8004a42:	2000      	movs	r0, #0
 8004a44:	2100      	movs	r1, #0
 8004a46:	e7e9      	b.n	8004a1c <__ieee754_atan2+0x104>
 8004a48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	e784      	b.n	800495a <__ieee754_atan2+0x42>
 8004a50:	a317      	add	r3, pc, #92	; (adr r3, 8004ab0 <__ieee754_atan2+0x198>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fbbb 	bl	80001d0 <__aeabi_dsub>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	a116      	add	r1, pc, #88	; (adr r1, 8004ab8 <__ieee754_atan2+0x1a0>)
 8004a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a64:	f7fb fbb4 	bl	80001d0 <__aeabi_dsub>
 8004a68:	e777      	b.n	800495a <__ieee754_atan2+0x42>
 8004a6a:	a117      	add	r1, pc, #92	; (adr r1, 8004ac8 <__ieee754_atan2+0x1b0>)
 8004a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a70:	e773      	b.n	800495a <__ieee754_atan2+0x42>
 8004a72:	a111      	add	r1, pc, #68	; (adr r1, 8004ab8 <__ieee754_atan2+0x1a0>)
 8004a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a78:	e76f      	b.n	800495a <__ieee754_atan2+0x42>
 8004a7a:	a111      	add	r1, pc, #68	; (adr r1, 8004ac0 <__ieee754_atan2+0x1a8>)
 8004a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a80:	e76b      	b.n	800495a <__ieee754_atan2+0x42>
 8004a82:	bf00      	nop
 8004a84:	f3af 8000 	nop.w
 8004a88:	54442d18 	.word	0x54442d18
 8004a8c:	c00921fb 	.word	0xc00921fb
 8004a90:	54442d18 	.word	0x54442d18
 8004a94:	bff921fb 	.word	0xbff921fb
 8004a98:	54442d18 	.word	0x54442d18
 8004a9c:	bfe921fb 	.word	0xbfe921fb
 8004aa0:	7f3321d2 	.word	0x7f3321d2
 8004aa4:	4002d97c 	.word	0x4002d97c
 8004aa8:	7f3321d2 	.word	0x7f3321d2
 8004aac:	c002d97c 	.word	0xc002d97c
 8004ab0:	33145c07 	.word	0x33145c07
 8004ab4:	3ca1a626 	.word	0x3ca1a626
 8004ab8:	54442d18 	.word	0x54442d18
 8004abc:	400921fb 	.word	0x400921fb
 8004ac0:	54442d18 	.word	0x54442d18
 8004ac4:	3ff921fb 	.word	0x3ff921fb
 8004ac8:	54442d18 	.word	0x54442d18
 8004acc:	3fe921fb 	.word	0x3fe921fb
 8004ad0:	7ff00000 	.word	0x7ff00000

08004ad4 <__ieee754_sqrt>:
 8004ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	4955      	ldr	r1, [pc, #340]	; (8004c30 <__ieee754_sqrt+0x15c>)
 8004ada:	ec55 4b10 	vmov	r4, r5, d0
 8004ade:	43a9      	bics	r1, r5
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	d112      	bne.n	8004b0c <__ieee754_sqrt+0x38>
 8004ae6:	ee10 2a10 	vmov	r2, s0
 8004aea:	ee10 0a10 	vmov	r0, s0
 8004aee:	4629      	mov	r1, r5
 8004af0:	f7fb fd26 	bl	8000540 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fb6a 	bl	80001d4 <__adddf3>
 8004b00:	4604      	mov	r4, r0
 8004b02:	460d      	mov	r5, r1
 8004b04:	ec45 4b10 	vmov	d0, r4, r5
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	ee10 0a10 	vmov	r0, s0
 8004b12:	4621      	mov	r1, r4
 8004b14:	dc0f      	bgt.n	8004b36 <__ieee754_sqrt+0x62>
 8004b16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004b1a:	4330      	orrs	r0, r6
 8004b1c:	d0f2      	beq.n	8004b04 <__ieee754_sqrt+0x30>
 8004b1e:	b155      	cbz	r5, 8004b36 <__ieee754_sqrt+0x62>
 8004b20:	ee10 2a10 	vmov	r2, s0
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fb52 	bl	80001d0 <__aeabi_dsub>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	f7fb fe30 	bl	8000794 <__aeabi_ddiv>
 8004b34:	e7e4      	b.n	8004b00 <__ieee754_sqrt+0x2c>
 8004b36:	151b      	asrs	r3, r3, #20
 8004b38:	d073      	beq.n	8004c22 <__ieee754_sqrt+0x14e>
 8004b3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b3e:	07dd      	lsls	r5, r3, #31
 8004b40:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004b44:	bf48      	it	mi
 8004b46:	0fc8      	lsrmi	r0, r1, #31
 8004b48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b4c:	bf44      	itt	mi
 8004b4e:	0049      	lslmi	r1, r1, #1
 8004b50:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004b54:	2500      	movs	r5, #0
 8004b56:	1058      	asrs	r0, r3, #1
 8004b58:	0fcb      	lsrs	r3, r1, #31
 8004b5a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004b5e:	0049      	lsls	r1, r1, #1
 8004b60:	2316      	movs	r3, #22
 8004b62:	462c      	mov	r4, r5
 8004b64:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004b68:	19a7      	adds	r7, r4, r6
 8004b6a:	4297      	cmp	r7, r2
 8004b6c:	bfde      	ittt	le
 8004b6e:	19bc      	addle	r4, r7, r6
 8004b70:	1bd2      	suble	r2, r2, r7
 8004b72:	19ad      	addle	r5, r5, r6
 8004b74:	0fcf      	lsrs	r7, r1, #31
 8004b76:	3b01      	subs	r3, #1
 8004b78:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004b7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004b84:	d1f0      	bne.n	8004b68 <__ieee754_sqrt+0x94>
 8004b86:	f04f 0c20 	mov.w	ip, #32
 8004b8a:	469e      	mov	lr, r3
 8004b8c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004b90:	42a2      	cmp	r2, r4
 8004b92:	eb06 070e 	add.w	r7, r6, lr
 8004b96:	dc02      	bgt.n	8004b9e <__ieee754_sqrt+0xca>
 8004b98:	d112      	bne.n	8004bc0 <__ieee754_sqrt+0xec>
 8004b9a:	428f      	cmp	r7, r1
 8004b9c:	d810      	bhi.n	8004bc0 <__ieee754_sqrt+0xec>
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	eb07 0e06 	add.w	lr, r7, r6
 8004ba4:	da42      	bge.n	8004c2c <__ieee754_sqrt+0x158>
 8004ba6:	f1be 0f00 	cmp.w	lr, #0
 8004baa:	db3f      	blt.n	8004c2c <__ieee754_sqrt+0x158>
 8004bac:	f104 0801 	add.w	r8, r4, #1
 8004bb0:	1b12      	subs	r2, r2, r4
 8004bb2:	428f      	cmp	r7, r1
 8004bb4:	bf88      	it	hi
 8004bb6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004bba:	1bc9      	subs	r1, r1, r7
 8004bbc:	4433      	add	r3, r6
 8004bbe:	4644      	mov	r4, r8
 8004bc0:	0052      	lsls	r2, r2, #1
 8004bc2:	f1bc 0c01 	subs.w	ip, ip, #1
 8004bc6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004bca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004bce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004bd2:	d1dd      	bne.n	8004b90 <__ieee754_sqrt+0xbc>
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	d006      	beq.n	8004be6 <__ieee754_sqrt+0x112>
 8004bd8:	1c5c      	adds	r4, r3, #1
 8004bda:	bf13      	iteet	ne
 8004bdc:	3301      	addne	r3, #1
 8004bde:	3501      	addeq	r5, #1
 8004be0:	4663      	moveq	r3, ip
 8004be2:	f023 0301 	bicne.w	r3, r3, #1
 8004be6:	106a      	asrs	r2, r5, #1
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	07e9      	lsls	r1, r5, #31
 8004bec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004bf0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004bf4:	bf48      	it	mi
 8004bf6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004bfa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004bfe:	461c      	mov	r4, r3
 8004c00:	e780      	b.n	8004b04 <__ieee754_sqrt+0x30>
 8004c02:	0aca      	lsrs	r2, r1, #11
 8004c04:	3815      	subs	r0, #21
 8004c06:	0549      	lsls	r1, r1, #21
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d0fa      	beq.n	8004c02 <__ieee754_sqrt+0x12e>
 8004c0c:	02d6      	lsls	r6, r2, #11
 8004c0e:	d50a      	bpl.n	8004c26 <__ieee754_sqrt+0x152>
 8004c10:	f1c3 0420 	rsb	r4, r3, #32
 8004c14:	fa21 f404 	lsr.w	r4, r1, r4
 8004c18:	1e5d      	subs	r5, r3, #1
 8004c1a:	4099      	lsls	r1, r3
 8004c1c:	4322      	orrs	r2, r4
 8004c1e:	1b43      	subs	r3, r0, r5
 8004c20:	e78b      	b.n	8004b3a <__ieee754_sqrt+0x66>
 8004c22:	4618      	mov	r0, r3
 8004c24:	e7f0      	b.n	8004c08 <__ieee754_sqrt+0x134>
 8004c26:	0052      	lsls	r2, r2, #1
 8004c28:	3301      	adds	r3, #1
 8004c2a:	e7ef      	b.n	8004c0c <__ieee754_sqrt+0x138>
 8004c2c:	46a0      	mov	r8, r4
 8004c2e:	e7bf      	b.n	8004bb0 <__ieee754_sqrt+0xdc>
 8004c30:	7ff00000 	.word	0x7ff00000

08004c34 <matherr>:
 8004c34:	2000      	movs	r0, #0
 8004c36:	4770      	bx	lr

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
