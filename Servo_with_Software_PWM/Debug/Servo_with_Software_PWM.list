
Servo_with_Software_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000226c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800240c  0800240c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002414  08002414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002428  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e54  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001679  00000000  00000000  00029e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002b510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020aa8  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007909  00000000  00000000  0004d190  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7698  00000000  00000000  00054a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002624  00000000  00000000  0011c1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023dc 	.word	0x080023dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023dc 	.word	0x080023dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 fe7e 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000040 	.word	0x20000040

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000040 	.word	0x20000040

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d00b      	beq.n	800086e <HAL_GPIO_Init+0x5a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d007      	beq.n	800086e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000862:	2b11      	cmp	r3, #17
 8000864:	d003      	beq.n	800086e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b12      	cmp	r3, #18
 800086c:	d130      	bne.n	80008d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a4:	2201      	movs	r2, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	091b      	lsrs	r3, r3, #4
 80008ba:	f003 0201 	and.w	r2, r3, #1
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0xfc>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d123      	bne.n	8000958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	691a      	ldr	r2, [r3, #16]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	08da      	lsrs	r2, r3, #3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3208      	adds	r2, #8
 8000952:	69b9      	ldr	r1, [r7, #24]
 8000954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0203 	and.w	r2, r3, #3
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b58:	787b      	ldrb	r3, [r7, #1]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	619a      	str	r2, [r3, #24]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e25b      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d075      	beq.n	8000c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b9a:	4ba3      	ldr	r3, [pc, #652]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d00c      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ba6:	4ba0      	ldr	r3, [pc, #640]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	d112      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb2:	4b9d      	ldr	r3, [pc, #628]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bbe:	d10b      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc0:	4b99      	ldr	r3, [pc, #612]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d05b      	beq.n	8000c84 <HAL_RCC_OscConfig+0x108>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d157      	bne.n	8000c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e236      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be0:	d106      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x74>
 8000be2:	4b91      	ldr	r3, [pc, #580]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a90      	ldr	r2, [pc, #576]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e01d      	b.n	8000c2c <HAL_RCC_OscConfig+0xb0>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf8:	d10c      	bne.n	8000c14 <HAL_RCC_OscConfig+0x98>
 8000bfa:	4b8b      	ldr	r3, [pc, #556]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a8a      	ldr	r2, [pc, #552]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b88      	ldr	r3, [pc, #544]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a87      	ldr	r2, [pc, #540]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e00b      	b.n	8000c2c <HAL_RCC_OscConfig+0xb0>
 8000c14:	4b84      	ldr	r3, [pc, #528]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a83      	ldr	r2, [pc, #524]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b81      	ldr	r3, [pc, #516]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a80      	ldr	r2, [pc, #512]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fcae 	bl	8000594 <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fcaa 	bl	8000594 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e1fb      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4e:	4b76      	ldr	r3, [pc, #472]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f0      	beq.n	8000c3c <HAL_RCC_OscConfig+0xc0>
 8000c5a:	e014      	b.n	8000c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc9a 	bl	8000594 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fc96 	bl	8000594 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e1e7      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c76:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0xe8>
 8000c82:	e000      	b.n	8000c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d063      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c92:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9e:	4b62      	ldr	r3, [pc, #392]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d11c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000caa:	4b5f      	ldr	r3, [pc, #380]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d116      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d005      	beq.n	8000cce <HAL_RCC_OscConfig+0x152>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e1bb      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cce:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4952      	ldr	r1, [pc, #328]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	e03a      	b.n	8000d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d020      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cec:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <HAL_RCC_OscConfig+0x2b0>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fc4f 	bl	8000594 <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfa:	f7ff fc4b 	bl	8000594 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e19c      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0c:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f0      	beq.n	8000cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4940      	ldr	r1, [pc, #256]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e015      	b.n	8000d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <HAL_RCC_OscConfig+0x2b0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d34:	f7ff fc2e 	bl	8000594 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc2a 	bl	8000594 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e17b      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4e:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d030      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d016      	beq.n	8000d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_RCC_OscConfig+0x2b4>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d74:	f7ff fc0e 	bl	8000594 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc0a 	bl	8000594 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e15b      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0x200>
 8000d9a:	e015      	b.n	8000dc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_RCC_OscConfig+0x2b4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da2:	f7ff fbf7 	bl	8000594 <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000daa:	f7ff fbf3 	bl	8000594 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e144      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f0      	bne.n	8000daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80a0 	beq.w	8000f16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_RCC_OscConfig+0x2b8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d121      	bne.n	8000e56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_RCC_OscConfig+0x2b8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_RCC_OscConfig+0x2b8>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fbb9 	bl	8000594 <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e24:	e011      	b.n	8000e4a <HAL_RCC_OscConfig+0x2ce>
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	42470000 	.word	0x42470000
 8000e30:	42470e80 	.word	0x42470e80
 8000e34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e38:	f7ff fbac 	bl	8000594 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e0fd      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4a:	4b81      	ldr	r3, [pc, #516]	; (8001050 <HAL_RCC_OscConfig+0x4d4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d106      	bne.n	8000e6c <HAL_RCC_OscConfig+0x2f0>
 8000e5e:	4b7d      	ldr	r3, [pc, #500]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e62:	4a7c      	ldr	r2, [pc, #496]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6713      	str	r3, [r2, #112]	; 0x70
 8000e6a:	e01c      	b.n	8000ea6 <HAL_RCC_OscConfig+0x32a>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d10c      	bne.n	8000e8e <HAL_RCC_OscConfig+0x312>
 8000e74:	4b77      	ldr	r3, [pc, #476]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	4a76      	ldr	r2, [pc, #472]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e80:	4b74      	ldr	r3, [pc, #464]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	4a73      	ldr	r2, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8c:	e00b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x32a>
 8000e8e:	4b71      	ldr	r3, [pc, #452]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a70      	ldr	r2, [pc, #448]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9e:	4a6d      	ldr	r2, [pc, #436]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d015      	beq.n	8000eda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eae:	f7ff fb71 	bl	8000594 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb4:	e00a      	b.n	8000ecc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fb6d 	bl	8000594 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e0bc      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ecc:	4b61      	ldr	r3, [pc, #388]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0ee      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x33a>
 8000ed8:	e014      	b.n	8000f04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fb5b 	bl	8000594 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee0:	e00a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee2:	f7ff fb57 	bl	8000594 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e0a6      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	4b56      	ldr	r3, [pc, #344]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1ee      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d105      	bne.n	8000f16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f0a:	4b52      	ldr	r3, [pc, #328]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8092 	beq.w	8001044 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f20:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d05c      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d141      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f34:	4b48      	ldr	r3, [pc, #288]	; (8001058 <HAL_RCC_OscConfig+0x4dc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fb2b 	bl	8000594 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff fb27 	bl	8000594 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e078      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69da      	ldr	r2, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	019b      	lsls	r3, r3, #6
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	085b      	lsrs	r3, r3, #1
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	061b      	lsls	r3, r3, #24
 8000f84:	4933      	ldr	r1, [pc, #204]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_RCC_OscConfig+0x4dc>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fb00 	bl	8000594 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff fafc 	bl	8000594 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e04d      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x41c>
 8000fb6:	e045      	b.n	8001044 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_RCC_OscConfig+0x4dc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fae9 	bl	8000594 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fae5 	bl	8000594 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e036      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x44a>
 8000fe4:	e02e      	b.n	8001044 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e029      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_RCC_OscConfig+0x4d8>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	429a      	cmp	r2, r3
 8001004:	d11c      	bne.n	8001040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001010:	429a      	cmp	r2, r3
 8001012:	d115      	bne.n	8001040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800101a:	4013      	ands	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001020:	4293      	cmp	r3, r2
 8001022:	d10d      	bne.n	8001040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800102e:	429a      	cmp	r2, r3
 8001030:	d106      	bne.n	8001040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40007000 	.word	0x40007000
 8001054:	40023800 	.word	0x40023800
 8001058:	42470060 	.word	0x42470060

0800105c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0cc      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001070:	4b68      	ldr	r3, [pc, #416]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d90c      	bls.n	8001098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	4b63      	ldr	r3, [pc, #396]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0b8      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c8:	4b53      	ldr	r3, [pc, #332]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	494d      	ldr	r1, [pc, #308]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d044      	beq.n	800117c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d119      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e07f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d003      	beq.n	800111a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001116:	2b03      	cmp	r3, #3
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e06f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e067      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 0203 	bic.w	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4934      	ldr	r1, [pc, #208]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800114c:	f7ff fa22 	bl	8000594 <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	e00a      	b.n	800116a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f7ff fa1e 	bl	8000594 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d901      	bls.n	800116a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e04f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 020c 	and.w	r2, r3, #12
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	429a      	cmp	r2, r3
 800117a:	d1eb      	bne.n	8001154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d20c      	bcs.n	80011a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e032      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4916      	ldr	r1, [pc, #88]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011e2:	f000 f821 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80011e6:	4601      	mov	r1, r0
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	fa21 f303 	lsr.w	r3, r1, r3
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f982 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00
 8001218:	40023800 	.word	0x40023800
 800121c:	080023f4 	.word	0x080023f4
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000

08001228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b04      	cmp	r3, #4
 8001248:	d007      	beq.n	800125a <HAL_RCC_GetSysClockFreq+0x32>
 800124a:	2b08      	cmp	r3, #8
 800124c:	d008      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x38>
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 80b4 	bne.w	80013bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001256:	60bb      	str	r3, [r7, #8]
       break;
 8001258:	e0b3      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800125a:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800125c:	60bb      	str	r3, [r7, #8]
      break;
 800125e:	e0b0      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001268:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d04a      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	099b      	lsrs	r3, r3, #6
 800127c:	f04f 0400 	mov.w	r4, #0
 8001280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	ea03 0501 	and.w	r5, r3, r1
 800128c:	ea04 0602 	and.w	r6, r4, r2
 8001290:	4629      	mov	r1, r5
 8001292:	4632      	mov	r2, r6
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	f04f 0400 	mov.w	r4, #0
 800129c:	0154      	lsls	r4, r2, #5
 800129e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012a2:	014b      	lsls	r3, r1, #5
 80012a4:	4619      	mov	r1, r3
 80012a6:	4622      	mov	r2, r4
 80012a8:	1b49      	subs	r1, r1, r5
 80012aa:	eb62 0206 	sbc.w	r2, r2, r6
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	f04f 0400 	mov.w	r4, #0
 80012b6:	0194      	lsls	r4, r2, #6
 80012b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012bc:	018b      	lsls	r3, r1, #6
 80012be:	1a5b      	subs	r3, r3, r1
 80012c0:	eb64 0402 	sbc.w	r4, r4, r2
 80012c4:	f04f 0100 	mov.w	r1, #0
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	00e2      	lsls	r2, r4, #3
 80012ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012d2:	00d9      	lsls	r1, r3, #3
 80012d4:	460b      	mov	r3, r1
 80012d6:	4614      	mov	r4, r2
 80012d8:	195b      	adds	r3, r3, r5
 80012da:	eb44 0406 	adc.w	r4, r4, r6
 80012de:	f04f 0100 	mov.w	r1, #0
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	0262      	lsls	r2, r4, #9
 80012e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012ec:	0259      	lsls	r1, r3, #9
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f04f 0400 	mov.w	r4, #0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	f7fe ff62 	bl	80001c8 <__aeabi_uldivmod>
 8001304:	4603      	mov	r3, r0
 8001306:	460c      	mov	r4, r1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e049      	b.n	80013a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	f04f 0400 	mov.w	r4, #0
 8001316:	f240 11ff 	movw	r1, #511	; 0x1ff
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	ea03 0501 	and.w	r5, r3, r1
 8001322:	ea04 0602 	and.w	r6, r4, r2
 8001326:	4629      	mov	r1, r5
 8001328:	4632      	mov	r2, r6
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	f04f 0400 	mov.w	r4, #0
 8001332:	0154      	lsls	r4, r2, #5
 8001334:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001338:	014b      	lsls	r3, r1, #5
 800133a:	4619      	mov	r1, r3
 800133c:	4622      	mov	r2, r4
 800133e:	1b49      	subs	r1, r1, r5
 8001340:	eb62 0206 	sbc.w	r2, r2, r6
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	f04f 0400 	mov.w	r4, #0
 800134c:	0194      	lsls	r4, r2, #6
 800134e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001352:	018b      	lsls	r3, r1, #6
 8001354:	1a5b      	subs	r3, r3, r1
 8001356:	eb64 0402 	sbc.w	r4, r4, r2
 800135a:	f04f 0100 	mov.w	r1, #0
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	00e2      	lsls	r2, r4, #3
 8001364:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001368:	00d9      	lsls	r1, r3, #3
 800136a:	460b      	mov	r3, r1
 800136c:	4614      	mov	r4, r2
 800136e:	195b      	adds	r3, r3, r5
 8001370:	eb44 0406 	adc.w	r4, r4, r6
 8001374:	f04f 0100 	mov.w	r1, #0
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	02a2      	lsls	r2, r4, #10
 800137e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001382:	0299      	lsls	r1, r3, #10
 8001384:	460b      	mov	r3, r1
 8001386:	4614      	mov	r4, r2
 8001388:	4618      	mov	r0, r3
 800138a:	4621      	mov	r1, r4
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0400 	mov.w	r4, #0
 8001392:	461a      	mov	r2, r3
 8001394:	4623      	mov	r3, r4
 8001396:	f7fe ff17 	bl	80001c8 <__aeabi_uldivmod>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	3301      	adds	r3, #1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b8:	60bb      	str	r3, [r7, #8]
      break;
 80013ba:	e002      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013be:	60bb      	str	r3, [r7, #8]
      break;
 80013c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013c2:	68bb      	ldr	r3, [r7, #8]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	00f42400 	.word	0x00f42400
 80013d4:	007a1200 	.word	0x007a1200

080013d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_RCC_GetHCLKFreq+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008

080013f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f4:	f7ff fff0 	bl	80013d8 <HAL_RCC_GetHCLKFreq>
 80013f8:	4601      	mov	r1, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	0a9b      	lsrs	r3, r3, #10
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	08002404 	.word	0x08002404

08001418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e01d      	b.n	8001466 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 ff04 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3304      	adds	r3, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f000 fa4a 	bl	80018f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d007      	beq.n	80014a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_TIM_Base_Stop_IT+0x48>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	f240 4344 	movw	r3, #1092	; 0x444
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <HAL_TIM_Base_Stop_IT+0x48>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b02      	cmp	r3, #2
 8001520:	d122      	bne.n	8001568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b02      	cmp	r3, #2
 800152e:	d11b      	bne.n	8001568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f06f 0202 	mvn.w	r2, #2
 8001538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f9af 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 8001554:	e005      	b.n	8001562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9a1 	bl	800189e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f9b2 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b04      	cmp	r3, #4
 8001574:	d122      	bne.n	80015bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b04      	cmp	r3, #4
 8001582:	d11b      	bne.n	80015bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0204 	mvn.w	r2, #4
 800158c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f985 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 80015a8:	e005      	b.n	80015b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f977 	bl	800189e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f988 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d122      	bne.n	8001610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d11b      	bne.n	8001610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0208 	mvn.w	r2, #8
 80015e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2204      	movs	r2, #4
 80015e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f95b 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 80015fc:	e005      	b.n	800160a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f94d 	bl	800189e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f95e 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b10      	cmp	r3, #16
 800161c:	d122      	bne.n	8001664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b10      	cmp	r3, #16
 800162a:	d11b      	bne.n	8001664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0210 	mvn.w	r2, #16
 8001634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2208      	movs	r2, #8
 800163a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f931 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 8001650:	e005      	b.n	800165e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f923 	bl	800189e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f934 	bl	80018c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d10e      	bne.n	8001690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0201 	mvn.w	r2, #1
 8001688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f8fd 	bl	800188a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	2b80      	cmp	r3, #128	; 0x80
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a8:	2b80      	cmp	r3, #128	; 0x80
 80016aa:	d107      	bne.n	80016bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fada 	bl	8001c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c6:	2b40      	cmp	r3, #64	; 0x40
 80016c8:	d10e      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	d107      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8f9 	bl	80018da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d10e      	bne.n	8001714 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b20      	cmp	r3, #32
 8001702:	d107      	bne.n	8001714 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f06f 0220 	mvn.w	r2, #32
 800170c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 faa4 	bl	8001c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_TIM_ConfigClockSource+0x18>
 8001730:	2302      	movs	r3, #2
 8001732:	e0a6      	b.n	8001882 <HAL_TIM_ConfigClockSource+0x166>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800175a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d067      	beq.n	800183c <HAL_TIM_ConfigClockSource+0x120>
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d80b      	bhi.n	8001788 <HAL_TIM_ConfigClockSource+0x6c>
 8001770:	2b10      	cmp	r3, #16
 8001772:	d073      	beq.n	800185c <HAL_TIM_ConfigClockSource+0x140>
 8001774:	2b10      	cmp	r3, #16
 8001776:	d802      	bhi.n	800177e <HAL_TIM_ConfigClockSource+0x62>
 8001778:	2b00      	cmp	r3, #0
 800177a:	d06f      	beq.n	800185c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800177c:	e078      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800177e:	2b20      	cmp	r3, #32
 8001780:	d06c      	beq.n	800185c <HAL_TIM_ConfigClockSource+0x140>
 8001782:	2b30      	cmp	r3, #48	; 0x30
 8001784:	d06a      	beq.n	800185c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001786:	e073      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001788:	2b70      	cmp	r3, #112	; 0x70
 800178a:	d00d      	beq.n	80017a8 <HAL_TIM_ConfigClockSource+0x8c>
 800178c:	2b70      	cmp	r3, #112	; 0x70
 800178e:	d804      	bhi.n	800179a <HAL_TIM_ConfigClockSource+0x7e>
 8001790:	2b50      	cmp	r3, #80	; 0x50
 8001792:	d033      	beq.n	80017fc <HAL_TIM_ConfigClockSource+0xe0>
 8001794:	2b60      	cmp	r3, #96	; 0x60
 8001796:	d041      	beq.n	800181c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001798:	e06a      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179e:	d066      	beq.n	800186e <HAL_TIM_ConfigClockSource+0x152>
 80017a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a4:	d017      	beq.n	80017d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80017a6:	e063      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6899      	ldr	r1, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f000 f9b4 	bl	8001b24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80017ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	609a      	str	r2, [r3, #8]
      break;
 80017d4:	e04c      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f000 f99d 	bl	8001b24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f8:	609a      	str	r2, [r3, #8]
      break;
 80017fa:	e039      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	461a      	mov	r2, r3
 800180a:	f000 f911 	bl	8001a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2150      	movs	r1, #80	; 0x50
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f96a 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 800181a:	e029      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	461a      	mov	r2, r3
 800182a:	f000 f930 	bl	8001a8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2160      	movs	r1, #96	; 0x60
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f95a 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 800183a:	e019      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	f000 f8f1 	bl	8001a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f94a 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 800185a:	e009      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f000 f941 	bl	8001aee <TIM_ITRx_SetConfig>
      break;
 800186c:	e000      	b.n	8001870 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800186e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <TIM_Base_SetConfig+0x114>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <TIM_Base_SetConfig+0x40>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d00f      	beq.n	8001930 <TIM_Base_SetConfig+0x40>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <TIM_Base_SetConfig+0x118>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00b      	beq.n	8001930 <TIM_Base_SetConfig+0x40>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a3c      	ldr	r2, [pc, #240]	; (8001a0c <TIM_Base_SetConfig+0x11c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <TIM_Base_SetConfig+0x40>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <TIM_Base_SetConfig+0x120>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d003      	beq.n	8001930 <TIM_Base_SetConfig+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <TIM_Base_SetConfig+0x124>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d108      	bne.n	8001942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <TIM_Base_SetConfig+0x114>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d02b      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d027      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <TIM_Base_SetConfig+0x118>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d023      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a2b      	ldr	r2, [pc, #172]	; (8001a0c <TIM_Base_SetConfig+0x11c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01f      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <TIM_Base_SetConfig+0x120>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01b      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <TIM_Base_SetConfig+0x124>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d017      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <TIM_Base_SetConfig+0x128>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <TIM_Base_SetConfig+0x12c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00f      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <TIM_Base_SetConfig+0x130>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00b      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <TIM_Base_SetConfig+0x134>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <TIM_Base_SetConfig+0x138>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d003      	beq.n	80019a2 <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <TIM_Base_SetConfig+0x13c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d108      	bne.n	80019b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <TIM_Base_SetConfig+0x114>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d003      	beq.n	80019e8 <TIM_Base_SetConfig+0xf8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <TIM_Base_SetConfig+0x124>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d103      	bne.n	80019f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	615a      	str	r2, [r3, #20]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40000c00 	.word	0x40000c00
 8001a14:	40010400 	.word	0x40010400
 8001a18:	40014000 	.word	0x40014000
 8001a1c:	40014400 	.word	0x40014400
 8001a20:	40014800 	.word	0x40014800
 8001a24:	40001800 	.word	0x40001800
 8001a28:	40001c00 	.word	0x40001c00
 8001a2c:	40002000 	.word	0x40002000

08001a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	f023 0201 	bic.w	r2, r3, #1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f023 030a 	bic.w	r3, r3, #10
 8001a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	621a      	str	r2, [r3, #32]
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	f023 0210 	bic.w	r2, r3, #16
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	031b      	lsls	r3, r3, #12
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001aca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	621a      	str	r2, [r3, #32]
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f043 0307 	orr.w	r3, r3, #7
 8001b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	609a      	str	r2, [r3, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e05a      	b.n	8001c32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc8:	d01d      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d018      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00e      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10c      	bne.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	40010400 	.word	0x40010400
 8001c54:	40014000 	.word	0x40014000
 8001c58:	40001800 	.word	0x40001800

08001c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <TIM2_IRQHandler>:
bool finish=0;

extern uint32_t ms;

void TIM2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

	  time++;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <TIM2_IRQHandler+0x2c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <TIM2_IRQHandler+0x2c>)
 8001c90:	6013      	str	r3, [r2, #0]
	  if(time==10000)
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <TIM2_IRQHandler+0x2c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d102      	bne.n	8001ca4 <TIM2_IRQHandler+0x20>
	  {
		  time=0;
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <TIM2_IRQHandler+0x2c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
	  }

  HAL_TIM_IRQHandler(&htim2);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <TIM2_IRQHandler+0x30>)
 8001ca6:	f7ff fc31 	bl	800150c <HAL_TIM_IRQHandler>

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000028 	.word	0x20000028
 8001cb4:	2000004c 	.word	0x2000004c

08001cb8 <PCLK1TIM>:

uint32_t PCLK1TIM()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cbe:	f7ff fb97 	bl	80013f0 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	6078      	str	r0, [r7, #4]

  if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <PCLK1TIM+0x28>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <PCLK1TIM+0x1c>
  {
    return (pclk1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	e001      	b.n	8001cd8 <PCLK1TIM+0x20>
  }
  else
  {
    return(2 * pclk1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	005b      	lsls	r3, r3, #1
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <set_PWM_Frequency>:



void set_PWM_Frequency(uint16_t frequency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]

  HAL_TIM_Base_Stop_IT(&htim2);
 8001cee:	4837      	ldr	r0, [pc, #220]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001cf0:	f7ff fbe1 	bl	80014b6 <HAL_TIM_Base_Stop_IT>

  uint16_t Prescelar=0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t period=0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t systemClockFreq=0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t timerFrequency=0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24

  systemClockFreq = HAL_RCC_GetSysClockFreq()/2;
 8001d04:	f7ff fa90 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  timerFrequency=PCLK1TIM();
 8001d0e:	f7ff ffd3 	bl	8001cb8 <PCLK1TIM>
 8001d12:	6278      	str	r0, [r7, #36]	; 0x24
  Prescelar= systemClockFreq/( 2*frequency*100);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	22c8      	movs	r2, #200	; 0xc8
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d24:	85fb      	strh	r3, [r7, #46]	; 0x2e
  timerMax =(systemClockFreq/(Prescelar));
 8001d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <set_PWM_Frequency+0xec>)
 8001d30:	6013      	str	r3, [r2, #0]
  Frequency=frequency;
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <set_PWM_Frequency+0xf0>)
 8001d36:	6013      	str	r3, [r2, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = Prescelar-1;
 8001d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d7a:	4814      	ldr	r0, [pc, #80]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d7c:	f7ff fb4c 	bl	8001418 <HAL_TIM_Base_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <set_PWM_Frequency+0xa6>
  {
    Error_Handler();
 8001d86:	f000 fa31 	bl	80021ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001d98:	f7ff fcc0 	bl	800171c <HAL_TIM_ConfigClockSource>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <set_PWM_Frequency+0xc2>
  {
    Error_Handler();
 8001da2:	f000 fa23 	bl	80021ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <set_PWM_Frequency+0xe8>)
 8001db6:	f7ff fed5 	bl	8001b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <set_PWM_Frequency+0xe0>
  {
    Error_Handler();
 8001dc0:	f000 fa14 	bl	80021ec <Error_Handler>
  }


}
 8001dc4:	bf00      	nop
 8001dc6:	3730      	adds	r7, #48	; 0x30
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	2000004c 	.word	0x2000004c
 8001dd0:	20000030 	.word	0x20000030
 8001dd4:	20000034 	.word	0x20000034

08001dd8 <PWM_GPIO_Init>:

void PWM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]

	  PWM=GPIOx;
 8001df4:	4a3d      	ldr	r2, [pc, #244]	; (8001eec <PWM_GPIO_Init+0x114>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
	  PWM_Pin=GPIO_Pin;
 8001dfa:	4a3d      	ldr	r2, [pc, #244]	; (8001ef0 <PWM_GPIO_Init+0x118>)
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	8013      	strh	r3, [r2, #0]

	  if(GPIOx==GPIOA  )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <PWM_GPIO_Init+0x11c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10e      	bne.n	8001e26 <PWM_GPIO_Init+0x4e>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	4a39      	ldr	r2, [pc, #228]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6313      	str	r3, [r2, #48]	; 0x30
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	e04a      	b.n	8001ebc <PWM_GPIO_Init+0xe4>
	  else if(GPIOx==GPIOB )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a34      	ldr	r2, [pc, #208]	; (8001efc <PWM_GPIO_Init+0x124>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10e      	bne.n	8001e4c <PWM_GPIO_Init+0x74>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	e037      	b.n	8001ebc <PWM_GPIO_Init+0xe4>
	  else if(GPIOx==GPIOC  )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <PWM_GPIO_Init+0x128>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d10e      	bne.n	8001e72 <PWM_GPIO_Init+0x9a>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	e024      	b.n	8001ebc <PWM_GPIO_Init+0xe4>
	  else if(GPIOx==GPIOD  )
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <PWM_GPIO_Init+0x12c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10e      	bne.n	8001e98 <PWM_GPIO_Init+0xc0>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	e011      	b.n	8001ebc <PWM_GPIO_Init+0xe4>
	  else if(GPIOx==GPIOE   )
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <PWM_GPIO_Init+0x130>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10d      	bne.n	8001ebc <PWM_GPIO_Init+0xe4>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <PWM_GPIO_Init+0x120>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]

	  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fe40 	bl	8000b48 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fc98 	bl	8000814 <HAL_GPIO_Init>

}
 8001ee4:	bf00      	nop
 8001ee6:	3730      	adds	r7, #48	; 0x30
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000044 	.word	0x20000044
 8001ef0:	20000048 	.word	0x20000048
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000

08001f0c <servoMove>:


}

void servoMove(int degree)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

	 HAL_TIM_Base_Start_IT(&htim2);
 8001f14:	4830      	ldr	r0, [pc, #192]	; (8001fd8 <servoMove+0xcc>)
 8001f16:	f7ff faaa 	bl	800146e <HAL_TIM_Base_Start_IT>

	 int value=(int)(25+(100*degree/180));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2264      	movs	r2, #100	; 0x64
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	4a2e      	ldr	r2, [pc, #184]	; (8001fdc <servoMove+0xd0>)
 8001f24:	fb82 1203 	smull	r1, r2, r2, r3
 8001f28:	441a      	add	r2, r3
 8001f2a:	11d2      	asrs	r2, r2, #7
 8001f2c:	17db      	asrs	r3, r3, #31
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	3319      	adds	r3, #25
 8001f32:	60fb      	str	r3, [r7, #12]
	 if(value>125)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b7d      	cmp	r3, #125	; 0x7d
 8001f38:	dd01      	ble.n	8001f3e <servoMove+0x32>
		 value=125;
 8001f3a:	237d      	movs	r3, #125	; 0x7d
 8001f3c:	60fb      	str	r3, [r7, #12]
	 for(int i=0;i<50;i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	e03e      	b.n	8001fc2 <servoMove+0xb6>
	 {
			  time=0;
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <servoMove+0xd4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
			  micro=0;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <servoMove+0xd8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
			  while(time<value )
 8001f50:	e011      	b.n	8001f76 <servoMove+0x6a>
			  {
                if(!start)
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <servoMove+0xdc>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <servoMove+0x6a>
                {
                  start=1;
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <servoMove+0xdc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(PWM, PWM_Pin, SET);
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <servoMove+0xe0>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <servoMove+0xe4>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fde9 	bl	8000b48 <HAL_GPIO_WritePin>
			  while(time<value )
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <servoMove+0xd4>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d3e8      	bcc.n	8001f52 <servoMove+0x46>
                }

			  }
			  while(time<1000)
 8001f80:	e011      	b.n	8001fa6 <servoMove+0x9a>
			  {
				 if(!finish)
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <servoMove+0xe8>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <servoMove+0x9a>
				 {
					 finish=1;
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <servoMove+0xe8>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
					 HAL_GPIO_WritePin(PWM, PWM_Pin, GPIO_PIN_RESET);
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <servoMove+0xe0>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <servoMove+0xe4>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fdd1 	bl	8000b48 <HAL_GPIO_WritePin>
			  while(time<1000)
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <servoMove+0xd4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fae:	d3e8      	bcc.n	8001f82 <servoMove+0x76>
				 }
			  }
			  start=0;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <servoMove+0xdc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
			  finish=0;
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <servoMove+0xe8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
	 for(int i=0;i<50;i++)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b31      	cmp	r3, #49	; 0x31
 8001fc6:	ddbd      	ble.n	8001f44 <servoMove+0x38>
	 }

     HAL_TIM_Base_Stop_IT(&htim2);
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <servoMove+0xcc>)
 8001fca:	f7ff fa74 	bl	80014b6 <HAL_TIM_Base_Stop_IT>


}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000004c 	.word	0x2000004c
 8001fdc:	b60b60b7 	.word	0xb60b60b7
 8001fe0:	20000028 	.word	0x20000028
 8001fe4:	2000002c 	.word	0x2000002c
 8001fe8:	20000038 	.word	0x20000038
 8001fec:	20000044 	.word	0x20000044
 8001ff0:	20000048 	.word	0x20000048
 8001ff4:	20000039 	.word	0x20000039

08001ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ffc:	f7fe fa64 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002000:	f000 f824 	bl	800204c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002004:	f000 f8d8 	bl	80021b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002008:	f000 f88a 	bl	8002120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    PWM_GPIO_Init(GPIOA, GPIO_PIN_4);
 800200c:	2110      	movs	r1, #16
 800200e:	480e      	ldr	r0, [pc, #56]	; (8002048 <main+0x50>)
 8002010:	f7ff fee2 	bl	8001dd8 <PWM_GPIO_Init>
    set_PWM_Frequency(1000);
 8002014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002018:	f7ff fe64 	bl	8001ce4 <set_PWM_Frequency>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		servoMove(0);
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff ff75 	bl	8001f0c <servoMove>
		HAL_Delay(2000);
 8002022:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002026:	f7fe fac1 	bl	80005ac <HAL_Delay>
		servoMove(90);
 800202a:	205a      	movs	r0, #90	; 0x5a
 800202c:	f7ff ff6e 	bl	8001f0c <servoMove>
		HAL_Delay(2000);
 8002030:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002034:	f7fe faba 	bl	80005ac <HAL_Delay>
		servoMove(180);
 8002038:	20b4      	movs	r0, #180	; 0xb4
 800203a:	f7ff ff67 	bl	8001f0c <servoMove>
		HAL_Delay(2000);
 800203e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002042:	f7fe fab3 	bl	80005ac <HAL_Delay>
		servoMove(0);
 8002046:	e7e9      	b.n	800201c <main+0x24>
 8002048:	40020000 	.word	0x40020000

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b094      	sub	sp, #80	; 0x50
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	2230      	movs	r2, #48	; 0x30
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f9b6 	bl	80023cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <SystemClock_Config+0xcc>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <SystemClock_Config+0xcc>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <SystemClock_Config+0xcc>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <SystemClock_Config+0xd0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a21      	ldr	r2, [pc, #132]	; (800211c <SystemClock_Config+0xd0>)
 8002096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <SystemClock_Config+0xd0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ac:	2301      	movs	r3, #1
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b0:	2310      	movs	r3, #16
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b4:	2302      	movs	r3, #2
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020bc:	2308      	movs	r3, #8
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020c0:	23a8      	movs	r3, #168	; 0xa8
 80020c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020c8:	2304      	movs	r3, #4
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fd53 	bl	8000b7c <HAL_RCC_OscConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020dc:	f000 f886 	bl	80021ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e0:	230f      	movs	r3, #15
 80020e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2105      	movs	r1, #5
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe ffac 	bl	800105c <HAL_RCC_ClockConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800210a:	f000 f86f 	bl	80021ec <Error_Handler>
  }
}
 800210e:	bf00      	nop
 8002110:	3750      	adds	r7, #80	; 0x50
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40007000 	.word	0x40007000

08002120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <MX_TIM2_Init+0x94>)
 800213e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;//839;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_TIM2_Init+0x94>)
 8002146:	f240 3247 	movw	r2, #839	; 0x347
 800214a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_TIM2_Init+0x94>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;//1;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_TIM2_Init+0x94>)
 8002154:	2201      	movs	r2, #1
 8002156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_TIM2_Init+0x94>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_TIM2_Init+0x94>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002164:	4813      	ldr	r0, [pc, #76]	; (80021b4 <MX_TIM2_Init+0x94>)
 8002166:	f7ff f957 	bl	8001418 <HAL_TIM_Base_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002170:	f000 f83c 	bl	80021ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	4619      	mov	r1, r3
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <MX_TIM2_Init+0x94>)
 8002182:	f7ff facb 	bl	800171c <HAL_TIM_ConfigClockSource>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800218c:	f000 f82e 	bl	80021ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_TIM2_Init+0x94>)
 800219e:	f7ff fce1 	bl	8001b64 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f000 f820 	bl	80021ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000004c 	.word	0x2000004c

080021b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_GPIO_Init+0x30>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <MX_GPIO_Init+0x30>)
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_GPIO_Init+0x30>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_MspInit+0x4c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_MspInit+0x4c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d115      	bne.n	800228a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_TIM_Base_MspInit+0x48>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_TIM_Base_MspInit+0x48>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_TIM_Base_MspInit+0x48>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	201c      	movs	r0, #28
 8002280:	f7fe fa91 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002284:	201c      	movs	r0, #28
 8002286:	f7fe faaa 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ms++;
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <SysTick_Handler+0x18>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a03      	ldr	r2, [pc, #12]	; (8002300 <SysTick_Handler+0x18>)
 80022f4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f6:	f7fe f939 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000003c 	.word	0x2000003c

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <SystemInit+0x28>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <SystemInit+0x28>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <SystemInit+0x28>)
 800231a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800231e:	609a      	str	r2, [r3, #8]
#endif
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002336:	e003      	b.n	8002340 <LoopCopyDataInit>

08002338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800233a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800233c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800233e:	3104      	adds	r1, #4

08002340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002348:	d3f6      	bcc.n	8002338 <CopyDataInit>
  ldr  r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800234c:	e002      	b.n	8002354 <LoopFillZerobss>

0800234e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800234e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002350:	f842 3b04 	str.w	r3, [r2], #4

08002354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002358:	d3f9      	bcc.n	800234e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800235a:	f7ff ffd3 	bl	8002304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235e:	f000 f811 	bl	8002384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002362:	f7ff fe49 	bl	8001ff8 <main>
  bx  lr    
 8002366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002368:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800236c:	0800241c 	.word	0x0800241c
  ldr  r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002374:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002378:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800237c:	2000008c 	.word	0x2000008c

08002380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC_IRQHandler>
	...

08002384 <__libc_init_array>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	4e0d      	ldr	r6, [pc, #52]	; (80023bc <__libc_init_array+0x38>)
 8002388:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <__libc_init_array+0x3c>)
 800238a:	1ba4      	subs	r4, r4, r6
 800238c:	10a4      	asrs	r4, r4, #2
 800238e:	2500      	movs	r5, #0
 8002390:	42a5      	cmp	r5, r4
 8002392:	d109      	bne.n	80023a8 <__libc_init_array+0x24>
 8002394:	4e0b      	ldr	r6, [pc, #44]	; (80023c4 <__libc_init_array+0x40>)
 8002396:	4c0c      	ldr	r4, [pc, #48]	; (80023c8 <__libc_init_array+0x44>)
 8002398:	f000 f820 	bl	80023dc <_init>
 800239c:	1ba4      	subs	r4, r4, r6
 800239e:	10a4      	asrs	r4, r4, #2
 80023a0:	2500      	movs	r5, #0
 80023a2:	42a5      	cmp	r5, r4
 80023a4:	d105      	bne.n	80023b2 <__libc_init_array+0x2e>
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023ac:	4798      	blx	r3
 80023ae:	3501      	adds	r5, #1
 80023b0:	e7ee      	b.n	8002390 <__libc_init_array+0xc>
 80023b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b6:	4798      	blx	r3
 80023b8:	3501      	adds	r5, #1
 80023ba:	e7f2      	b.n	80023a2 <__libc_init_array+0x1e>
 80023bc:	08002414 	.word	0x08002414
 80023c0:	08002414 	.word	0x08002414
 80023c4:	08002414 	.word	0x08002414
 80023c8:	08002418 	.word	0x08002418

080023cc <memset>:
 80023cc:	4402      	add	r2, r0
 80023ce:	4603      	mov	r3, r0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <memset+0xa>
 80023d4:	4770      	bx	lr
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <memset+0x4>

080023dc <_init>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr

080023e8 <_fini>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	bf00      	nop
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr
